# ==============================================================================
# Veridis Enterprise Environment Configuration
# ==============================================================================
#
# This file provides enterprise-grade configurations with:
#
# • Enhanced compliance and audit capabilities (SOC 2, GDPR, HIPAA)
# • Advanced monitoring and observability stack
# • Enterprise security hardening and scanning
# • Automated backup and disaster recovery
# • High availability and fault tolerance
# • Performance optimization for production workloads
# • Comprehensive audit logging and immutable records
# • Real-time threat detection and incident response
#
# COMPLIANCE STANDARDS:
# ====================
# • SOC 2 Type II - Security and availability controls
# • GDPR - General data protection regulation compliance
# • ISO 27001 - Information security management
# • NIST 800-190 - Container security guidelines
# • PCI DSS Level 1 - Payment card data security
# • HIPAA - Health Insurance Portability and Accountability Act
#
# USAGE:
# ======
# docker-compose -f docker-compose.yml -f docker-compose.app.yml -f docker-compose.ui.yml -f docker-compose.enterprise.yml up
#
# SECURITY NOTE:
# ==============
# This configuration requires:
# • External secrets management (HashiCorp Vault, AWS Secrets Manager)
# • Proper RBAC and access controls
# • Network security policies
# • Certificate management
# • Security monitoring and SIEM integration
#
# ==============================================================================

version: "3.8"

# Enterprise extension fields
x-enterprise-logging: &enterprise-logging
  driver: ${ENTERPRISE_LOGGING_DRIVER:-json-file}
  options:
    max-size: "100m"
    max-file: "20"
    compress: "true"
    labels: "service,environment=enterprise,compliance=enabled"

x-enterprise-security: &enterprise-security
  security_opt:
    - no-new-privileges:true
    - seccomp:${ENTERPRISE_SECCOMP_PROFILE:-./config/seccomp/enterprise.json}
    - apparmor:${ENTERPRISE_APPARMOR_PROFILE:-docker-enterprise}
  cap_drop:
    - ALL
  cap_add:
    - NET_BIND_SERVICE
  read_only: true

x-enterprise-resources-small: &enterprise-resources-small
  limits:
    memory: 2G
    cpus: "2.0"
    pids: 200
  reservations:
    memory: 1G
    cpus: "1.0"

x-enterprise-resources-medium: &enterprise-resources-medium
  limits:
    memory: 4G
    cpus: "4.0"
    pids: 400
  reservations:
    memory: 2G
    cpus: "2.0"

x-enterprise-resources-large: &enterprise-resources-large
  limits:
    memory: 8G
    cpus: "8.0"
    pids: 800
  reservations:
    memory: 4G
    cpus: "4.0"

x-enterprise-healthcheck: &enterprise-healthcheck
  interval: 15s
  timeout: 5s
  retries: 5
  start_period: 30s

x-enterprise-restart-policy: &enterprise-restart-policy
  condition: unless-stopped
  delay: 10s
  max_attempts: 5
  window: 120s

services:
  # ==============================================================================
  # Core Application Service Overrides - Enterprise Configuration
  # ==============================================================================

  # Veridis Backend - Enterprise Mode
  veridis-backend:
    environment:
      # Enterprise compliance settings
      COMPLIANCE_LEVEL: ENTERPRISE
      GDPR_STRICT_MODE: "true"
      GDPR_AUTOMATION_ENABLED: "true"
      GDPR_CRYPTO_ERASURE_ENABLED: "true"
      GDPR_CRYPTO_ERASURE_ROUNDS: "5"
      GDPR_RETENTION_AUDIT: "true"
      GDPR_DATA_SUBJECT_RIGHTS_AUTOMATION: "true"
      GDPR_CONSENT_MANAGEMENT: "true"
      GDPR_RIGHT_TO_PORTABILITY: "true"
      GDPR_BREACH_NOTIFICATION: "true"
      # SOC 2 compliance
      SOC2_COMPLIANCE: "true"
      SOC2_AVAILABILITY_MONITORING: "true"
      SOC2_SECURITY_MONITORING: "true"
      SOC2_PROCESSING_INTEGRITY: "true"
      SOC2_CONFIDENTIALITY: "true"
      SOC2_PRIVACY: "true"
      # Audit and logging
      AUDIT_EVERYTHING: "true"
      AUDIT_LOG_IMMUTABLE: "true"
      AUDIT_LOG_ENCRYPTION: "true"
      AUDIT_LOG_DIGITAL_SIGNATURES: "true"
      AUDIT_RETENTION_YEARS: "7"
      # Security hardening
      SECURITY_LEVEL: "5"
      SECURITY_HEADERS_ENABLED: "true"
      RESOURCE_BOUNDS_VALIDATION: "true"
      ENTERPRISE_SECURITY_POLICIES: "true"
      ADVANCED_THREAT_DETECTION: "true"
      BEHAVIORAL_ANALYTICS: "true"
      ZERO_TRUST_ARCHITECTURE: "true"
      # Performance and reliability
      HIGH_AVAILABILITY_MODE: "true"
      LOAD_BALANCING_ENABLED: "true"
      CIRCUIT_BREAKER_ENABLED: "true"
      RATE_LIMITING_ADVANCED: "true"
      CACHING_STRATEGY: "enterprise"
      # Monitoring and observability
      METRICS_DETAILED: "true"
      TRACING_ENABLED: "true"
      PROFILING_ENABLED: "true"
      HEALTH_CHECK_COMPREHENSIVE: "true"
      # Enterprise integrations
      ENTERPRISE_SSO_ENABLED: "true"
      ENTERPRISE_LDAP_ENABLED: "true"
      ENTERPRISE_MFA_ENFORCED: "true"
      ENTERPRISE_RBAC_ENABLED: "true"
      # Backup and recovery
      BACKUP_ENABLED: "true"
      BACKUP_ENCRYPTION: "true"
      POINT_IN_TIME_RECOVERY: "true"
      DISASTER_RECOVERY_ENABLED: "true"
    volumes:
      - enterprise-audit-logs:/app/audit-logs:rw
      - enterprise-compliance-data:/app/compliance:rw
      - enterprise-backup-staging:/app/backup-staging:rw
    <<: *enterprise-security
    read_only: false
    tmpfs:
      - /app/tmp:rw,noexec,nosuid,size=500m
      - /app/cache:rw,noexec,nosuid,size=1g
    deploy:
      replicas: ${ENTERPRISE_BACKEND_REPLICAS:-3}
      resources: *enterprise-resources-large
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 120s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
        monitor: 60s
        order: stop-first
      restart_policy: *enterprise-restart-policy
      placement:
        constraints:
          - node.role == worker
          - node.labels.tier == enterprise
          - node.labels.security == high
    logging: *enterprise-logging
    secrets:
      - enterprise_audit_key
      - enterprise_encryption_key
      - sso_certificate
      - ldap_credentials
    labels:
      - "service.name=veridis-backend-enterprise"
      - "service.tier=core"
      - "compliance.soc2=enabled"
      - "compliance.gdpr=enabled"
      - "security.level=enterprise"
      - "monitoring.priority=critical"

  # ZK Circuits Service - Enterprise Mode
  zk-circuits:
    environment:
      # Enterprise ZK configuration
      GARAGA_OPTIMIZATION_LEVEL: "3"
      GARAGA_CUDA_ENABLED: ${ENTERPRISE_GPU_ENABLED:-true}
      GARAGA_ENTERPRISE_MODE: "true"
      GARAGA_FORMAL_VERIFICATION: "true"
      GARAGA_AUDIT_PROOFS: "true"
      # Zero-knowledge security
      ZK_PROOF_SECURITY_LEVEL: "256"
      ZK_PROOF_VERIFICATION_THRESHOLD: "100"
      ZK_FORMAL_VERIFICATION_ENABLED: "true"
      ZK_TRUSTED_SETUP_VERIFICATION: "true"
      ZK_PROOF_INTEGRITY_CHECKS: "true"
      ZK_CIRCUIT_AUDIT_ENABLED: "true"
      # Performance optimization
      ZK_PARALLEL_PROVING: "true"
      ZK_GPU_ACCELERATION: ${ENTERPRISE_GPU_ENABLED:-true}
      ZK_MEMORY_OPTIMIZATION: "true"
      ZK_BATCH_PROCESSING: "true"
      # Enterprise features
      ZK_ENTERPRISE_MONITORING: "true"
      ZK_PROOF_CACHING_ENTERPRISE: "true"
      ZK_AUDIT_TRAIL: "true"
      ZK_COMPLIANCE_MODE: "true"
    volumes:
      - zk-enterprise-audit:/app/audit-logs:rw
      - zk-enterprise-proofs:/app/proofs:rw
      - zk-formal-verification:/app/verification:rw
    <<: *enterprise-security
    read_only: false
    tmpfs:
      - /app/tmp:rw,noexec,nosuid,size=4g
    runtime: ${ZK_RUNTIME:-nvidia}
    device_requests:
      - driver: nvidia
        count: ${ENTERPRISE_GPU_COUNT:-2}
        capabilities: [gpu]
    deploy:
      replicas: ${ENTERPRISE_ZK_REPLICAS:-2}
      resources:
        limits:
          memory: ${ZK_MEMORY_LIMIT:-16G}
          cpus: "${ZK_CPU_LIMIT:-8.0}"
          pids: 1000
        reservations:
          memory: ${ZK_MEMORY_RESERVATION:-8G}
          cpus: "${ZK_CPU_RESERVATION:-4.0}"
          generic_resources:
            - discrete_resource_spec:
                kind: "nvidia.com/gpu"
                value: ${ENTERPRISE_GPU_COUNT:-2}
      placement:
        constraints:
          - node.role == worker
          - node.labels.gpu == enterprise
          - node.labels.zk == true
          - node.labels.security == high
      restart_policy: *enterprise-restart-policy
    logging: *enterprise-logging
    secrets:
      - zk_enterprise_keys
      - formal_verification_certificates
    labels:
      - "service.name=zk-circuits-enterprise"
      - "service.tier=computation"
      - "computation.type=zk-proof"
      - "security.level=enterprise"
      - "gpu.enabled=true"

  # UI Service - Enterprise Mode
  veridis-ui:
    environment:
      # Enterprise UI features
      NEXT_PUBLIC_ENTERPRISE_MODE: "true"
      NEXT_PUBLIC_SSO_ENABLED: "true"
      NEXT_PUBLIC_MFA_REQUIRED: "true"
      NEXT_PUBLIC_AUDIT_TRAIL_UI: "true"
      NEXT_PUBLIC_COMPLIANCE_DASHBOARD: "true"
      NEXT_PUBLIC_ENTERPRISE_BRANDING: "true"
      NEXT_PUBLIC_ADVANCED_ANALYTICS: "true"
      # Security hardening
      NEXT_PUBLIC_CSP_ENTERPRISE: "true"
      NEXT_PUBLIC_SECURITY_HEADERS: "true"
      NEXT_PUBLIC_XSS_PROTECTION: "strict"
      NEXT_PUBLIC_CONTENT_TYPE_NOSNIFF: "true"
      NEXT_PUBLIC_REFERRER_POLICY: "strict-origin-when-cross-origin"
      # Performance
      NEXT_PUBLIC_CDN_ENABLED: "true"
      NEXT_PUBLIC_CACHING_STRATEGY: "enterprise"
      NEXT_PUBLIC_PERFORMANCE_MONITORING: "true"
    volumes:
      - ui-enterprise-logs:/app/logs:rw
      - ui-audit-trail:/app/audit:rw
    <<: *enterprise-security
    read_only: false
    tmpfs:
      - /app/tmp:rw,noexec,nosuid,size=200m
    deploy:
      replicas: ${ENTERPRISE_UI_REPLICAS:-3}
      resources: *enterprise-resources-medium
      update_config:
        parallelism: 1
        delay: 20s
        failure_action: rollback
        monitor: 60s
      restart_policy: *enterprise-restart-policy
      placement:
        constraints:
          - node.role == worker
          - node.labels.tier == enterprise
    logging: *enterprise-logging
    labels:
      - "service.name=veridis-ui-enterprise"
      - "service.tier=frontend"
      - "security.level=enterprise"

  # ==============================================================================
  # Enterprise Monitoring and Observability Stack
  # ==============================================================================

  # Prometheus - Enterprise Monitoring
  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: ${COMPOSE_PROJECT_NAME:-veridis}-prometheus-enterprise
    hostname: prometheus.veridis.internal
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - veridis-monitoring-network
    volumes:
      - ./monitoring/enterprise/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/enterprise/alerts.yml:/etc/prometheus/alerts.yml:ro
      - ./monitoring/enterprise/recording-rules.yml:/etc/prometheus/recording-rules.yml:ro
      - prometheus-enterprise-data:/prometheus
      - prometheus-enterprise-config:/etc/prometheus/config
    environment:
      PROMETHEUS_RETENTION_TIME: ${PROMETHEUS_RETENTION:-90d}
      PROMETHEUS_RETENTION_SIZE: ${PROMETHEUS_RETENTION_SIZE:-50GB}
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-90d}"
      - "--storage.tsdb.retention.size=${PROMETHEUS_RETENTION_SIZE:-50GB}"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
      - "--web.route-prefix=/"
      - "--web.external-url=https://prometheus.${DOMAIN:-veridis.local}"
      - "--storage.tsdb.wal-compression"
      - "--query.max-concurrency=50"
      - "--query.timeout=30s"
    <<: *enterprise-security
    read_only: false
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=1g
    user: "nobody:nobody"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      <<: *enterprise-healthcheck
    deploy:
      replicas: ${PROMETHEUS_REPLICAS:-2}
      resources: *enterprise-resources-large
      placement:
        constraints:
          - node.role == worker
          - node.labels.monitoring == prometheus
      restart_policy: *enterprise-restart-policy
    logging: *enterprise-logging
    secrets:
      - prometheus_config
      - monitoring_certificates
    labels:
      - "service.name=prometheus-enterprise"
      - "service.type=monitoring"
      - "monitoring.role=metrics"
      - "security.level=enterprise"

  # Grafana - Enterprise Dashboards
  grafana:
    image: grafana/grafana-enterprise:10.4.2
    container_name: ${COMPOSE_PROJECT_NAME:-veridis}-grafana-enterprise
    hostname: grafana.veridis.internal
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - veridis-monitoring-network
    volumes:
      - grafana-enterprise-data:/var/lib/grafana
      - grafana-enterprise-logs:/var/log/grafana
      - ./monitoring/enterprise/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
      - ./monitoring/enterprise/grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./monitoring/enterprise/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/enterprise/plugins:/var/lib/grafana/plugins:ro
    environment:
      # Basic configuration
      GF_SERVER_DOMAIN: grafana.${DOMAIN:-veridis.local}
      GF_SERVER_ROOT_URL: https://grafana.${DOMAIN:-veridis.local}
      GF_SERVER_SERVE_FROM_SUB_PATH: "false"
      # Security configuration
      GF_SECURITY_ADMIN_USER__FILE: /run/secrets/grafana_admin_user
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_admin_password
      GF_SECURITY_SECRET_KEY__FILE: /run/secrets/grafana_secret_key
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "true"
      GF_SECURITY_X_CONTENT_TYPE_OPTIONS: "true"
      GF_SECURITY_X_XSS_PROTECTION: "true"
      # Enterprise features
      GF_ENTERPRISE_LICENSE_PATH: /run/secrets/grafana_enterprise_license
      GF_FEATURE_TOGGLES_ENABLE: "publicDashboards,topnav,panelTitleSearch"
      # Authentication
      GF_AUTH_DISABLE_LOGIN_FORM: "false"
      GF_AUTH_DISABLE_SIGNOUT_MENU: "false"
      GF_AUTH_OAUTH_AUTO_LOGIN: "true"
      # LDAP integration
      GF_AUTH_LDAP_ENABLED: ${ENTERPRISE_LDAP_ENABLED:-true}
      GF_AUTH_LDAP_CONFIG_FILE: /etc/grafana/ldap.toml
      # Database
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres.veridis.internal:5432
      GF_DATABASE_NAME: grafana_enterprise
      GF_DATABASE_USER__FILE: /run/secrets/grafana_db_user
      GF_DATABASE_PASSWORD__FILE: /run/secrets/grafana_db_password
      GF_DATABASE_SSL_MODE: require
      # Users and organizations
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_USERS_ALLOW_ORG_CREATE: "false"
      GF_USERS_AUTO_ASSIGN_ORG: "true"
      GF_USERS_AUTO_ASSIGN_ORG_ROLE: "Viewer"
      # Alerting
      GF_ALERTING_ENABLED: "true"
      GF_UNIFIED_ALERTING_ENABLED: "true"
      GF_ALERTING_EXECUTE_ALERTS: "true"
      # Plugins
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: "false"
      GF_INSTALL_PLUGINS: "grafana-piechart-panel,grafana-clock-panel,grafana-worldmap-panel,grafana-polystat-panel"
      # Logging
      GF_LOG_MODE: "console file"
      GF_LOG_LEVEL: "info"
      GF_LOG_FILTERS: "rendering:debug"
      # Performance
      GF_SERVER_ENABLE_GZIP: "true"
      GF_DATABASE_CONNECTION_MAX_OPEN: "300"
      GF_DATABASE_CONNECTION_MAX_IDLE: "2"
      GF_DATABASE_CONNECTION_MAX_LIFETIME: "14400"
    depends_on:
      - prometheus
      - postgres
    <<: *enterprise-security
    read_only: false
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=500m
    user: "472:472"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      <<: *enterprise-healthcheck
    deploy:
      replicas: ${GRAFANA_REPLICAS:-2}
      resources: *enterprise-resources-medium
      placement:
        constraints:
          - node.role == worker
          - node.labels.monitoring == grafana
      restart_policy: *enterprise-restart-policy
    logging: *enterprise-logging
    secrets:
      - grafana_admin_user
      - grafana_admin_password
      - grafana_secret_key
      - grafana_enterprise_license
      - grafana_db_user
      - grafana_db_password
    labels:
      - "service.name=grafana-enterprise"
      - "service.type=monitoring"
      - "monitoring.role=visualization"
      - "security.level=enterprise"

  # AlertManager - Enterprise Alerting
  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: ${COMPOSE_PROJECT_NAME:-veridis}-alertmanager-enterprise
    hostname: alertmanager.veridis.internal
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    networks:
      - veridis-monitoring-network
    volumes:
      - ./monitoring/enterprise/alertmanager.yml:/etc/alertmanager/config.yml:ro
      - alertmanager-enterprise-data:/alertmanager
      - alertmanager-enterprise-templates:/etc/alertmanager/templates:ro
    environment:
      ALERTMANAGER_CLUSTER_LISTEN_ADDRESS: "0.0.0.0:9094"
      ALERTMANAGER_CLUSTER_PEER: ${ALERTMANAGER_CLUSTER_PEER:-}
      ALERTMANAGER_EXTERNAL_URL: https://alertmanager.${DOMAIN:-veridis.local}
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
      - "--web.external-url=https://alertmanager.${DOMAIN:-veridis.local}"
      - "--web.route-prefix=/"
      - "--cluster.listen-address=0.0.0.0:9094"
      - "--cluster.peer=${ALERTMANAGER_CLUSTER_PEER:-}"
      - "--log.level=info"
      - "--log.format=json"
    <<: *enterprise-security
    read_only: false
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
    user: "nobody:nobody"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9093/-/healthy",
        ]
      <<: *enterprise-healthcheck
    deploy:
      replicas: ${ALERTMANAGER_REPLICAS:-3}
      resources: *enterprise-resources-small
      placement:
        constraints:
          - node.role == worker
          - node.labels.monitoring == alertmanager
      restart_policy: *enterprise-restart-policy
    logging: *enterprise-logging
    secrets:
      - alertmanager_config
      - notification_webhooks
    labels:
      - "service.name=alertmanager-enterprise"
      - "service.type=monitoring"
      - "monitoring.role=alerting"
      - "security.level=enterprise"

  # ==============================================================================
  # Enterprise Security and Compliance Services
  # ==============================================================================

  # Security Scanner - Comprehensive Enterprise Security
  security-scanner:
    build:
      context: ./docker/security-scanner
      dockerfile: Dockerfile.enterprise
      args:
        SCANNER_VERSION: ${SECURITY_SCANNER_VERSION:-latest}
        COMPLIANCE_MODULES: "soc2,gdpr,iso27001,nist,pci"
    image: ${DOCKER_REGISTRY:-veridis}/security-scanner-enterprise:${VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME:-veridis}-security-scanner
    hostname: security-scanner.veridis.internal
    networks:
      - veridis-security-network
      - veridis-core-network
    volumes:
      - ./:/scan-target:ro
      - security-enterprise-reports:/reports:rw
      - security-enterprise-policies:/policies:ro
      - security-enterprise-baselines:/baselines:ro
      - security-enterprise-signatures:/signatures:ro
    environment:
      # Scanning configuration
      SCAN_SCHEDULE: ${SECURITY_SCAN_SCHEDULE:-0 2 * * *}
      SCAN_CONTINUOUS: ${SECURITY_SCAN_CONTINUOUS:-true}
      SCAN_REAL_TIME: ${SECURITY_SCAN_REAL_TIME:-true}
      # Compliance checks
      COMPLIANCE_CHECK: "true"
      SOC2_SCAN_ENABLED: "true"
      GDPR_SCAN_ENABLED: "true"
      ISO27001_SCAN_ENABLED: "true"
      NIST_SCAN_ENABLED: "true"
      PCI_SCAN_ENABLED: "true"
      HIPAA_SCAN_ENABLED: "true"
      # Technology versions
      CAIRO_VERSION: "2.11.4"
      STARKNET_VERSION: "0.13.4"
      RUST_VERSION: "1.87.0"
      NODE_VERSION: "22.14.0"
      # Security baselines
      SECURITY_BASELINE: /baselines/enterprise-baseline.json
      ENTERPRISE_SCAN_LEVEL: comprehensive
      VULNERABILITY_DATABASE: /signatures/enterprise-vuln-db.json
      # Threat detection
      THREAT_DETECTION_ENABLED: "true"
      BEHAVIORAL_ANALYSIS: "true"
      ANOMALY_DETECTION: "true"
      IOC_SCANNING: "true"
      MALWARE_DETECTION: "true"
      # Reporting
      REPORT_FORMAT: "json,pdf,html"
      REPORT_RETENTION_DAYS: "365"
      REPORT_ENCRYPTION: "true"
      ALERT_ON_CRITICAL: "true"
      SIEM_INTEGRATION: "true"
    depends_on:
      - veridis-backend
      - prometheus
      - alertmanager
    <<: *enterprise-security
    read_only: false
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=2g
      - /var/tmp:rw,noexec,nosuid,size=1g
    user: "scanner:scanner"
    deploy:
      replicas: ${SECURITY_SCANNER_REPLICAS:-2}
      resources: *enterprise-resources-large
      placement:
        constraints:
          - node.role == worker
          - node.labels.security == scanner
      restart_policy: *enterprise-restart-policy
    logging: *enterprise-logging
    secrets:
      - security_scanner_config
      - vulnerability_signatures
      - threat_intelligence_feeds
    labels:
      - "service.name=security-scanner-enterprise"
      - "service.type=security"
      - "security.role=scanner"
      - "compliance.enabled=true"

  # Compliance Service - Enterprise Compliance Management
  compliance-service:
    build:
      context: ./docker/compliance
      dockerfile: Dockerfile.enterprise
      args:
        COMPLIANCE_VERSION: ${COMPLIANCE_VERSION:-latest}
    image: ${DOCKER_REGISTRY:-veridis}/compliance-enterprise:${VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME:-veridis}-compliance
    hostname: compliance.veridis.internal
    networks:
      - veridis-compliance-network
      - veridis-core-network
    volumes:
      - compliance-enterprise-audit:/app/audit-logs:ro
      - compliance-enterprise-reports:/app/reports:rw
      - compliance-enterprise-policies:/app/policies:ro
      - compliance-enterprise-templates:/app/templates:ro
      - compliance-enterprise-evidence:/app/evidence:rw
    environment:
      # Enterprise features
      ENTERPRISE_FEATURES: "true"
      REAL_TIME_MONITORING: "true"
      IMMUTABLE_AUDIT_LOG: "true"
      BLOCKCHAIN_AUDIT_TRAIL: "true"
      # Compliance standards
      SOC2_COMPLIANCE: "true"
      GDPR_COMPLIANCE: "true"
      ISO27001_COMPLIANCE: "true"
      NIST_COMPLIANCE: "true"
      PCI_COMPLIANCE: "true"
      HIPAA_COMPLIANCE: "true"
      # Data protection
      CRYPTO_ERASURE_ROUNDS: "5"
      DATA_CLASSIFICATION: "true"
      DATA_LOSS_PREVENTION: "true"
      DATA_RETENTION_AUTOMATION: "true"
      # Privacy features
      PRIVACY_BY_DESIGN: "true"
      CONSENT_MANAGEMENT: "true"
      DATA_SUBJECT_RIGHTS_AUTOMATION: "true"
      RIGHT_TO_BE_FORGOTTEN: "true"
      RIGHT_TO_PORTABILITY: "true"
      RIGHT_TO_RECTIFICATION: "true"
      # Reporting and evidence
      COMPLIANCE_REPORTS_ENABLED: "true"
      EVIDENCE_COLLECTION: "true"
      AUDIT_EVIDENCE_CHAIN: "true"
      CONTINUOUS_COMPLIANCE: "true"
      # Integration
      SIEM_INTEGRATION: "true"
      GRC_INTEGRATION: "true"
      AUDIT_FIRM_API: "true"
    depends_on:
      - postgres
      - vault
      - security-scanner
    <<: *enterprise-security
    read_only: false
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=1g
    user: "compliance:compliance"
    deploy:
      replicas: ${COMPLIANCE_REPLICAS:-1}
      resources: *enterprise-resources-large
      placement:
        constraints:
          - node.role == worker
          - node.labels.compliance == true
          - node.labels.security == high
      restart_policy: *enterprise-restart-policy
    logging: *enterprise-logging
    secrets:
      - compliance_certificates
      - audit_signing_keys
      - privacy_encryption_keys
    labels:
      - "service.name=compliance-enterprise"
      - "service.type=compliance"
      - "compliance.role=management"
      - "security.level=enterprise"

  # ==============================================================================
  # Enterprise Backup and Disaster Recovery
  # ==============================================================================

  # Backup Service - Enterprise Backup and Recovery
  backup-service:
    build:
      context: ./docker/backup
      dockerfile: Dockerfile.enterprise
      args:
        BACKUP_VERSION: ${BACKUP_VERSION:-latest}
        ENCRYPTION_SUPPORT: "true"
        CLOUD_SUPPORT: "aws,azure,gcp"
    image: ${DOCKER_REGISTRY:-veridis}/backup-enterprise:${VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME:-veridis}-backup-enterprise
    hostname: backup.veridis.internal
    networks:
      - veridis-backup-network
      - veridis-core-network
    volumes:
      - postgres-enterprise-backup:/backups/postgres:rw
      - starknet-enterprise-backup:/backups/starknet:rw
      - keys-enterprise-backup:/backups/keys:rw
      - audit-enterprise-backup:/backups/audit:rw
      - compliance-enterprise-backup:/backups/compliance:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      # Backup schedule
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 1,13 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-2555} # 7 years
      BACKUP_RETENTION_WEEKLY: ${BACKUP_RETENTION_WEEKLY:-52}
      BACKUP_RETENTION_MONTHLY: ${BACKUP_RETENTION_MONTHLY:-84} # 7 years
      BACKUP_RETENTION_YEARLY: ${BACKUP_RETENTION_YEARLY:-7}
      # Encryption
      ENCRYPTION_ENABLED: "true"
      ENCRYPTION_ALGORITHM: "AES-256-GCM"
      ENCRYPTION_KEY_ROTATION: "true"
      ENCRYPTION_KEY_ROTATION_DAYS: "90"
      # Compression
      COMPRESSION_ENABLED: "true"
      COMPRESSION_ALGORITHM: "zstd"
      COMPRESSION_LEVEL: "3"
      # Verification
      BACKUP_VERIFICATION: "true"
      INTEGRITY_CHECKS: "true"
      RESTORE_TESTING: "true"
      # Cloud storage
      MULTI_CLOUD_BACKUP: "true"
      S3_BACKUP_ENABLED: ${S3_BACKUP_ENABLED:-true}
      AZURE_BACKUP_ENABLED: ${AZURE_BACKUP_ENABLED:-true}
      GCP_BACKUP_ENABLED: ${GCP_BACKUP_ENABLED:-false}
      # AWS S3 configuration
      S3_BUCKET: ${S3_BACKUP_BUCKET}
      S3_REGION: ${AWS_REGION:-us-east-1}
      S3_STORAGE_CLASS: ${S3_STORAGE_CLASS:-STANDARD_IA}
      S3_ENCRYPTION: "AES256"
      # Azure configuration
      AZURE_STORAGE_ACCOUNT: ${AZURE_STORAGE_ACCOUNT}
      AZURE_CONTAINER: ${AZURE_BACKUP_CONTAINER}
      AZURE_ENCRYPTION: "true"
      # Monitoring
      BACKUP_MONITORING: "true"
      BACKUP_ALERTS: "true"
      BACKUP_METRICS: "true"
      # Disaster recovery
      DISASTER_RECOVERY_ENABLED: "true"
      RTO_TARGET_MINUTES: ${RTO_TARGET:-60}
      RPO_TARGET_MINUTES: ${RPO_TARGET:-15}
      CROSS_REGION_REPLICATION: "true"
    depends_on:
      - postgres
      - vault
      - prometheus
    <<: *enterprise-security
    read_only: false
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=5g
    user: "backup:backup"
    deploy:
      replicas: ${BACKUP_REPLICAS:-1}
      resources: *enterprise-resources-large
      placement:
        constraints:
          - node.role == worker
          - node.labels.backup == true
          - node.labels.storage == high
      restart_policy: *enterprise-restart-policy
    logging: *enterprise-logging
    secrets:
      - backup_encryption_key
      - aws_backup_credentials
      - azure_backup_credentials
      - gcp_backup_credentials
    labels:
      - "service.name=backup-enterprise"
      - "service.type=backup"
      - "backup.role=enterprise"
      - "disaster-recovery.enabled=true"

# ==============================================================================
# Enterprise Network Configuration
# ==============================================================================
networks:
  veridis-monitoring-network:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-monitoring-network
    driver: ${NETWORK_DRIVER:-overlay}
    encrypted: true
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16
          gateway: 172.25.0.1
    labels:
      - "network.type=monitoring"
      - "security.level=enterprise"
      - "encryption=enabled"

  veridis-security-network:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-security-network
    driver: ${NETWORK_DRIVER:-overlay}
    encrypted: true
    ipam:
      driver: default
      config:
        - subnet: 172.26.0.0/16
          gateway: 172.26.0.1
    labels:
      - "network.type=security"
      - "security.level=enterprise"
      - "encryption=enabled"

  veridis-compliance-network:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-compliance-network
    driver: ${NETWORK_DRIVER:-overlay}
    encrypted: true
    ipam:
      driver: default
      config:
        - subnet: 172.27.0.0/16
          gateway: 172.27.0.1
    labels:
      - "network.type=compliance"
      - "security.level=enterprise"
      - "encryption=enabled"

  veridis-backup-network:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-backup-network
    driver: ${NETWORK_DRIVER:-overlay}
    encrypted: true
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
    labels:
      - "network.type=backup"
      - "security.level=enterprise"
      - "encryption=enabled"

# ==============================================================================
# Enterprise Volume Configuration
# ==============================================================================
volumes:
  # Application enterprise volumes
  enterprise-audit-logs:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-enterprise-audit-logs
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=audit"
      - "compliance.required=true"
      - "backup.enabled=true"
      - "encryption.enabled=true"
      - "retention.years=7"

  enterprise-compliance-data:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-enterprise-compliance-data
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=compliance"
      - "compliance.required=true"
      - "backup.enabled=true"
      - "encryption.enabled=true"

  enterprise-backup-staging:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-enterprise-backup-staging
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=backup-staging"
      - "backup.enabled=true"
      - "encryption.enabled=true"

  # ZK enterprise volumes
  zk-enterprise-audit:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-zk-enterprise-audit
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=audit"
      - "service=zk-circuits"
      - "compliance.required=true"
      - "backup.enabled=true"

  zk-enterprise-proofs:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-zk-enterprise-proofs
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=proofs"
      - "service=zk-circuits"
      - "backup.enabled=true"

  zk-formal-verification:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-zk-formal-verification
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=verification"
      - "service=zk-circuits"
      - "compliance.required=true"

  # UI enterprise volumes
  ui-enterprise-logs:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-ui-enterprise-logs
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=logs"
      - "service=ui"
      - "backup.enabled=true"

  ui-audit-trail:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-ui-audit-trail
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=audit"
      - "service=ui"
      - "compliance.required=true"

  # Monitoring volumes
  prometheus-enterprise-data:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-prometheus-enterprise-data
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=metrics"
      - "service=prometheus"
      - "backup.enabled=true"
      - "retention.days=90"

  prometheus-enterprise-config:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-prometheus-enterprise-config
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=config"
      - "service=prometheus"
      - "backup.enabled=true"

  grafana-enterprise-data:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-grafana-enterprise-data
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=dashboards"
      - "service=grafana"
      - "backup.enabled=true"

  grafana-enterprise-logs:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-grafana-enterprise-logs
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=logs"
      - "service=grafana"
      - "backup.enabled=true"

  alertmanager-enterprise-data:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-alertmanager-enterprise-data
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=alerts"
      - "service=alertmanager"
      - "backup.enabled=true"

  alertmanager-enterprise-templates:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-alertmanager-enterprise-templates
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=templates"
      - "service=alertmanager"
      - "backup.enabled=true"

  # Security volumes
  security-enterprise-reports:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-security-enterprise-reports
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=security-reports"
      - "service=security-scanner"
      - "compliance.required=true"
      - "backup.enabled=true"
      - "retention.years=7"

  security-enterprise-policies:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-security-enterprise-policies
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=policies"
      - "service=security-scanner"
      - "backup.enabled=true"

  security-enterprise-baselines:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-security-enterprise-baselines
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=baselines"
      - "service=security-scanner"
      - "backup.enabled=true"

  security-enterprise-signatures:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-security-enterprise-signatures
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=signatures"
      - "service=security-scanner"
      - "backup.enabled=true"

  # Compliance volumes
  compliance-enterprise-audit:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-compliance-enterprise-audit
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=compliance-audit"
      - "service=compliance"
      - "compliance.required=true"
      - "backup.enabled=true"
      - "retention.years=7"

  compliance-enterprise-reports:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-compliance-enterprise-reports
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=compliance-reports"
      - "service=compliance"
      - "compliance.required=true"
      - "backup.enabled=true"

  compliance-enterprise-policies:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-compliance-enterprise-policies
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=policies"
      - "service=compliance"
      - "backup.enabled=true"

  compliance-enterprise-templates:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-compliance-enterprise-templates
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=templates"
      - "service=compliance"
      - "backup.enabled=true"

  compliance-enterprise-evidence:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-compliance-enterprise-evidence
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=evidence"
      - "service=compliance"
      - "compliance.required=true"
      - "backup.enabled=true"
      - "retention.years=7"

  # Backup volumes
  postgres-enterprise-backup:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-postgres-enterprise-backup
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=backup"
      - "service=postgres"
      - "backup.source=database"
      - "encryption.enabled=true"

  starknet-enterprise-backup:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-starknet-enterprise-backup
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=backup"
      - "service=starknet"
      - "backup.source=blockchain"
      - "encryption.enabled=true"

  keys-enterprise-backup:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-keys-enterprise-backup
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=backup"
      - "backup.source=keys"
      - "encryption.enabled=true"
      - "security.level=critical"

  audit-enterprise-backup:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-audit-enterprise-backup
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=backup"
      - "backup.source=audit"
      - "compliance.required=true"
      - "encryption.enabled=true"

  compliance-enterprise-backup:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-compliance-enterprise-backup
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "volume.type=backup"
      - "backup.source=compliance"
      - "compliance.required=true"
      - "encryption.enabled=true"

# ==============================================================================
# Enterprise Secrets Configuration
# ==============================================================================
secrets:
  # Application secrets
  enterprise_audit_key:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-enterprise-audit-key

  enterprise_encryption_key:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-enterprise-encryption-key

  sso_certificate:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-sso-certificate

  ldap_credentials:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-ldap-credentials

  # ZK secrets
  zk_enterprise_keys:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-zk-enterprise-keys

  formal_verification_certificates:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-formal-verification-certs

  # Monitoring secrets
  prometheus_config:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-prometheus-config

  monitoring_certificates:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-monitoring-certificates

  grafana_admin_user:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-grafana-admin-user

  grafana_admin_password:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-grafana-admin-password

  grafana_secret_key:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-grafana-secret-key

  grafana_enterprise_license:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-grafana-enterprise-license

  grafana_db_user:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-grafana-db-user

  grafana_db_password:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-grafana-db-password

  alertmanager_config:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-alertmanager-config

  notification_webhooks:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-notification-webhooks

  # Security secrets
  security_scanner_config:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-security-scanner-config

  vulnerability_signatures:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-vulnerability-signatures

  threat_intelligence_feeds:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-threat-intelligence-feeds

  # Compliance secrets
  compliance_certificates:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-compliance-certificates

  audit_signing_keys:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-audit-signing-keys

  privacy_encryption_keys:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-privacy-encryption-keys

  # Backup secrets
  backup_encryption_key:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-backup-encryption-key

  aws_backup_credentials:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-aws-backup-credentials

  azure_backup_credentials:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-azure-backup-credentials

  gcp_backup_credentials:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-gcp-backup-credentials
# ==============================================================================
# Enterprise Environment Variables Reference
# ==============================================================================
# The following environment variables should be configured for enterprise deployment:
#
# # Replica Configuration
# ENTERPRISE_BACKEND_REPLICAS=3
# ENTERPRISE_ZK_REPLICAS=2
# ENTERPRISE_UI_REPLICAS=3
# PROMETHEUS_REPLICAS=2
# GRAFANA_REPLICAS=2
# ALERTMANAGER_REPLICAS=3
# SECURITY_SCANNER_REPLICAS=2
# COMPLIANCE_REPLICAS=1
# BACKUP_REPLICAS=1
#
# # GPU Configuration
# ENTERPRISE_GPU_ENABLED=true
# ENTERPRISE_GPU_COUNT=2
#
# # Monitoring Configuration
# PROMETHEUS_RETENTION=90d
# PROMETHEUS_RETENTION_SIZE=50GB
# GRAFANA_PORT=3001
# ALERTMANAGER_PORT=9093
#
# # Security Configuration
# SECURITY_SCAN_SCHEDULE="0 2 * * *"
# SECURITY_SCAN_CONTINUOUS=true
# SECURITY_SCAN_REAL_TIME=true
#
# # Backup Configuration
# BACKUP_SCHEDULE="0 1,13 * * *"
# BACKUP_RETENTION_DAYS=2555
# S3_BACKUP_ENABLED=true
# AZURE_BACKUP_ENABLED=true
# S3_BACKUP_BUCKET=veridis-enterprise-backups
# AZURE_STORAGE_ACCOUNT=veridisenterprisebackups
#
# # Cloud Provider Configuration
# AWS_REGION=us-east-1
# AZURE_BACKUP_CONTAINER=enterprise-backups
#
# # Disaster Recovery
# RTO_TARGET=60
# RPO_TARGET=15
#
# # Compliance
# ENTERPRISE_LDAP_ENABLED=true
#
# # Domain Configuration
# DOMAIN=veridis.enterprise.com
#
# ==============================================================================
