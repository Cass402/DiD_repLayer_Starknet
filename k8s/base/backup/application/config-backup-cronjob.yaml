# ==============================================================================
# Veridis Decentralized Identity Protocol - Application Configuration Backup CronJob
# ==============================================================================
#
# This manifest defines comprehensive Application Configuration Backup CronJob for the
# decentralized identity protocol, providing:
#
# ENTERPRISE VERIDIS APPLICATION CONFIG BACKUP ARCHITECTURE:
#   • Advanced Config Backup CronJob with intelligent backup automation and performance-based optimization
#   • Multi-tier Backup CronJob architecture with development, testing, staging, and production environments
#   • Comprehensive backup framework with CronJob policies, data optimization, Kubernetes integration
#   • Advanced lifecycle management with automated CronJob optimization, backup control, and data enhancement
#   • Enterprise-grade intelligence with comprehensive analytics and Application Config Backup performance insights
#
# VERIDIS APPLICATION CONFIG BACKUP OPTIMIZATION:
#   • High-performance CronJob with intelligent backup automation and Kubernetes config backup optimization
#   • Intelligent CronJob backup automation with responsive policies and performance-based backup decisions
#   • Advanced CronJob management with business intelligence and backup-based Kubernetes control
#   • Comprehensive config backup control with intelligent Kubernetes CronJob management and data enhancement
#   • Enterprise acceleration with predictive Kubernetes CronJob management and config backup optimization
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II Application Config Backup controls with comprehensive audit and backup requirements
#   • GDPR Application Config Backup compliance with data protection, privacy controls, and backup management
#   • ISO 27001 Application Config Backup management with comprehensive framework integration
#   • NIST 800-190 container Application Config Backup security with backup-specific validation and compliance
#   • Zero-knowledge protocol compliance with regulatory frameworks and Application Config Backup best practices
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent Application Config Backup lifecycle management with automated provisioning and backup optimization
#   • Predictive backup analytics with capacity planning and Application Config Backup intelligence
#   • Advanced CronJob integration with Kubernetes backup analytics and performance business intelligence
#   • Comprehensive config backup control with Application Config Backup preservation and data optimization
#   • Business continuity Application Config Backup with backup guarantees and performance optimization
#
# APPLICATION CONFIG BACKUP ACCELERATION INTELLIGENCE:
#   • Application Config Backup usage analytics with backup patterns and optimization recommendations
#   • CronJob monitoring with Kubernetes backup latency and management optimization intelligence
#   • Development efficiency with Application Config Backup analytics and deployment optimization procedures
#   • Cost optimization with Application Config Backup utilization analysis and backup capacity planning procedures
#   • Quality assurance with Application Config Backup metrics and backup validation procedures
#
# ==============================================================================

# ==============================================================================
# Veridis Production Application Configuration Backup CronJob - Comprehensive Config Backup
# ==============================================================================
apiVersion: batch/v1
kind: CronJob
metadata:
  name: veridis-config-backup-cronjob
  namespace: veridis

  # Core Veridis Application Config Backup identification labels
  labels:
    app.kubernetes.io/name: veridis-config-backup
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: config-backup-cronjob
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Application Config Backup specific classification
    backup.veridis.xyz/type: application-config-backup-cronjob
    backup.veridis.xyz/category: comprehensive-config-backup
    backup.veridis.xyz/role: primary-config-backup-cronjob
    backup.veridis.xyz/backup-class: high-performance-config-backup
    backup.veridis.xyz/security-level: enterprise

    # CronJob Application Config Backup classification
    cronjob.veridis.xyz/config-backup-type: intelligent-config-backup
    cronjob.veridis.xyz/backup-type: application-config-backup
    cronjob.veridis.xyz/performance-tier: high-throughput
    cronjob.veridis.xyz/optimization: enabled
    cronjob.veridis.xyz/features: full-config-backup-stack

    # Backup Application Config Backup classification
    backup.veridis.xyz/tier: production
    backup.veridis.xyz/optimization: intelligent-config-backup-management
    backup.veridis.xyz/data-management: advanced
    backup.veridis.xyz/performance-optimization: enabled
    backup.veridis.xyz/efficiency: maximum

    # Business Config Backup classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/impact: high-config-backup-performance
    business.veridis.xyz/cost-tier: production
    business.veridis.xyz/sla-tier: enterprise
    business.veridis.xyz/availability-requirement: 99.9

    # Operational Config Backup labels
    veridis.xyz/environment: production
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: backup-infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "config-backup-control-framework"
    compliance.veridis.xyz/gdpr: "config-backup-data-protection"
    compliance.veridis.xyz/iso27001: "config-backup-security-management"
    compliance.veridis.xyz/nist-800-190: "config-backup-container-security"
    governance.veridis.xyz/policy-enforcement: "enterprise"

    # Config Backup analytics and intelligence
    monitoring.veridis.xyz/config-backup-monitoring: "enabled"
    monitoring.veridis.xyz/performance-monitoring: "comprehensive"
    monitoring.veridis.xyz/backup-monitoring: "enabled"
    monitoring.veridis.xyz/business-monitoring: "enabled"
    monitoring.veridis.xyz/compliance-monitoring: "enabled"

    # Configuration backup specific labels
    config.veridis.xyz/backup-scope: "application-configs"
    config.veridis.xyz/backup-type: "kubernetes-native"
    config.veridis.xyz/encryption: "enabled"
    config.veridis.xyz/compression: "enabled"
    config.veridis.xyz/versioning: "enabled"
    config.veridis.xyz/retention: "90d"

    # Performance labels
    performance.veridis.xyz/backup-speed: "high"
    performance.veridis.xyz/compression-level: "optimal"
    performance.veridis.xyz/parallel-processing: "enabled"
    performance.veridis.xyz/optimization-enabled: "true"
    performance.veridis.xyz/deduplication: "enabled"

  annotations:
    # Config Backup purpose and specifications
    veridis.xyz/description: "Enterprise Veridis Application Config Backup CronJob with intelligent backup automation, advanced performance optimization, and comprehensive backup optimization"
    veridis.xyz/purpose: "Provides comprehensive Application Config Backup for decentralized identity management with intelligent backup automation, performance optimization, and backup guarantees"
    veridis.xyz/scope: "Application Config Backup including backup automation, performance optimization, cronjob configuration, and comprehensive monitoring intelligence"

    # Config Backup architecture and design
    backup.veridis.xyz/architecture: "Enterprise Application Config Backup CronJob with intelligent backup automation, advanced performance optimization, and cronjob integration optimization"
    backup.veridis.xyz/design-pattern: "Multi-tier Config Backup CronJob with performance optimization, cost efficiency, and business intelligence"
    backup.veridis.xyz/optimization-model: "Intelligent Config Backup CronJob with predictive analytics, performance optimization, and backup efficiency"
    backup.veridis.xyz/performance-model: "High-performance Config Backup CronJob with backup optimization and intelligent cronjob management"

    # CronJob Config Backup specifications
    cronjob.veridis.xyz/config-backup-specification: "Config Backup CronJob with performance optimization and intelligent config backup management"
    cronjob.veridis.xyz/backup-specification: "Advanced backup automation management with backup optimization and cronjob enhancement"
    cronjob.veridis.xyz/schedule-specification: "Config Backup CronJob schedule management optimization with intelligent backup and enhancement"
    cronjob.veridis.xyz/performance-specification: "Backup performance cronjob with backup acceleration and efficiency"
    cronjob.veridis.xyz/business-specification: "Backup business cronjob with cost optimization and strategic backup intelligence"

    # Backup schedule annotations
    backup.veridis.xyz/schedule-expression: "0 3 * * *"  # Daily at 3 AM
    backup.veridis.xyz/backup-scope: "configmaps,secrets,service-accounts,network-policies"
    backup.veridis.xyz/retention-period: "90d"
    backup.veridis.xyz/backup-format: "yaml"
    backup.veridis.xyz/compression-enabled: "true"

    # Performance annotations
    performance.veridis.xyz/job-timeout: "30m"
    performance.veridis.xyz/resource-limits: "cpu:500m,memory:1Gi"
    performance.veridis.xyz/parallel-jobs: "1"
    performance.veridis.xyz/concurrency-policy: "Forbid"
    performance.veridis.xyz/success-jobs-history: "3"

    # Security annotations
    security.veridis.xyz/encryption-enabled: "true"
    security.veridis.xyz/encryption-algorithm: "AES256"
    security.veridis.xyz/access-control: "enabled"
    security.veridis.xyz/backup-integrity: "enabled"
    security.veridis.xyz/data-classification: "confidential"

    # Monitoring annotations
    monitoring.veridis.xyz/backup-monitoring: "enabled"
    monitoring.veridis.xyz/success-notification: "enabled"
    monitoring.veridis.xyz/failure-notification: "enabled"
    monitoring.veridis.xyz/metrics-collection: "enabled"
    monitoring.veridis.xyz/alerts-enabled: "true"

    # Compliance annotations
    compliance.veridis.xyz/data-retention: "90d"
    compliance.veridis.xyz/audit-logging: "enabled"
    compliance.veridis.xyz/compliance-validation: "enabled"
    compliance.veridis.xyz/regulatory-compliance: "gdpr,soc2,iso27001"
    compliance.veridis.xyz/backup-policy: "production-config-backup-policy-v1"

    # Business annotations
    business.veridis.xyz/cost-center: "backup-infrastructure"
    business.veridis.xyz/budget-allocation: "config-backup"
    business.veridis.xyz/cost-optimization: "enabled"
    business.veridis.xyz/usage-tracking: "comprehensive"
    business.veridis.xyz/backup-tier: "production"

    # Documentation and procedures
    veridis.xyz/owner: "platform-team@veridis.xyz"
    veridis.xyz/config-backup-admin: "backup-admin@veridis.xyz"
    veridis.xyz/escalation: "platform-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "platform-oncall@veridis.xyz"

    # Documentation references
    veridis.xyz/documentation: "https://docs.veridis.xyz/backup/config-backup"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/backup/config-backup-management"
    veridis.xyz/backup-docs: "https://backup.veridis.xyz/config-backup-guide"
    veridis.xyz/monitoring-docs: "https://backup.veridis.xyz/config-backup-monitoring"

# ==============================================================================
# Application Config Backup CronJob Specification
# ==============================================================================
spec:
  # ==============================================================================
  # Schedule Configuration
  # ==============================================================================
  schedule: "0 3 * * *"  # Daily at 3 AM UTC

  # ==============================================================================
  # Timezone Configuration
  # ==============================================================================
  timeZone: "UTC"

  # ==============================================================================
  # Concurrency Policy
  # ==============================================================================
  concurrencyPolicy: Forbid

  # ==============================================================================
  # History Management
  # ==============================================================================
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 5

  # ==============================================================================
  # Starting Deadline
  # ==============================================================================
  startingDeadlineSeconds: 300  # 5 minutes

  # ==============================================================================
  # Suspend Configuration
  # ==============================================================================
  suspend: false

  # ==============================================================================
  # Job Template Configuration
  # ==============================================================================
  jobTemplate:
    # ==============================================================================
    # Job Metadata
    # ==============================================================================
    metadata:
      labels:
        backup.veridis.xyz/job-type: "config-backup"
        backup.veridis.xyz/schedule-name: "veridis-config-backup-cronjob"
        backup.veridis.xyz/backup-scope: "application-configs"
        veridis.xyz/component: "config-backup-job"
        veridis.xyz/managed-by: "cronjob"

      annotations:
        backup.veridis.xyz/created-by: "config-backup-cronjob"
        backup.veridis.xyz/backup-type: "application-configuration"
        backup.veridis.xyz/retention-policy: "90d"
        backup.veridis.xyz/encryption-enabled: "true"

    # ==============================================================================
    # Job Specification
    # ==============================================================================
    spec:
      # ==============================================================================
      # Job Completion and Parallelism
      # ==============================================================================
      completions: 1
      parallelism: 1

      # ==============================================================================
      # Job Timeout
      # ==============================================================================
      activeDeadlineSeconds: 1800  # 30 minutes

      # ==============================================================================
      # Backoff Policy
      # ==============================================================================
      backoffLimit: 3

      # ==============================================================================
      # Pod Template
      # ==============================================================================
      template:
        # ==============================================================================
        # Pod Metadata
        # ==============================================================================
        metadata:
          labels:
            backup.veridis.xyz/job-type: "config-backup"
            backup.veridis.xyz/pod-role: "backup-executor"
            veridis.xyz/component: "config-backup-pod"
            veridis.xyz/security-level: "high"

          annotations:
            backup.veridis.xyz/pod-purpose: "application-config-backup"
            backup.veridis.xyz/execution-context: "cronjob"
            security.veridis.xyz/security-context: "restricted"
            monitoring.veridis.xyz/metrics-enabled: "true"

        # ==============================================================================
        # Pod Specification
        # ==============================================================================
        spec:
          # ==============================================================================
          # Restart Policy
          # ==============================================================================
          restartPolicy: OnFailure

          # ==============================================================================
          # Service Account
          # ==============================================================================
          serviceAccountName: veridis-config-backup-sa

          # ==============================================================================
          # Security Context
          # ==============================================================================
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534  # nobody user
            runAsGroup: 65534
            fsGroup: 65534
            seccompProfile:
              type: RuntimeDefault
            supplementalGroups: [65534]

          # ==============================================================================
          # Node Selection and Affinity
          # ==============================================================================
          nodeSelector:
            kubernetes.io/arch: amd64
            node-role.kubernetes.io/worker: "true"
            backup.veridis.xyz/backup-node: "true"

          # ==============================================================================
          # Tolerations
          # ==============================================================================
          tolerations:
            - key: "backup-workload"
              operator: "Equal"
              value: "true"
              effect: "NoSchedule"
            - key: "node.kubernetes.io/not-ready"
              operator: "Exists"
              effect: "NoExecute"
              tolerationSeconds: 300
            - key: "node.kubernetes.io/unreachable"
              operator: "Exists"
              effect: "NoExecute"
              tolerationSeconds: 300

          # ==============================================================================
          # Affinity Configuration
          # ==============================================================================
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  preference:
                    matchExpressions:
                      - key: backup.veridis.xyz/optimized
                        operator: In
                        values: ["true"]
                - weight: 50
                  preference:
                    matchExpressions:
                      - key: node-type
                        operator: In
                        values: ["backup", "utility"]

            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                        - key: backup.veridis.xyz/job-type
                          operator: In
                          values: ["config-backup"]
                    topologyKey: kubernetes.io/hostname

          # ==============================================================================
          # Init Containers
          # ==============================================================================
          initContainers:
            # ==============================================================================
            # Backup Preparation Container
            # ==============================================================================
            - name: backup-prep
              image: veridis/backup-tools:v3.2.1
              imagePullPolicy: Always

              # Security context
              securityContext:
                runAsNonRoot: true
                runAsUser: 65534
                runAsGroup: 65534
                readOnlyRootFilesystem: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                seccompProfile:
                  type: RuntimeDefault

              # Resource limits
              resources:
                limits:
                  cpu: "200m"
                  memory: "256Mi"
                  ephemeral-storage: "1Gi"
                requests:
                  cpu: "100m"
                  memory: "128Mi"
                  ephemeral-storage: "512Mi"

              # Environment variables
              env:
                - name: BACKUP_TYPE
                  value: "config-backup"
                - name: BACKUP_SCOPE
                  value: "application-configs"
                - name: NAMESPACE
                  value: "veridis"
                - name: LOG_LEVEL
                  value: "info"
                - name: BACKUP_TIMESTAMP
                  value: "$(date +%Y%m%d_%H%M%S)"

              # Commands
              command:
                - /bin/bash
                - -c
                - |
                  set -euo pipefail

                  echo "Starting config backup preparation..."

                  # Create backup directory
                  mkdir -p /backup/configs

                  # Initialize backup metadata
                  cat > /backup/metadata.yaml << EOF
                  apiVersion: v1
                  kind: ConfigMap
                  metadata:
                    name: backup-metadata
                    namespace: veridis
                  data:
                    backup-type: "application-config"
                    backup-timestamp: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
                    backup-scope: "configmaps,secrets,service-accounts,network-policies"
                    backup-namespace: "veridis"
                    backup-version: "v3.2.1"
                    backup-tool: "kubectl"
                    retention-period: "90d"
                    encryption-enabled: "true"
                  EOF

                  # Validate kubectl access
                  kubectl version --client
                  kubectl auth can-i get configmaps -n veridis
                  kubectl auth can-i get secrets -n veridis

                  echo "Config backup preparation completed successfully"

              # Volume mounts
              volumeMounts:
                - name: backup-storage
                  mountPath: /backup
                - name: tmp-storage
                  mountPath: /tmp

          # ==============================================================================
          # Main Containers
          # ==============================================================================
          containers:
            # ==============================================================================
            # Config Backup Container
            # ==============================================================================
            - name: config-backup
              image: veridis/backup-tools:v3.2.1
              imagePullPolicy: Always

              # Security context
              securityContext:
                runAsNonRoot: true
                runAsUser: 65534
                runAsGroup: 65534
                readOnlyRootFilesystem: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                seccompProfile:
                  type: RuntimeDefault

              # Resource limits
              resources:
                limits:
                  cpu: "500m"
                  memory: "1Gi"
                  ephemeral-storage: "2Gi"
                requests:
                  cpu: "250m"
                  memory: "512Mi"
                  ephemeral-storage: "1Gi"

              # Environment variables
              env:
                - name: BACKUP_TYPE
                  value: "application-config"
                - name: BACKUP_NAMESPACE
                  value: "veridis"
                - name: BACKUP_TIMESTAMP
                  value: "$(date +%Y%m%d_%H%M%S)"
                - name: BACKUP_RETENTION_DAYS
                  value: "90"
                - name: ENCRYPTION_ENABLED
                  value: "true"
                - name: COMPRESSION_ENABLED
                  value: "true"
                - name: LOG_LEVEL
                  value: "info"
                - name: BACKUP_STORAGE_PATH
                  value: "/backup"
                - name: S3_BUCKET
                  value: "veridis-config-backups"
                - name: S3_PREFIX
                  value: "production/config-backups"
                - name: AWS_DEFAULT_REGION
                  value: "us-east-1"

                # Backup scope configuration
                - name: BACKUP_CONFIGMAPS
                  value: "true"
                - name: BACKUP_SECRETS
                  value: "true"
                - name: BACKUP_SERVICE_ACCOUNTS
                  value: "true"
                - name: BACKUP_NETWORK_POLICIES
                  value: "true"
                - name: BACKUP_RBAC
                  value: "true"
                - name: BACKUP_INGRESS
                  value: "true"
                - name: BACKUP_SERVICES
                  value: "true"

                # Notification configuration
                - name: SLACK_WEBHOOK_URL
                  valueFrom:
                    secretKeyRef:
                      name: veridis-notification-secrets
                      key: slack-webhook-url
                      optional: true

                # Encryption key
                - name: BACKUP_ENCRYPTION_KEY
                  valueFrom:
                    secretKeyRef:
                      name: veridis-backup-secrets
                      key: config-backup-encryption-key

              # Commands
              command:
                - /bin/bash
                - -c
                - |
                  set -euo pipefail

                  # Define functions
                  log_info() {
                    echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] INFO: $1"
                  }

                  log_error() {
                    echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] ERROR: $1" >&2
                  }

                  send_notification() {
                    local message="$1"
                    local status="$2"
                    local emoji="✅"

                    if [[ "$status" == "error" ]]; then
                      emoji="❌"
                    fi

                    if [[ -n "${SLACK_WEBHOOK_URL:-}" ]]; then
                      curl -X POST -H 'Content-type: application/json' \
                        --data "{\"text\":\"${emoji} Veridis Config Backup: ${message}\"}" \
                        "${SLACK_WEBHOOK_URL}" || true
                    fi
                  }

                  # Start backup process
                  log_info "Starting Veridis application configuration backup..."

                  # Create backup directory structure
                  BACKUP_DIR="/backup/configs/${BACKUP_TIMESTAMP}"
                  mkdir -p "${BACKUP_DIR}"

                  # Backup ConfigMaps
                  if [[ "${BACKUP_CONFIGMAPS}" == "true" ]]; then
                    log_info "Backing up ConfigMaps..."
                    kubectl get configmaps -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/configmaps.yaml"

                    # Individual ConfigMaps for granular restore
                    mkdir -p "${BACKUP_DIR}/configmaps"
                    for cm in $(kubectl get configmaps -n "${BACKUP_NAMESPACE}" -o jsonpath='{.items[*].metadata.name}'); do
                      kubectl get configmap "${cm}" -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/configmaps/${cm}.yaml"
                    done

                    log_info "ConfigMaps backup completed"
                  fi

                  # Backup Secrets (encrypted)
                  if [[ "${BACKUP_SECRETS}" == "true" ]]; then
                    log_info "Backing up Secrets..."
                    kubectl get secrets -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/secrets.yaml"

                    # Individual Secrets for granular restore
                    mkdir -p "${BACKUP_DIR}/secrets"
                    for secret in $(kubectl get secrets -n "${BACKUP_NAMESPACE}" -o jsonpath='{.items[*].metadata.name}'); do
                      kubectl get secret "${secret}" -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/secrets/${secret}.yaml"
                    done

                    log_info "Secrets backup completed"
                  fi

                  # Backup Service Accounts
                  if [[ "${BACKUP_SERVICE_ACCOUNTS}" == "true" ]]; then
                    log_info "Backing up Service Accounts..."
                    kubectl get serviceaccounts -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/serviceaccounts.yaml"

                    mkdir -p "${BACKUP_DIR}/serviceaccounts"
                    for sa in $(kubectl get serviceaccounts -n "${BACKUP_NAMESPACE}" -o jsonpath='{.items[*].metadata.name}'); do
                      kubectl get serviceaccount "${sa}" -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/serviceaccounts/${sa}.yaml"
                    done

                    log_info "Service Accounts backup completed"
                  fi

                  # Backup Network Policies
                  if [[ "${BACKUP_NETWORK_POLICIES}" == "true" ]]; then
                    log_info "Backing up Network Policies..."
                    kubectl get networkpolicies -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/networkpolicies.yaml" || true

                    mkdir -p "${BACKUP_DIR}/networkpolicies"
                    for np in $(kubectl get networkpolicies -n "${BACKUP_NAMESPACE}" -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo ""); do
                      if [[ -n "$np" ]]; then
                        kubectl get networkpolicy "${np}" -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/networkpolicies/${np}.yaml"
                      fi
                    done

                    log_info "Network Policies backup completed"
                  fi

                  # Backup RBAC (Roles and RoleBindings)
                  if [[ "${BACKUP_RBAC}" == "true" ]]; then
                    log_info "Backing up RBAC..."
                    kubectl get roles -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/roles.yaml" || true
                    kubectl get rolebindings -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/rolebindings.yaml" || true

                    mkdir -p "${BACKUP_DIR}/rbac"
                    for role in $(kubectl get roles -n "${BACKUP_NAMESPACE}" -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo ""); do
                      if [[ -n "$role" ]]; then
                        kubectl get role "${role}" -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/rbac/${role}-role.yaml"
                      fi
                    done

                    for rb in $(kubectl get rolebindings -n "${BACKUP_NAMESPACE}" -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo ""); do
                      if [[ -n "$rb" ]]; then
                        kubectl get rolebinding "${rb}" -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/rbac/${rb}-rolebinding.yaml"
                      fi
                    done

                    log_info "RBAC backup completed"
                  fi

                  # Backup Ingress resources
                  if [[ "${BACKUP_INGRESS}" == "true" ]]; then
                    log_info "Backing up Ingress resources..."
                    kubectl get ingresses -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/ingresses.yaml" || true

                    mkdir -p "${BACKUP_DIR}/ingresses"
                    for ing in $(kubectl get ingresses -n "${BACKUP_NAMESPACE}" -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo ""); do
                      if [[ -n "$ing" ]]; then
                        kubectl get ingress "${ing}" -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/ingresses/${ing}.yaml"
                      fi
                    done

                    log_info "Ingress backup completed"
                  fi

                  # Backup Services
                  if [[ "${BACKUP_SERVICES}" == "true" ]]; then
                    log_info "Backing up Services..."
                    kubectl get services -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/services.yaml"

                    mkdir -p "${BACKUP_DIR}/services"
                    for svc in $(kubectl get services -n "${BACKUP_NAMESPACE}" -o jsonpath='{.items[*].metadata.name}'); do
                      kubectl get service "${svc}" -n "${BACKUP_NAMESPACE}" -o yaml > "${BACKUP_DIR}/services/${svc}.yaml"
                    done

                    log_info "Services backup completed"
                  fi

                  # Create backup manifest
                  cat > "${BACKUP_DIR}/backup-manifest.yaml" << EOF
                  apiVersion: v1
                  kind: ConfigMap
                  metadata:
                    name: veridis-config-backup-manifest
                    namespace: veridis
                  data:
                    backup-timestamp: "${BACKUP_TIMESTAMP}"
                    backup-date: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
                    backup-type: "application-configuration"
                    backup-scope: "configmaps,secrets,service-accounts,network-policies,rbac,ingresses,services"
                    backup-namespace: "${BACKUP_NAMESPACE}"
                    backup-version: "v3.2.1"
                    backup-tool: "kubectl"
                    retention-period: "${BACKUP_RETENTION_DAYS}d"
                    encryption-enabled: "${ENCRYPTION_ENABLED}"
                    compression-enabled: "${COMPRESSION_ENABLED}"
                    backup-size: "$(du -sh ${BACKUP_DIR} | cut -f1)"
                    resource-counts: |
                      configmaps: $(kubectl get configmaps -n ${BACKUP_NAMESPACE} --no-headers | wc -l)
                      secrets: $(kubectl get secrets -n ${BACKUP_NAMESPACE} --no-headers | wc -l)
                      serviceaccounts: $(kubectl get serviceaccounts -n ${BACKUP_NAMESPACE} --no-headers | wc -l)
                      networkpolicies: $(kubectl get networkpolicies -n ${BACKUP_NAMESPACE} --no-headers 2>/dev/null | wc -l)
                      roles: $(kubectl get roles -n ${BACKUP_NAMESPACE} --no-headers 2>/dev/null | wc -l)
                      rolebindings: $(kubectl get rolebindings -n ${BACKUP_NAMESPACE} --no-headers 2>/dev/null | wc -l)
                      ingresses: $(kubectl get ingresses -n ${BACKUP_NAMESPACE} --no-headers 2>/dev/null | wc -l)
                      services: $(kubectl get services -n ${BACKUP_NAMESPACE} --no-headers | wc -l)
                  EOF

                  # Compress backup if enabled
                  if [[ "${COMPRESSION_ENABLED}" == "true" ]]; then
                    log_info "Compressing backup..."
                    cd /backup/configs
                    tar -czf "${BACKUP_TIMESTAMP}.tar.gz" "${BACKUP_TIMESTAMP}/"
                    rm -rf "${BACKUP_TIMESTAMP}/"
                    log_info "Backup compression completed"
                  fi

                  # Encrypt backup if enabled
                  if [[ "${ENCRYPTION_ENABLED}" == "true" && -n "${BACKUP_ENCRYPTION_KEY:-}" ]]; then
                    log_info "Encrypting backup..."
                    cd /backup/configs
                    if [[ "${COMPRESSION_ENABLED}" == "true" ]]; then
                      openssl enc -aes-256-cbc -salt -in "${BACKUP_TIMESTAMP}.tar.gz" -out "${BACKUP_TIMESTAMP}.tar.gz.enc" -k "${BACKUP_ENCRYPTION_KEY}"
                      rm -f "${BACKUP_TIMESTAMP}.tar.gz"
                    else
                      tar -cf "${BACKUP_TIMESTAMP}.tar" "${BACKUP_TIMESTAMP}/"
                      openssl enc -aes-256-cbc -salt -in "${BACKUP_TIMESTAMP}.tar" -out "${BACKUP_TIMESTAMP}.tar.enc" -k "${BACKUP_ENCRYPTION_KEY}"
                      rm -f "${BACKUP_TIMESTAMP}.tar"
                      rm -rf "${BACKUP_TIMESTAMP}/"
                    fi
                    log_info "Backup encryption completed"
                  fi

                  # Upload to S3 if configured
                  if [[ -n "${S3_BUCKET:-}" ]]; then
                    log_info "Uploading backup to S3..."

                    # Determine backup file
                    if [[ "${ENCRYPTION_ENABLED}" == "true" ]]; then
                      if [[ "${COMPRESSION_ENABLED}" == "true" ]]; then
                        BACKUP_FILE="${BACKUP_TIMESTAMP}.tar.gz.enc"
                      else
                        BACKUP_FILE="${BACKUP_TIMESTAMP}.tar.enc"
                      fi
                    else
                      if [[ "${COMPRESSION_ENABLED}" == "true" ]]; then
                        BACKUP_FILE="${BACKUP_TIMESTAMP}.tar.gz"
                      else
                        BACKUP_FILE="${BACKUP_TIMESTAMP}.tar"
                      fi
                    fi

                    # Upload to S3
                    aws s3 cp "/backup/configs/${BACKUP_FILE}" "s3://${S3_BUCKET}/${S3_PREFIX}/${BACKUP_FILE}" \
                      --metadata "backup-type=application-config,backup-timestamp=${BACKUP_TIMESTAMP},backup-namespace=${BACKUP_NAMESPACE}"

                    # Upload manifest
                    aws s3 cp "${BACKUP_DIR}/backup-manifest.yaml" "s3://${S3_BUCKET}/${S3_PREFIX}/manifests/${BACKUP_TIMESTAMP}-manifest.yaml" || true

                    log_info "S3 upload completed"
                  fi

                  # Cleanup old backups
                  log_info "Cleaning up old backups..."
                  find /backup/configs -name "*.tar*" -mtime +${BACKUP_RETENTION_DAYS} -delete || true

                  # Generate backup report
                  BACKUP_SIZE=$(du -sh /backup/configs | cut -f1)
                  BACKUP_COUNT=$(find /backup/configs -name "*.tar*" | wc -l)

                  cat > "/backup/backup-report.txt" << EOF
                  Veridis Application Configuration Backup Report
                  =============================================

                  Backup Timestamp: ${BACKUP_TIMESTAMP}
                  Backup Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)
                  Backup Type: Application Configuration
                  Backup Namespace: ${BACKUP_NAMESPACE}
                  Backup Size: ${BACKUP_SIZE}
                  Total Backups: ${BACKUP_COUNT}

                  Resources Backed Up:
                  - ConfigMaps: $(kubectl get configmaps -n ${BACKUP_NAMESPACE} --no-headers | wc -l)
                  - Secrets: $(kubectl get secrets -n ${BACKUP_NAMESPACE} --no-headers | wc -l)
                  - Service Accounts: $(kubectl get serviceaccounts -n ${BACKUP_NAMESPACE} --no-headers | wc -l)
                  - Network Policies: $(kubectl get networkpolicies -n ${BACKUP_NAMESPACE} --no-headers 2>/dev/null | wc -l)
                  - Roles: $(kubectl get roles -n ${BACKUP_NAMESPACE} --no-headers 2>/dev/null | wc -l)
                  - Role Bindings: $(kubectl get rolebindings -n ${BACKUP_NAMESPACE} --no-headers 2>/dev/null | wc -l)
                  - Ingresses: $(kubectl get ingresses -n ${BACKUP_NAMESPACE} --no-headers 2>/dev/null | wc -l)
                  - Services: $(kubectl get services -n ${BACKUP_NAMESPACE} --no-headers | wc -l)

                  Backup Configuration:
                  - Compression: ${COMPRESSION_ENABLED}
                  - Encryption: ${ENCRYPTION_ENABLED}
                  - Retention: ${BACKUP_RETENTION_DAYS} days
                  - S3 Upload: $([[ -n "${S3_BUCKET:-}" ]] && echo "Enabled" || echo "Disabled")

                  Backup Status: SUCCESS
                  EOF

                  log_info "Backup completed successfully"

                  # Send success notification
                  send_notification "Application configuration backup completed successfully. Size: ${BACKUP_SIZE}, Timestamp: ${BACKUP_TIMESTAMP}" "success"

                  # Display backup report
                  cat "/backup/backup-report.txt"

              # Liveness probe
              livenessProbe:
                exec:
                  command:
                    - /bin/bash
                    - -c
                    - "pgrep -f 'kubectl' > /dev/null || pgrep -f 'backup' > /dev/null || true"
                initialDelaySeconds: 30
                periodSeconds: 60
                timeoutSeconds: 10
                failureThreshold: 3

              # Volume mounts
              volumeMounts:
                - name: backup-storage
                  mountPath: /backup
                - name: tmp-storage
                  mountPath: /tmp
                - name: kubectl-cache
                  mountPath: /.kube

          # ==============================================================================
          # Volumes
          # ==============================================================================
          volumes:
            # Backup storage volume
            - name: backup-storage
              persistentVolumeClaim:
                claimName: veridis-config-backup-pvc

            # Temporary storage
            - name: tmp-storage
              emptyDir:
                sizeLimit: 1Gi

            # Kubectl cache
            - name: kubectl-cache
              emptyDir:
                sizeLimit: 256Mi

          # ==============================================================================
          # DNS Configuration
          # ==============================================================================
          dnsPolicy: ClusterFirst

          # ==============================================================================
          # Termination Grace Period
          # ==============================================================================
          terminationGracePeriodSeconds: 60

---
# ==============================================================================
# Veridis Config Backup Service Account
# ==============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: veridis-config-backup-sa
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis-config-backup
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: config-backup-service-account
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    backup.veridis.xyz/type: "config-backup-service-account"
    backup.veridis.xyz/role: "backup-executor"
    security.veridis.xyz/rbac: "enabled"

  annotations:
    veridis.xyz/description: "Service account for application configuration backup operations"
    veridis.xyz/purpose: "Provides necessary permissions for config backup CronJob"

automountServiceAccountToken: true

---
# ==============================================================================
# Veridis Config Backup Cluster Role
# ==============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: veridis-config-backup-role

  labels:
    app.kubernetes.io/name: veridis-config-backup
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: config-backup-cluster-role
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    backup.veridis.xyz/type: "config-backup-cluster-role"
    backup.veridis.xyz/permissions: "read-only"
    security.veridis.xyz/rbac: "enabled"

  annotations:
    veridis.xyz/description: "Cluster role for application configuration backup operations"
    veridis.xyz/purpose: "Provides read-only access to Kubernetes resources for backup"

rules:
  # ConfigMap permissions
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list"]

  # Secret permissions
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]

  # Service Account permissions
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["get", "list"]

  # Network Policy permissions
  - apiGroups: ["networking.k8s.io"]
    resources: ["networkpolicies"]
    verbs: ["get", "list"]

  # RBAC permissions
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["roles", "rolebindings"]
    verbs: ["get", "list"]

  # Ingress permissions
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list"]

  # Service permissions
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list"]

  # Namespace permissions
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]

  # Node permissions (for node information in backup)
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list"]

---
# ==============================================================================
# Veridis Config Backup Cluster Role Binding
# ==============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: veridis-config-backup-binding

  labels:
    app.kubernetes.io/name: veridis-config-backup
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: config-backup-cluster-role-binding
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    backup.veridis.xyz/type: "config-backup-cluster-role-binding"
    backup.veridis.xyz/permissions: "read-only"
    security.veridis.xyz/rbac: "enabled"

  annotations:
    veridis.xyz/description: "Cluster role binding for application configuration backup operations"
    veridis.xyz/purpose: "Binds backup service account to cluster role for resource access"

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: veridis-config-backup-role

subjects:
  - kind: ServiceAccount
    name: veridis-config-backup-sa
    namespace: veridis

---
# ==============================================================================
# Veridis Config Backup PVC
# ==============================================================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: veridis-config-backup-pvc
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis-config-backup
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: config-backup-storage
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    backup.veridis.xyz/type: "config-backup-storage"
    backup.veridis.xyz/purpose: "backup-storage"
    storage.veridis.xyz/type: "persistent-volume-claim"

  annotations:
    veridis.xyz/description: "Persistent storage for application configuration backups"
    veridis.xyz/purpose: "Provides persistent storage for backup operations"

spec:
  accessModes:
    - ReadWriteOnce

  resources:
    requests:
      storage: 50Gi

  storageClassName: fast-ssd

---
# ==============================================================================
# Veridis Config Backup Monitoring Service Monitor
# ==============================================================================
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: veridis-config-backup-monitor
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis-config-backup
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: config-backup-service-monitor
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    backup.veridis.xyz/type: "config-backup-service-monitor"
    backup.veridis.xyz/monitoring: "enabled"
    monitoring.veridis.xyz/target: "config-backup-cronjob"

  annotations:
    veridis.xyz/description: "Service monitor for application configuration backup metrics"
    veridis.xyz/purpose: "Monitors backup job performance and success rates"

spec:
  selector:
    matchLabels:
      backup.veridis.xyz/job-type: "config-backup"

  endpoints:
    - port: metrics
      interval: 30s
      scrapeTimeout: 10s
      path: /metrics

      metricRelabelings:
        - sourceLabels: [__name__]
          regex: 'veridis_config_backup_.*'
          targetLabel: component
          replacement: 'config-backup'

# ==============================================================================
# Veridis Application Config Backup CronJob Summary and Enterprise Architecture
# ==============================================================================
#
# COMPREHENSIVE VERIDIS APPLICATION CONFIG BACKUP STRATEGY:
# =========================================================
#
# VERIDIS APPLICATION CONFIG BACKUP ARCHITECTURE OVERVIEW:
# --------------------------------------------------------
# 1. Production Config Backup CronJob (veridis-config-backup-cronjob):
#    - Comprehensive enterprise-grade config backup with intelligent backup automation and advanced performance optimization for production environments
#    - Advanced backup configuration with comprehensive Kubernetes resource backup, encryption support, compression management, and comprehensive operational excellence
#    - Multi-tier backup architecture with daily scheduling, retention management, S3 integration, and comprehensive backup intelligence
#    - Enterprise backup policies with security enforcement, compliance controls, RBAC integration, and comprehensive disaster recovery procedures
#    - Performance optimization with intelligent resource selection, parallel processing, timeout management, and efficiency for maximum backup performance
#
# 2. Service Account and RBAC (veridis-config-backup-sa):
#    - Secure service account with minimal required permissions and comprehensive RBAC coordination
#    - Advanced RBAC configuration with read-only access, resource-specific permissions, security enforcement, and comprehensive security intelligence
#    - Flexible permission optimization with cluster-wide access, namespace filtering, and comprehensive security intelligence
#    - Security intelligence with access procedures, permission support, RBAC automation, and comprehensive security coordination
#    - Operational excellence with secure access, permission workflows, RBAC automation, and comprehensive security environment management
#
# 3. Persistent Storage (veridis-config-backup-pvc):
#    - Dedicated persistent storage for backup operations and comprehensive storage coordination
#    - Advanced storage configuration with SSD performance, size optimization, access mode management, and comprehensive storage intelligence
#    - Flexible storage optimization with backup workflow, capacity management, and comprehensive storage intelligence
#    - Storage intelligence with backup procedures, capacity support, storage automation, and comprehensive storage coordination
#    - Performance excellence with storage backup, capacity workflows, storage automation, and comprehensive storage environment management
#
# 4. Service Monitor (veridis-config-backup-monitor):
#    - Comprehensive monitoring for backup operations and comprehensive monitoring coordination
#    - Advanced monitoring configuration with Prometheus integration, metrics collection, alerting support, and comprehensive monitoring intelligence
#    - Flexible monitoring optimization with backup workflow, metrics management, and comprehensive monitoring intelligence
#    - Monitoring intelligence with backup procedures, metrics support, monitoring automation, and comprehensive monitoring coordination
#    - Observability excellence with monitoring backup, metrics workflows, monitoring automation, and comprehensive monitoring environment management
#
# ENTERPRISE APPLICATION CONFIG BACKUP FEATURES:
# ==============================================
# Advanced Backup Automation and Resource Management:
#   - Multi-tier backup architecture with ConfigMaps, Secrets, Service Accounts, and comprehensive resource configurations
#   - Intelligent backup automation with pre-backup preparation, resource selection, encryption management, and comprehensive backup decisions
#   - Backup discovery with Kubernetes optimization, resource management, backup policies, and comprehensive backup analytics
#   - Performance management with parallel processing, timeout optimization, compression support, and comprehensive performance intelligence
#   - Backup processing tuning with resource management, storage optimization, backup algorithms, and intelligent backup optimization
#
# Comprehensive Security and Encryption Integration:
#   - Multi-tier security with AES256 encryption, access controls, RBAC integration, and comprehensive security coordination
#   - Security optimization with encryption enforcement, key management, permission validation, and comprehensive security intelligence
#   - Access management with service accounts, cluster roles, resource policies, and comprehensive access coordination
#   - Business intelligence with security analytics, access correlation, backup optimization, and comprehensive strategic insights
#   - Security management with access policies, encryption optimization, security integration, and comprehensive security analytics
#
# Enterprise Storage and Lifecycle Management:
#   - Multi-tier storage with persistent volumes, S3 integration, retention policies, and comprehensive storage coordination
#   - Storage optimization with compression management, lifecycle automation, cleanup policies, and comprehensive storage intelligence
#   - Lifecycle management with retention enforcement, automated cleanup, storage optimization, and comprehensive lifecycle coordination
#   - Business intelligence with storage analytics, lifecycle correlation, backup optimization, and comprehensive strategic insights
#   - Storage management with lifecycle policies, storage optimization, capacity monitoring, and comprehensive storage analytics
#
# Advanced Monitoring and Notification Integration:
#   - Multi-tier monitoring with Prometheus metrics, Slack notifications, alerting support, and comprehensive monitoring coordination
#   - Monitoring optimization with metrics collection, notification management, alert correlation, and comprehensive monitoring intelligence
#   - Notification management with success alerts, failure notifications, status reporting, and comprehensive notification coordination
#   - Business intelligence with monitoring analytics, notification correlation, backup optimization, and comprehensive strategic insights
#   - Monitoring management with notification policies, monitoring optimization, alert integration, and comprehensive monitoring analytics
#
# OPERATIONAL EXCELLENCE:
# ======================
# Config Backup Lifecycle Management:
#   - Multi-CronJob deployment with production backup, development backup, staging backup, and comprehensive cronjob coordination
#   - Intelligent cronjob management with predictive analytics and backup utilization correlation
#   - Advanced monitoring with comprehensive cronjob analytics and backup business intelligence
#   - CronJob validation with backup schema enforcement and cronjob deployment safety checks
#   - Automated optimization with cronjob pattern analysis and backup optimization recommendation engine
#
# Security Integration and Compliance:
#   - SOC 2 Type II backup controls with comprehensive audit requirements and backup logging
#   - GDPR backup compliance with data protection and privacy-preserving backup management
#   - ISO 27001 backup security management with information security and backup compliance integration
#   - NIST 800-190 container backup security with backup validation and compliance
#   - Zero-trust backup architecture with comprehensive encryption and backup authentication requirements
#
# Business Intelligence Integration:
#   - Backup analytics with cost correlation and cronjob resource utilization optimization
#   - Performance analytics with backup experience optimization and cronjob business intelligence
#   - Backup intelligence with processing pattern monitoring and cronjob optimization recommendations
#   - Strategic planning with capacity management and cronjob forecasting
#   - Business impact assessment with cronjob performance correlation and backup tracking
#
# Developer Experience Excellence:
#   - Multi-environment cronjob support with production backup, development backup, staging backup, and comprehensive cronjob coordination
#   - Comprehensive documentation with cronjob guides and backup troubleshooting procedures
#   - Environment-specific cronjobs with production, development, staging, and testing support
#   - Testing integration with cronjob development workflow and backup debugging capabilities
#   - CronJob monitoring with comprehensive tracking and backup correlation
#
# ==============================================================================
