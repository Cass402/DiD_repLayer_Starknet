# ==============================================================================
# Veridis Decentralized Identity Protocol - Elasticsearch StatefulSet Configuration
# ==============================================================================
#
# This manifest defines comprehensive Elasticsearch StatefulSet for the
# decentralized identity protocol, providing:
#
# ENTERPRISE VERIDIS ELASTICSEARCH STATEFULSET ARCHITECTURE:
#   • Advanced Elasticsearch StatefulSet with intelligent log storage and performance-based optimization
#   • Multi-tier StatefulSet architecture with development, testing, staging, and production environments
#   • Comprehensive observability framework with StatefulSet policies, log optimization, Elasticsearch integration
#   • Advanced lifecycle management with automated StatefulSet optimization, Elasticsearch control, and log enhancement
#   • Enterprise-grade intelligence with comprehensive analytics and Elasticsearch StatefulSet performance insights
#
# VERIDIS ELASTICSEARCH STATEFULSET OPTIMIZATION:
#   • High-performance StatefulSet with intelligent log storage and Elasticsearch statefulset optimization
#   • Intelligent StatefulSet log storage with responsive policies and performance-based log decisions
#   • Advanced StatefulSet management with business intelligence and log-based Elasticsearch control
#   • Comprehensive observability control with intelligent Elasticsearch StatefulSet management and log enhancement
#   • Enterprise acceleration with predictive Elasticsearch StatefulSet management and log optimization
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II Elasticsearch StatefulSet controls with comprehensive audit and log requirements
#   • GDPR Elasticsearch StatefulSet compliance with data protection, privacy controls, and log management
#   • ISO 27001 Elasticsearch StatefulSet management with comprehensive framework integration
#   • NIST 800-190 container Elasticsearch StatefulSet security with log-specific validation and compliance
#   • Zero-knowledge protocol compliance with regulatory frameworks and Elasticsearch StatefulSet best practices
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent Elasticsearch StatefulSet lifecycle management with automated provisioning and log optimization
#   • Predictive log analytics with capacity planning and Elasticsearch StatefulSet intelligence
#   • Advanced StatefulSet integration with Elasticsearch log analytics and performance business intelligence
#   • Comprehensive observability control with Elasticsearch StatefulSet preservation and log optimization
#   • Business continuity Elasticsearch StatefulSet with log guarantees and performance optimization
#
# ELASTICSEARCH STATEFULSET ACCELERATION INTELLIGENCE:
#   • Elasticsearch StatefulSet usage analytics with log patterns and optimization recommendations
#   • StatefulSet monitoring with Elasticsearch log latency and management optimization intelligence
#   • Development efficiency with Elasticsearch StatefulSet analytics and deployment optimization procedures
#   • Cost optimization with Elasticsearch StatefulSet utilization analysis and log capacity planning procedures
#   • Quality assurance with Elasticsearch StatefulSet metrics and observability validation procedures
#
# ==============================================================================

# ==============================================================================
# Veridis Elasticsearch StatefulSet - Primary Log Storage Configuration
# ==============================================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: veridis-elasticsearch
  namespace: veridis-infrastructure

  # Core Veridis Elasticsearch StatefulSet identification labels
  labels:
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "8.15.0"
    app.kubernetes.io/component: elasticsearch-statefulset
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Elasticsearch StatefulSet specific classification
    elasticsearch.veridis.xyz/type: log-elasticsearch-statefulset
    elasticsearch.veridis.xyz/category: observability-statefulset
    elasticsearch.veridis.xyz/role: primary-elasticsearch-statefulset
    elasticsearch.veridis.xyz/statefulset-class: high-performance-elasticsearch-statefulset
    elasticsearch.veridis.xyz/security-level: enterprise

    # StatefulSet Elasticsearch StatefulSet classification
    statefulset.veridis.xyz/elasticsearch-statefulset-type: intelligent-elasticsearch-statefulset
    statefulset.veridis.xyz/statefulset-type: log-statefulset
    statefulset.veridis.xyz/performance-tier: high-throughput
    statefulset.veridis.xyz/optimization: enabled
    statefulset.veridis.xyz/features: full-elasticsearch-statefulset-stack

    # Observability Elasticsearch StatefulSet classification
    observability.veridis.xyz/tier: production
    observability.veridis.xyz/optimization: intelligent-elasticsearch-statefulset-management
    observability.veridis.xyz/log-management: advanced
    observability.veridis.xyz/performance-optimization: enabled
    observability.veridis.xyz/efficiency: maximum

    # Business Elasticsearch StatefulSet classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/impact: high-elasticsearch-statefulset-performance
    business.veridis.xyz/cost-tier: production
    business.veridis.xyz/sla-tier: enterprise
    business.veridis.xyz/availability-requirement: 99.9

    # Operational Elasticsearch StatefulSet labels
    veridis.xyz/environment: production
    veridis.xyz/team: observability-engineering
    veridis.xyz/cost-center: observability-infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "elasticsearch-statefulset-control-framework"
    compliance.veridis.xyz/gdpr: "elasticsearch-statefulset-data-protection"
    compliance.veridis.xyz/iso27001: "elasticsearch-statefulset-security-management"
    compliance.veridis.xyz/nist-800-190: "elasticsearch-statefulset-container-security"
    governance.veridis.xyz/policy-enforcement: "enterprise"

    # Elasticsearch StatefulSet analytics and intelligence
    monitoring.veridis.xyz/elasticsearch-statefulset-monitoring: "enabled"
    monitoring.veridis.xyz/performance-monitoring: "comprehensive"
    monitoring.veridis.xyz/log-monitoring: "enabled"
    monitoring.veridis.xyz/business-monitoring: "enabled"
    monitoring.veridis.xyz/compliance-monitoring: "enabled"

    # Storage labels
    storage.veridis.xyz/type: "persistent"
    storage.veridis.xyz/class: "ssd"
    storage.veridis.xyz/replication: "enabled"
    storage.veridis.xyz/backup: "enabled"
    storage.veridis.xyz/encryption: "enabled"

    # Clustering labels
    cluster.veridis.xyz/type: "elasticsearch"
    cluster.veridis.xyz/role: "master-data-ingest"
    cluster.veridis.xyz/discovery: "zen"
    cluster.veridis.xyz/nodes: "3"
    cluster.veridis.xyz/shards: "auto"

    # Performance labels
    performance.veridis.xyz/throughput-tier: "high"
    performance.veridis.xyz/latency-tier: "low"
    performance.veridis.xyz/concurrency-tier: "high"
    performance.veridis.xyz/optimization-enabled: "true"
    performance.veridis.xyz/caching-enabled: "true"

  annotations:
    # Elasticsearch StatefulSet purpose and specifications
    veridis.xyz/description: "Enterprise Veridis Elasticsearch StatefulSet with intelligent log storage, advanced performance optimization, and comprehensive observability optimization"
    veridis.xyz/purpose: "Provides comprehensive Elasticsearch StatefulSet for decentralized identity management with intelligent log storage, performance optimization, and observability guarantees"
    veridis.xyz/scope: "Elasticsearch StatefulSet including log storage, performance optimization, clustering configuration, and comprehensive monitoring intelligence"

    # Elasticsearch StatefulSet architecture and design
    elasticsearch.veridis.xyz/architecture: "Enterprise Elasticsearch StatefulSet with intelligent log storage, advanced performance optimization, and clustering integration optimization"
    elasticsearch.veridis.xyz/design-pattern: "Multi-tier Elasticsearch StatefulSet with performance optimization, cost efficiency, and business intelligence"
    elasticsearch.veridis.xyz/optimization-model: "Intelligent Elasticsearch StatefulSet with predictive analytics, performance optimization, and log efficiency"
    elasticsearch.veridis.xyz/performance-model: "High-performance Elasticsearch StatefulSet with log optimization and intelligent clustering management"

    # StatefulSet Elasticsearch StatefulSet specifications
    statefulset.veridis.xyz/elasticsearch-statefulset-specification: "Elasticsearch StatefulSet with performance optimization and intelligent elasticsearch statefulset management"
    statefulset.veridis.xyz/log-specification: "Advanced log storage management with elasticsearch optimization and statefulset enhancement"
    statefulset.veridis.xyz/clustering-specification: "Elasticsearch StatefulSet clustering management optimization with intelligent log and enhancement"
    statefulset.veridis.xyz/performance-specification: "Elasticsearch performance statefulset with log acceleration and efficiency"
    statefulset.veridis.xyz/business-specification: "Elasticsearch business statefulset with cost optimization and strategic log intelligence"

    # Elasticsearch specific annotations
    elasticsearch.veridis.xyz/cluster-name: "veridis-logging-cluster"
    elasticsearch.veridis.xyz/node-roles: "master,data,ingest"
    elasticsearch.veridis.xyz/discovery-seed-hosts: "veridis-elasticsearch-0.veridis-elasticsearch-headless.veridis-infrastructure.svc.cluster.local:9300"
    elasticsearch.veridis.xyz/initial-master-nodes: "veridis-elasticsearch-0,veridis-elasticsearch-1,veridis-elasticsearch-2"
    elasticsearch.veridis.xyz/minimum-master-nodes: "2"

    # Storage annotations
    storage.veridis.xyz/volume-size: "100Gi"
    storage.veridis.xyz/storage-class: "fast-ssd"
    storage.veridis.xyz/volume-mode: "Filesystem"
    storage.veridis.xyz/access-mode: "ReadWriteOnce"
    storage.veridis.xyz/retention-policy: "30d"

    # Performance annotations
    performance.veridis.xyz/expected-throughput: "10000-docs-per-second"
    performance.veridis.xyz/heap-size: "2g"
    performance.veridis.xyz/memory-lock: "enabled"
    performance.veridis.xyz/thread-pools: "optimized"
    performance.veridis.xyz/cache-size: "512m"

    # Security annotations
    security.veridis.xyz/tls-enabled: "true"
    security.veridis.xyz/authentication: "enabled"
    security.veridis.xyz/authorization: "rbac"
    security.veridis.xyz/encryption-at-rest: "enabled"
    security.veridis.xyz/network-encryption: "enabled"

    # Backup annotations
    backup.veridis.xyz/strategy: "snapshot"
    backup.veridis.xyz/frequency: "daily"
    backup.veridis.xyz/retention: "30d"
    backup.veridis.xyz/compression: "enabled"
    backup.veridis.xyz/incremental: "enabled"

    # Monitoring annotations
    monitoring.veridis.xyz/statefulset-monitoring: "enabled"
    monitoring.veridis.xyz/cluster-monitoring: "enabled"
    monitoring.veridis.xyz/performance-monitoring: "enabled"
    monitoring.veridis.xyz/health-monitoring: "enabled"
    monitoring.veridis.xyz/metrics-export: "enabled"

    # Business annotations
    business.veridis.xyz/cost-center: "observability-infrastructure"
    business.veridis.xyz/budget-allocation: "production-logging"
    business.veridis.xyz/cost-optimization: "enabled"
    business.veridis.xyz/usage-tracking: "comprehensive"
    business.veridis.xyz/roi-tracking: "enabled"

    # Operational annotations
    operations.veridis.xyz/maintenance-window: "sunday-02:00-04:00"
    operations.veridis.xyz/update-strategy: "rolling"
    operations.veridis.xyz/scaling-policy: "manual"
    operations.veridis.xyz/recovery-time-objective: "15m"
    operations.veridis.xyz/recovery-point-objective: "5m"

    # Documentation and procedures
    veridis.xyz/owner: "observability-team@veridis.xyz"
    veridis.xyz/elasticsearch-statefulset-admin: "observability-admin@veridis.xyz"
    veridis.xyz/escalation: "observability-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "observability-oncall@veridis.xyz"

    # Documentation references
    veridis.xyz/documentation: "https://docs.veridis.xyz/observability/elasticsearch-statefulset"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/observability/elasticsearch-statefulset-management"
    veridis.xyz/statefulset-docs: "https://observability.veridis.xyz/elasticsearch-statefulset-guide"
    veridis.xyz/observability-docs: "https://observability.veridis.xyz/elasticsearch-statefulset-monitoring"

# ==============================================================================
# StatefulSet Specification
# ==============================================================================
spec:
  # ==============================================================================
  # Basic StatefulSet Configuration
  # ==============================================================================
  serviceName: veridis-elasticsearch-headless
  replicas: 3

  # Update strategy for controlled rolling updates
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1

  # Pod management policy for ordered deployment
  podManagementPolicy: OrderedReady

  # ==============================================================================
  # Pod Selection and Metadata
  # ==============================================================================
  selector:
    matchLabels:
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/instance: veridis-production
      app.kubernetes.io/component: elasticsearch-statefulset

  template:
    metadata:
      labels:
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/instance: veridis-production
        app.kubernetes.io/version: "8.15.0"
        app.kubernetes.io/component: elasticsearch-statefulset
        app.kubernetes.io/part-of: veridis-protocol
        app.kubernetes.io/managed-by: kustomize

        # Elasticsearch specific labels
        elasticsearch.veridis.xyz/cluster: "veridis-logging-cluster"
        elasticsearch.veridis.xyz/node-role: "master-data-ingest"
        elasticsearch.veridis.xyz/node-type: "combined"

        # Network and security labels
        network.veridis.xyz/policy: "elasticsearch-cluster"
        security.veridis.xyz/level: "enterprise"
        monitoring.veridis.xyz/scrape: "true"

        # Operational labels
        veridis.xyz/environment: production
        veridis.xyz/team: observability-engineering

      annotations:
        # Pod specific annotations
        veridis.xyz/pod-purpose: "elasticsearch-cluster-node"

        # Prometheus monitoring annotations
        prometheus.io/scrape: "true"
        prometheus.io/port: "9114"
        prometheus.io/path: "/metrics"
        prometheus.io/scheme: "http"

        # Configuration checksums for automatic rolling updates
        checksum/config: "placeholder-for-config-checksum"
        checksum/secret: "placeholder-for-secret-checksum"

        # Performance annotations
        performance.veridis.xyz/memory-request: "4Gi"
        performance.veridis.xyz/memory-limit: "6Gi"
        performance.veridis.xyz/cpu-request: "1000m"
        performance.veridis.xyz/cpu-limit: "2000m"

        # Security annotations
        seccomp.security.alpha.kubernetes.io/pod: "runtime/default"
        container.apparmor.security.beta.kubernetes.io/elasticsearch: "runtime/default"

        # Backup annotations
        backup.veridis.xyz/include: "true"
        backup.veridis.xyz/pre-hook: "/usr/share/elasticsearch/bin/elasticsearch-node"
        backup.veridis.xyz/post-hook: "/usr/share/elasticsearch/bin/elasticsearch-node"

    # ==============================================================================
    # Pod Specification
    # ==============================================================================
    spec:
      # ==============================================================================
      # Security and Service Account Configuration
      # ==============================================================================
      serviceAccountName: veridis-elasticsearch

      # Security context for the pod
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [1000]

      # ==============================================================================
      # Scheduling and Resource Management
      # ==============================================================================

      # Priority class for critical workload scheduling
      priorityClassName: veridis-critical

      # Node affinity to prefer SSD nodes
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: node.kubernetes.io/instance-type
                    operator: In
                    values: ["m5.xlarge", "m5.2xlarge", "c5.2xlarge"]
                  - key: kubernetes.io/arch
                    operator: In
                    values: ["amd64"]

        # Pod anti-affinity for high availability
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values: ["elasticsearch"]
                topologyKey: kubernetes.io/hostname
            - weight: 50
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values: ["elasticsearch"]
                topologyKey: topology.kubernetes.io/zone

      # Tolerations for dedicated nodes
      tolerations:
        - key: "observability"
          operator: "Equal"
          value: "elasticsearch"
          effect: "NoSchedule"
        - key: "high-memory"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"

      # ==============================================================================
      # DNS and Networking Configuration
      # ==============================================================================
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "2"
          - name: edns0

      # ==============================================================================
      # Initialization and Setup
      # ==============================================================================

      # Init containers for system configuration
      initContainers:
        # System limits configuration
        - name: configure-sysctl
          image: busybox:1.36
          securityContext:
            privileged: true
            runAsUser: 0
            capabilities:
              add: ["SYS_ADMIN"]
          command:
            - sh
            - -c
            - |
              set -e
              echo "Configuring system limits for Elasticsearch..."

              # Set virtual memory map count
              sysctl -w vm.max_map_count=262144

              # Set TCP buffer sizes
              sysctl -w net.core.rmem_default=262144
              sysctl -w net.core.rmem_max=16777216
              sysctl -w net.core.wmem_default=262144
              sysctl -w net.core.wmem_max=16777216

              # Set socket buffer sizes
              sysctl -w net.core.netdev_max_backlog=5000

              echo "System configuration completed successfully"
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi

        # File permissions setup
        - name: fix-permissions
          image: busybox:1.36
          securityContext:
            runAsUser: 0
            capabilities:
              add: ["CHOWN", "FOWNER"]
          command:
            - sh
            - -c
            - |
              set -e
              echo "Setting up file permissions..."

              # Create data directory if it doesn't exist
              mkdir -p /usr/share/elasticsearch/data

              # Set ownership and permissions
              chown -R 1000:1000 /usr/share/elasticsearch/data
              chmod -R 755 /usr/share/elasticsearch/data

              # Create logs directory
              mkdir -p /usr/share/elasticsearch/logs
              chown -R 1000:1000 /usr/share/elasticsearch/logs
              chmod -R 755 /usr/share/elasticsearch/logs

              echo "Permissions setup completed successfully"
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi

        # Wait for cluster readiness
        - name: wait-for-cluster
          image: curlimages/curl:8.5.0
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          command:
            - sh
            - -c
            - |
              set -e
              echo "Waiting for Elasticsearch cluster to be ready..."

              # Wait for service to be available
              until nslookup veridis-elasticsearch-headless.veridis-infrastructure.svc.cluster.local; do
                echo "Waiting for DNS resolution..."
                sleep 5
              done

              echo "DNS resolution successful, cluster initialization can proceed"
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi

      # ==============================================================================
      # Main Application Containers
      # ==============================================================================
      containers:
        # ==============================================================================
        # Primary Elasticsearch Container
        # ==============================================================================
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
          imagePullPolicy: IfNotPresent

          # Security context for the container
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop: ["ALL"]
              add: ["SETGID", "SETUID"]

          # Container ports
          ports:
            - name: http
              containerPort: 9200
              protocol: TCP
            - name: transport
              containerPort: 9300
              protocol: TCP

          # Environment variables
          env:
            # Cluster configuration
            - name: cluster.name
              value: "veridis-logging-cluster"
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: node.roles
              value: "master,data,ingest"

            # Discovery configuration
            - name: discovery.seed_hosts
              value: "veridis-elasticsearch-headless.veridis-infrastructure.svc.cluster.local:9300"
            - name: cluster.initial_master_nodes
              value: "veridis-elasticsearch-0,veridis-elasticsearch-1,veridis-elasticsearch-2"

            # Network and transport configuration
            - name: network.host
              value: "0.0.0.0"
            - name: transport.host
              value: "0.0.0.0"
            - name: http.port
              value: "9200"
            - name: transport.tcp.port
              value: "9300"

            # Memory and JVM configuration
            - name: ES_JAVA_OPTS
              value: "-Xms2g -Xmx2g -XX:+UseG1GC -XX:G1HeapRegionSize=16m -XX:+UseStringDeduplication"
            - name: bootstrap.memory_lock
              value: "true"

            # Security configuration
            - name: xpack.security.enabled
              value: "true"
            - name: xpack.security.transport.ssl.enabled
              value: "true"
            - name: xpack.security.transport.ssl.verification_mode
              value: "certificate"
            - name: xpack.security.transport.ssl.key
              value: "/usr/share/elasticsearch/config/certs/tls.key"
            - name: xpack.security.transport.ssl.certificate
              value: "/usr/share/elasticsearch/config/certs/tls.crt"
            - name: xpack.security.transport.ssl.certificate_authorities
              value: "/usr/share/elasticsearch/config/certs/ca.crt"
            - name: xpack.security.http.ssl.enabled
              value: "true"
            - name: xpack.security.http.ssl.key
              value: "/usr/share/elasticsearch/config/certs/tls.key"
            - name: xpack.security.http.ssl.certificate
              value: "/usr/share/elasticsearch/config/certs/tls.crt"
            - name: xpack.security.http.ssl.certificate_authorities
              value: "/usr/share/elasticsearch/config/certs/ca.crt"

            # Monitoring and metrics
            - name: xpack.monitoring.collection.enabled
              value: "true"
            - name: xpack.monitoring.elasticsearch.collection.enabled
              value: "false"

            # Performance tuning
            - name: indices.memory.index_buffer_size
              value: "256mb"
            - name: indices.fielddata.cache.size
              value: "512mb"
            - name: indices.query.bool.max_clause_count
              value: "4096"

            # Logging configuration
            - name: logger.level
              value: "INFO"
            - name: logger.org.elasticsearch.discovery
              value: "DEBUG"

            # Path configuration
            - name: path.data
              value: "/usr/share/elasticsearch/data"
            - name: path.logs
              value: "/usr/share/elasticsearch/logs"

            # License configuration
            - name: xpack.license.self_generated.type
              value: "basic"

            # Username and password from secrets
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: veridis-elasticsearch-secret
                  key: elastic-password
            - name: KIBANA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: veridis-elasticsearch-secret
                  key: kibana-password

          # Resource requirements
          resources:
            requests:
              cpu: 1000m
              memory: 4Gi
              ephemeral-storage: 10Gi
            limits:
              cpu: 2000m
              memory: 6Gi
              ephemeral-storage: 20Gi

          # Volume mounts
          volumeMounts:
            # Data persistence
            - name: data
              mountPath: /usr/share/elasticsearch/data

            # Configuration
            - name: config
              mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
              subPath: elasticsearch.yml
              readOnly: true

            # Logging configuration
            - name: config
              mountPath: /usr/share/elasticsearch/config/log4j2.properties
              subPath: log4j2.properties
              readOnly: true

            # TLS certificates
            - name: certs
              mountPath: /usr/share/elasticsearch/config/certs
              readOnly: true

            # JVM options
            - name: config
              mountPath: /usr/share/elasticsearch/config/jvm.options.d/custom.options
              subPath: jvm.options
              readOnly: true

            # Temporary directory
            - name: tmp
              mountPath: /tmp

          # Health checks
          livenessProbe:
            httpGet:
              path: /_cluster/health?local=true
              port: 9200
              scheme: HTTPS
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1

          readinessProbe:
            httpGet:
              path: /_cluster/health?wait_for_status=yellow&timeout=5s
              port: 9200
              scheme: HTTPS
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1

          startupProbe:
            httpGet:
              path: /_cluster/health?local=true
              port: 9200
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1

          # Lifecycle hooks
          lifecycle:
            preStop:
              exec:
                command:
                  - sh
                  - -c
                  - |
                    set -e
                    echo "Gracefully shutting down Elasticsearch..."

                    # Disable shard allocation
                    curl -X PUT "https://localhost:9200/_cluster/settings" \
                      -k -u "elastic:${ELASTIC_PASSWORD}" \
                      -H "Content-Type: application/json" \
                      -d '{
                        "persistent": {
                          "cluster.routing.allocation.enable": "primaries"
                        }
                      }'

                    # Flush indices
                    curl -X POST "https://localhost:9200/_flush/synced" \
                      -k -u "elastic:${ELASTIC_PASSWORD}"

                    echo "Graceful shutdown preparation completed"

        # ==============================================================================
        # Elasticsearch Exporter Sidecar Container
        # ==============================================================================
        - name: elasticsearch-exporter
          image: quay.io/prometheuscommunity/elasticsearch-exporter:v1.7.0
          imagePullPolicy: IfNotPresent

          # Security context for the exporter
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]

          # Container ports
          ports:
            - name: metrics
              containerPort: 9114
              protocol: TCP

          # Environment variables
          env:
            - name: ES_URI
              value: "https://localhost:9200"
            - name: ES_USERNAME
              value: "elastic"
            - name: ES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: veridis-elasticsearch-secret
                  key: elastic-password
            - name: ES_SSL_SKIP_VERIFY
              value: "true"
            - name: ES_ALL
              value: "true"
            - name: ES_INDICES
              value: "true"
            - name: ES_INDICES_SETTINGS
              value: "true"
            - name: ES_SHARDS
              value: "true"
            - name: ES_SNAPSHOTS
              value: "true"
            - name: ES_TIMEOUT
              value: "30s"
            - name: LOG_LEVEL
              value: "info"

          # Resource requirements
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi

          # Volume mounts
          volumeMounts:
            - name: tmp
              mountPath: /tmp

          # Health checks
          livenessProbe:
            httpGet:
              path: /health
              port: 9114
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /health
              port: 9114
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

      # ==============================================================================
      # Volume Configuration
      # ==============================================================================
      volumes:
        # Configuration volume
        - name: config
          configMap:
            name: veridis-elasticsearch-config
            defaultMode: 0644
            items:
              - key: elasticsearch.yml
                path: elasticsearch.yml
              - key: log4j2.properties
                path: log4j2.properties
              - key: jvm.options
                path: jvm.options

        # TLS certificates volume
        - name: certs
          secret:
            secretName: veridis-elasticsearch-certs
            defaultMode: 0400
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt

        # Temporary directory
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi

  # ==============================================================================
  # Volume Claim Templates
  # ==============================================================================
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: elasticsearch
          app.kubernetes.io/instance: veridis-production
          app.kubernetes.io/component: elasticsearch-storage

          # Storage specific labels
          storage.veridis.xyz/type: "elasticsearch-data"
          storage.veridis.xyz/category: "log-storage"
          storage.veridis.xyz/tier: "production"

          # Performance labels
          performance.veridis.xyz/storage-class: "fast-ssd"
          performance.veridis.xyz/iops: "high"

          # Backup labels
          backup.veridis.xyz/policy: "daily"
          backup.veridis.xyz/retention: "30d"

          # Operational labels
          veridis.xyz/environment: production
          veridis.xyz/team: observability-engineering

        annotations:
          # Storage annotations
          storage.veridis.xyz/purpose: "elasticsearch-data-persistence"
          storage.veridis.xyz/encryption: "enabled"
          storage.veridis.xyz/replication: "zone-redundant"

          # Performance annotations
          performance.veridis.xyz/expected-iops: "3000"
          performance.veridis.xyz/expected-throughput: "500MB/s"

          # Backup annotations
          backup.veridis.xyz/snapshot-schedule: "0 2 * * *"
          backup.veridis.xyz/cross-region-replication: "enabled"

          # Monitoring annotations
          monitoring.veridis.xyz/disk-monitoring: "enabled"
          monitoring.veridis.xyz/usage-alerts: "enabled"

      spec:
        accessModes:
          - ReadWriteOnce

        storageClassName: fast-ssd

        resources:
          requests:
            storage: 100Gi

        # Volume mode
        volumeMode: Filesystem

# ==============================================================================
# Veridis Elasticsearch StatefulSet Summary and Enterprise Architecture
# ==============================================================================
#
# COMPREHENSIVE VERIDIS ELASTICSEARCH STATEFULSET STRATEGY:
# =========================================================
#
# VERIDIS ELASTICSEARCH STATEFULSET ARCHITECTURE OVERVIEW:
# --------------------------------------------------------
# 1. Primary Production StatefulSet (veridis-elasticsearch):
#    - Comprehensive enterprise-grade statefulset with intelligent log storage and advanced performance optimization for production Elasticsearch
#    - Advanced statefulset configuration with clustering support, comprehensive storage management, TLS encryption, and comprehensive observability integration
#    - Multi-tier statefulset architecture with master/data/ingest nodes, persistence management, backup integration, and comprehensive operational excellence
#    - Enterprise statefulset policies with security enforcement, compliance controls, monitoring integration, and comprehensive disaster recovery procedures
#    - Performance optimization with intelligent storage management, memory tuning, JVM optimization, and security for maximum efficiency
#
# 2. Cluster Management Architecture:
#    - Multi-node cluster with master/data/ingest roles, service discovery, cluster state management, and comprehensive cluster coordination
#    - Advanced cluster configuration with zen discovery, quorum management, split-brain prevention, and comprehensive cluster intelligence
#    - Flexible cluster optimization with auto-discovery, state replication, and comprehensive cluster intelligence
#    - Cluster intelligence with health procedures, monitoring support, scaling automation, and comprehensive cluster coordination
#    - Operational excellence with cluster management, state persistence, backup coordination, and comprehensive cluster environment management
#
# 3. Storage and Persistence Management:
#    - Persistent storage with SSD optimization, encryption at rest, backup integration, and comprehensive storage coordination
#    - Storage configuration with volume templates, fast SSD storage class, zone redundancy, and comprehensive storage intelligence
#    - Flexible storage optimization with capacity management, performance tuning, and comprehensive storage intelligence
#    - Storage intelligence with monitoring procedures, backup support, capacity planning, and comprehensive storage coordination
#    - Persistence excellence with data durability, storage optimization, backup automation, and comprehensive storage environment management
#
# 4. Security and Compliance Integration:
#    - Enterprise security with TLS encryption, authentication, authorization, and comprehensive security enhancement integration
#    - Advanced security configuration with certificate management, user authentication, RBAC integration, and comprehensive security support
#    - Flexible security optimization with compliance controls, audit logging, and comprehensive security intelligence
#    - Security intelligence with compliance procedures, audit support, vulnerability management, and comprehensive security coordination
#    - Compliance excellence with regulatory adherence, security monitoring, audit trails, and comprehensive security environment management
#
# ENTERPRISE ELASTICSEARCH STATEFULSET FEATURES:
# ==============================================
# Advanced Storage Management and Performance Integration:
#   - Multi-tier statefulset architecture with production clustering, storage optimization, security integration, and performance configurations
#   - Intelligent storage management with persistence algorithms, backup policies, encryption optimization, and comprehensive storage decisions
#   - StatefulSet discovery with volume optimization, cluster management, performance policies, and comprehensive storage analytics
#   - Performance management with high throughput (10K docs/sec), low latency, memory optimization, and comprehensive performance intelligence
#   - Storage processing tuning with volume management, backup optimization, encryption algorithms, and intelligent statefulset optimization
#
# Comprehensive Clustering and Discovery Integration:
#   - Multi-node cluster with master nodes, data nodes, ingest nodes, and comprehensive cluster coordination
#   - Cluster optimization with zen discovery, quorum management, split-brain prevention, and comprehensive cluster intelligence
#   - Discovery management with service discovery, DNS resolution, cluster state management, and comprehensive discovery coordination
#   - Business intelligence with cluster analytics, performance correlation, cost optimization, and comprehensive strategic insights
#   - Cluster management with discovery policies, state replication, backup integration, and comprehensive cluster analytics
#
# Enterprise Security and Compliance Integration:
#   - Storage security with encryption at rest, TLS transport, certificate management, and comprehensive security enforcement
#   - Authentication audit with user management, RBAC integration, access tracking, and comprehensive authentication management
#   - Compliance processing with audit logging, data protection, compliance validation, and comprehensive compliance management
#   - Security monitoring with certificate tracking, access validation, security audit, and comprehensive security management
#   - Compliance intelligence with audit trails, security review, compliance validation, and comprehensive compliance analytics
#
# Advanced Performance Optimization and Tuning:
#   - Multi-tier performance tuning with JVM optimization, memory management, storage tuning, and comprehensive performance coordination
#   - Performance optimization with heap sizing, garbage collection, cache management, and comprehensive performance intelligence
#   - Resource management with CPU allocation, memory optimization, storage performance, and comprehensive resource coordination
#   - Business intelligence with performance analytics, resource correlation, efficiency optimization, and comprehensive strategic insights
#   - Tuning management with configuration optimization, performance monitoring, resource allocation, and comprehensive tuning analytics
#
# OPERATIONAL EXCELLENCE:
# ======================
# Elasticsearch StatefulSet Lifecycle Management:
#   - Multi-StatefulSet deployment with production clustering, storage optimization, security integration, and comprehensive statefulset coordination
#   - Intelligent statefulset management with predictive analytics and storage utilization correlation
#   - Advanced monitoring with comprehensive statefulset analytics and storage business intelligence
#   - Configuration validation with statefulset schema enforcement and storage deployment safety checks
#   - Automated optimization with statefulset pattern analysis and storage configuration recommendation engine
#
# Security Integration and Compliance:
#   - SOC 2 Type II statefulset controls with comprehensive audit requirements and storage logging
#   - GDPR statefulset compliance with data protection and privacy-preserving storage management
#   - ISO 27001 statefulset security management with information security and storage compliance integration
#   - NIST 800-190 container statefulset security with storage validation and compliance
#   - Zero-trust statefulset architecture with comprehensive encryption and storage authentication requirements
#
# Business Intelligence Integration:
#   - StatefulSet analytics with cost correlation and storage resource utilization optimization
#   - Performance analytics with user experience optimization and statefulset business intelligence
#   - Storage intelligence with processing pattern monitoring and statefulset optimization recommendations
#   - Strategic planning with capacity management and statefulset forecasting
#   - Business impact assessment with statefulset performance correlation and storage tracking
#
# Developer Experience Excellence:
#   - Multi-environment statefulset support with production clustering, development debugging, staging validation, and comprehensive statefulset coordination
#   - Comprehensive documentation with statefulset guides and storage troubleshooting procedures
#   - Environment-specific statefulsets with production, development, staging, and cluster support
#   - Testing integration with statefulset development workflow and storage debugging capabilities
#   - StatefulSet monitoring with comprehensive tracking and storage correlation
#
# ==============================================================================
