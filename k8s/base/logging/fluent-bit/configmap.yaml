# ==============================================================================
# Veridis Decentralized Identity Protocol - Fluent Bit ConfigMap Configuration
# ==============================================================================
#
# This manifest defines comprehensive Fluent Bit ConfigMap for the
# decentralized identity protocol, providing:
#
# ENTERPRISE VERIDIS FLUENT BIT CONFIGMAP ARCHITECTURE:
#   • Advanced Fluent Bit ConfigMap with intelligent log configuration and performance-based optimization
#   • Multi-tier ConfigMap architecture with development, testing, staging, and production environments
#   • Comprehensive observability framework with ConfigMap policies, log optimization, Fluent Bit integration
#   • Advanced lifecycle management with automated ConfigMap optimization, Fluent Bit control, and log enhancement
#   • Enterprise-grade intelligence with comprehensive analytics and Fluent Bit ConfigMap performance insights
#
# VERIDIS FLUENT BIT CONFIGMAP OPTIMIZATION:
#   • High-performance ConfigMap with intelligent log configuration and Fluent Bit configmap optimization
#   • Intelligent ConfigMap log configuration with responsive policies and performance-based log decisions
#   • Advanced ConfigMap management with business intelligence and log-based Fluent Bit control
#   • Comprehensive observability control with intelligent Fluent Bit ConfigMap management and log enhancement
#   • Enterprise acceleration with predictive Fluent Bit ConfigMap management and log optimization
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II Fluent Bit ConfigMap controls with comprehensive audit and log requirements
#   • GDPR Fluent Bit ConfigMap compliance with data protection, privacy controls, and log management
#   • ISO 27001 Fluent Bit ConfigMap management with comprehensive framework integration
#   • NIST 800-190 container Fluent Bit ConfigMap security with log-specific validation and compliance
#   • Zero-knowledge protocol compliance with regulatory frameworks and Fluent Bit ConfigMap best practices
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent Fluent Bit ConfigMap lifecycle management with automated provisioning and log optimization
#   • Predictive log analytics with capacity planning and Fluent Bit ConfigMap intelligence
#   • Advanced ConfigMap integration with Fluent Bit log analytics and performance business intelligence
#   • Comprehensive observability control with Fluent Bit ConfigMap preservation and log optimization
#   • Business continuity Fluent Bit ConfigMap with log guarantees and performance optimization
#
# FLUENT BIT CONFIGMAP ACCELERATION INTELLIGENCE:
#   • Fluent Bit ConfigMap usage analytics with log patterns and optimization recommendations
#   • ConfigMap monitoring with Fluent Bit log latency and management optimization intelligence
#   • Development efficiency with Fluent Bit ConfigMap analytics and deployment optimization procedures
#   • Cost optimization with Fluent Bit ConfigMap utilization analysis and log capacity planning procedures
#   • Quality assurance with Fluent Bit ConfigMap metrics and observability validation procedures
#
# ==============================================================================

# ==============================================================================
# Veridis Fluent Bit ConfigMap - Primary Log Configuration
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-fluent-bit-config
  namespace: veridis-infrastructure

  # Core Veridis Fluent Bit ConfigMap identification labels
  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-configmap
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Fluent Bit ConfigMap specific classification
    fluentbit.veridis.xyz/type: log-fluentbit-configmap
    fluentbit.veridis.xyz/category: observability-configmap
    fluentbit.veridis.xyz/role: primary-fluentbit-configmap
    fluentbit.veridis.xyz/configmap-class: high-performance-fluentbit-configmap
    fluentbit.veridis.xyz/security-level: enterprise

    # ConfigMap Fluent Bit ConfigMap classification
    configmap.veridis.xyz/fluentbit-configmap-type: intelligent-fluentbit-configmap
    configmap.veridis.xyz/configmap-type: log-configmap
    configmap.veridis.xyz/performance-tier: high-throughput
    configmap.veridis.xyz/optimization: enabled
    configmap.veridis.xyz/features: full-fluentbit-configmap-stack

    # Observability Fluent Bit ConfigMap classification
    observability.veridis.xyz/tier: production
    observability.veridis.xyz/optimization: intelligent-fluentbit-configmap-management
    observability.veridis.xyz/log-management: advanced
    observability.veridis.xyz/performance-optimization: enabled
    observability.veridis.xyz/efficiency: maximum

    # Business Fluent Bit ConfigMap classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/impact: high-fluentbit-configmap-performance
    business.veridis.xyz/cost-tier: production
    business.veridis.xyz/sla-tier: enterprise
    business.veridis.xyz/availability-requirement: 99.9

    # Operational Fluent Bit ConfigMap labels
    veridis.xyz/environment: production
    veridis.xyz/team: observability-engineering
    veridis.xyz/cost-center: observability-infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "fluentbit-configmap-control-framework"
    compliance.veridis.xyz/gdpr: "fluentbit-configmap-data-protection"
    compliance.veridis.xyz/iso27001: "fluentbit-configmap-security-management"
    compliance.veridis.xyz/nist-800-190: "fluentbit-configmap-container-security"
    governance.veridis.xyz/policy-enforcement: "enterprise"

    # Fluent Bit ConfigMap analytics and intelligence
    monitoring.veridis.xyz/fluentbit-configmap-monitoring: "enabled"
    monitoring.veridis.xyz/performance-monitoring: "comprehensive"
    monitoring.veridis.xyz/log-monitoring: "enabled"
    monitoring.veridis.xyz/business-monitoring: "enabled"
    monitoring.veridis.xyz/compliance-monitoring: "enabled"

    # Configuration management labels
    config.veridis.xyz/type: "logging"
    config.veridis.xyz/classification: "configuration"
    config.veridis.xyz/validation: "enabled"
    config.veridis.xyz/reload: "hot"
    config.veridis.xyz/optimization: "enabled"

    # Log processing labels
    log.veridis.xyz/processing: "comprehensive"
    log.veridis.xyz/filtering: "advanced"
    log.veridis.xyz/enrichment: "enabled"
    log.veridis.xyz/forwarding: "intelligent"
    log.veridis.xyz/buffering: "optimized"

    # Performance labels
    performance.veridis.xyz/throughput-tier: "high"
    performance.veridis.xyz/latency-tier: "low"
    performance.veridis.xyz/concurrency-tier: "high"
    performance.veridis.xyz/optimization-enabled: "true"
    performance.veridis.xyz/caching-enabled: "true"

  annotations:
    # Fluent Bit ConfigMap purpose and specifications
    veridis.xyz/description: "Enterprise Veridis Fluent Bit ConfigMap with intelligent log configuration, advanced performance optimization, and comprehensive observability optimization"
    veridis.xyz/purpose: "Provides comprehensive Fluent Bit ConfigMap for decentralized identity management with intelligent log configuration, performance optimization, and observability guarantees"
    veridis.xyz/scope: "Fluent Bit ConfigMap including log configuration, performance optimization, filtering rules, and comprehensive monitoring intelligence"

    # Fluent Bit ConfigMap architecture and design
    fluentbit.veridis.xyz/architecture: "Enterprise Fluent Bit ConfigMap with intelligent log configuration, advanced performance optimization, and filtering integration optimization"
    fluentbit.veridis.xyz/design-pattern: "Multi-tier Fluent Bit ConfigMap with performance optimization, cost efficiency, and business intelligence"
    fluentbit.veridis.xyz/optimization-model: "Intelligent Fluent Bit ConfigMap with predictive analytics, performance optimization, and log efficiency"
    fluentbit.veridis.xyz/performance-model: "High-performance Fluent Bit ConfigMap with log optimization and intelligent filtering management"

    # ConfigMap Fluent Bit ConfigMap specifications
    configmap.veridis.xyz/fluentbit-configmap-specification: "Fluent Bit ConfigMap with performance optimization and intelligent fluentbit configmap management"
    configmap.veridis.xyz/log-specification: "Advanced log configuration management with fluentbit optimization and configmap enhancement"
    configmap.veridis.xyz/filtering-specification: "Fluent Bit ConfigMap filtering management optimization with intelligent log and enhancement"
    configmap.veridis.xyz/performance-specification: "Fluent Bit performance configmap with log acceleration and efficiency"
    configmap.veridis.xyz/business-specification: "Fluent Bit business configmap with cost optimization and strategic log intelligence"

    # Configuration specific annotations
    config.veridis.xyz/input-sources: "systemd,docker,kubernetes"
    config.veridis.xyz/output-destinations: "elasticsearch,stdout,forward"
    config.veridis.xyz/parser-formats: "json,regex,multiline"
    config.veridis.xyz/filter-plugins: "kubernetes,grep,modify"
    config.veridis.xyz/buffer-configuration: "memory,filesystem"

    # Performance annotations
    performance.veridis.xyz/expected-throughput: "10000-logs-per-second"
    performance.veridis.xyz/buffer-size: "128MB"
    performance.veridis.xyz/flush-interval: "5s"
    performance.veridis.xyz/worker-threads: "4"
    performance.veridis.xyz/chunk-size: "1MB"

    # Log processing annotations
    log.veridis.xyz/multiline-support: "enabled"
    log.veridis.xyz/json-parsing: "enabled"
    log.veridis.xyz/kubernetes-enrichment: "enabled"
    log.veridis.xyz/pii-filtering: "enabled"
    log.veridis.xyz/compression: "enabled"

    # Security annotations
    security.veridis.xyz/pii-redaction: "enabled"
    security.veridis.xyz/sensitive-data-filtering: "enabled"
    security.veridis.xyz/audit-logging: "enabled"
    security.veridis.xyz/encryption-in-transit: "enabled"
    security.veridis.xyz/access-control: "rbac"

    # Business annotations
    business.veridis.xyz/cost-center: "observability-infrastructure"
    business.veridis.xyz/budget-allocation: "production-logging"
    business.veridis.xyz/cost-optimization: "enabled"
    business.veridis.xyz/usage-tracking: "comprehensive"
    business.veridis.xyz/roi-tracking: "enabled"

    # Monitoring annotations
    monitoring.veridis.xyz/configmap-monitoring: "enabled"
    monitoring.veridis.xyz/configuration-validation: "enabled"
    monitoring.veridis.xyz/performance-tracking: "enabled"
    monitoring.veridis.xyz/error-tracking: "enabled"
    monitoring.veridis.xyz/reload-monitoring: "enabled"

    # Documentation and procedures
    veridis.xyz/owner: "observability-team@veridis.xyz"
    veridis.xyz/fluentbit-configmap-admin: "observability-admin@veridis.xyz"
    veridis.xyz/escalation: "observability-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "observability-oncall@veridis.xyz"

    # Documentation references
    veridis.xyz/documentation: "https://docs.veridis.xyz/observability/fluent-bit-configmap"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/observability/fluent-bit-configmap-management"
    veridis.xyz/configmap-docs: "https://observability.veridis.xyz/fluent-bit-configmap-guide"
    veridis.xyz/observability-docs: "https://observability.veridis.xyz/fluent-bit-configmap-monitoring"

data:
  # ==============================================================================
  # Main Fluent Bit Configuration
  # ==============================================================================
  fluent-bit.conf: |
    # ==============================================================================
    # Veridis Fluent Bit Main Configuration
    # Enterprise log collection and processing for Veridis Decentralized Identity Protocol
    # ==============================================================================

    [SERVICE]
        # Core service configuration
        Flush         5
        Daemon        Off
        Log_Level     info
        Parsers_File  parsers.conf
        Plugins_File  plugins.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020

        # Storage configuration for reliability
        storage.path              /fluent-bit/cache
        storage.sync              normal
        storage.checksum          off
        storage.backlog.mem_limit 128M

        # Performance optimizations
        storage.metrics           on
        log.file                  /fluent-bit/log/fluent-bit.log

        # Health check endpoint
        Health_Check On
        HC_Errors_Count 5
        HC_Retry_Failure_Count 5
        HC_Period 60

    # ==============================================================================
    # INPUT SECTIONS - Log Collection Sources
    # ==============================================================================

    # Kubernetes container logs via systemd journal
    [INPUT]
        Name              systemd
        Tag               host.*
        Systemd_Filter    _SYSTEMD_UNIT=kubelet.service
        Systemd_Filter    _SYSTEMD_UNIT=docker.service
        Systemd_Filter    _SYSTEMD_UNIT=containerd.service
        Read_From_Tail    On
        Strip_Underscores On

    # Docker container logs
    [INPUT]
        Name              tail
        Tag               docker.*
        Path              /var/lib/docker/containers/*/*.log
        Parser            docker
        DB                /fluent-bit/cache/docker.db
        Mem_Buf_Limit     64MB
        Skip_Long_Lines   On
        Refresh_Interval  10
        Rotate_Wait       30
        storage.type      filesystem

    # Kubernetes pod logs
    [INPUT]
        Name              tail
        Tag               kube.*
        Path              /var/log/pods/*/*/*.log
        Parser            cri
        DB                /fluent-bit/cache/kubernetes.db
        Mem_Buf_Limit     64MB
        Skip_Long_Lines   On
        Refresh_Interval  10
        Rotate_Wait       30
        storage.type      filesystem

    # System logs
    [INPUT]
        Name              tail
        Tag               system.*
        Path              /var/log/syslog
        Parser            syslog
        DB                /fluent-bit/cache/syslog.db
        Mem_Buf_Limit     32MB
        Refresh_Interval  30
        storage.type      memory

    # Audit logs for compliance
    [INPUT]
        Name              tail
        Tag               audit.*
        Path              /var/log/audit/audit.log
        Parser            audit
        DB                /fluent-bit/cache/audit.db
        Mem_Buf_Limit     32MB
        Refresh_Interval  5
        storage.type      filesystem

    # Application-specific logs for Veridis services
    [INPUT]
        Name              tail
        Tag               veridis.*
        Path              /var/log/veridis/*.log
        Parser            json
        DB                /fluent-bit/cache/veridis.db
        Mem_Buf_Limit     128MB
        Refresh_Interval  5
        Rotate_Wait       10
        storage.type      filesystem

    # ==============================================================================
    # FILTER SECTIONS - Log Processing and Enrichment
    # ==============================================================================

    # Kubernetes metadata enrichment
    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix     kube.var.log.pods.
        Merge_Log           On
        Merge_Log_Key       log_processed
        Keep_Log            Off
        FLB_LOG_LEVEL       info
        Annotations         Off
        Labels              On
        Buffer_Size         32k

    # Add node information
    [FILTER]
        Name modify
        Match *
        Add node_name ${NODE_NAME}
        Add node_ip ${NODE_IP}
        Add cluster_name veridis-production
        Add environment production

    # Veridis-specific log enrichment
    [FILTER]
        Name modify
        Match veridis.*
        Add protocol_version 3.2.1
        Add service_type veridis-protocol
        Add compliance_level enterprise
        Add security_level high

    # PII and sensitive data filtering for GDPR compliance
    [FILTER]
        Name grep
        Match *
        Exclude log \b\d{4}[ -]?\d{4}[ -]?\d{4}[ -]?\d{4}\b

    [FILTER]
        Name modify
        Match *
        Remove_regex log \b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b

    # Security event filtering and alerting
    [FILTER]
        Name grep
        Match audit.*
        Regex message (authentication|authorization|access.*denied|failed.*login)

    # Performance metrics extraction
    [FILTER]
        Name parser
        Match veridis.*
        Key_Name log
        Parser veridis_metrics
        Reserve_Data On

    # Log level standardization
    [FILTER]
        Name modify
        Match *
        Rename level log_level
        Rename severity log_severity

    # Timestamp standardization
    [FILTER]
        Name modify
        Match *
        Add timestamp ${time}
        Add log_source fluent-bit
        Add collector_version 2.2.2

    # Remove noisy logs
    [FILTER]
        Name grep
        Match docker.*
        Exclude log (healthcheck|readiness|liveness)

    # Multiline log handling for Java stack traces
    [FILTER]
        Name multiline
        Match kube.*
        multiline.key_content log
        multiline.parser java_multiline

    # Rate limiting for high-volume logs
    [FILTER]
        Name throttle
        Match system.*
        Rate 1000
        Window 60
        Interval 1s

    # ==============================================================================
    # OUTPUT SECTIONS - Log Destinations
    # ==============================================================================

    # Primary output to Elasticsearch
    [OUTPUT]
        Name            es
        Match           *
        Host            elasticsearch.veridis-infrastructure.svc.cluster.local
        Port            9200
        Logstash_Format On
        Logstash_Prefix veridis-logs
        Logstash_DateFormat %Y.%m.%d
        Include_Tag_Key On
        Tag_Key         fluent_tag
        Time_Key        @timestamp
        Time_Key_Format %Y-%m-%dT%H:%M:%S.%L%z
        Retry_Limit     5
        Type            _doc
        Suppress_Type_Name On
        Buffer_Size     False

        # Performance optimization
        HTTP_User       ${FLUENT_ELASTICSEARCH_USER}
        HTTP_Passwd     ${FLUENT_ELASTICSEARCH_PASSWORD}
        tls             Off

        # Index management
        Generate_ID     On
        Replace_Dots    On
        Trace_Error     On

        # Buffering configuration
        storage.total_limit_size 2G

    # Conditional stdout output for development
    [OUTPUT]
        Name   stdout
        Match  veridis.*
        Format json_lines

    # Forward to external log aggregator (optional)
    [OUTPUT]
        Name       forward
        Match      audit.*
        Host       log-aggregator.veridis.xyz
        Port       24224
        Time_as_Integer On
        Retry_Limit 3

    # Dead letter queue for failed logs
    [OUTPUT]
        Name   file
        Match  *
        Path   /fluent-bit/failed-logs
        File   failed-logs.log
        Format json_lines

  # ==============================================================================
  # Parsers Configuration
  # ==============================================================================
  parsers.conf: |
    # ==============================================================================
    # Veridis Fluent Bit Parsers Configuration
    # Custom parsers for Veridis protocol log formats
    # ==============================================================================

    # Docker container logs parser
    [PARSER]
        Name        docker
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep   On

    # CRI container logs parser
    [PARSER]
        Name        cri
        Format      regex
        Regex       ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<message>.*)$
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z
        Time_Keep   On

    # Syslog parser
    [PARSER]
        Name        syslog
        Format      regex
        Regex       ^\<(?<pri>[0-9]+)\>(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? *(?<message>.*)$
        Time_Key    time
        Time_Format %b %d %H:%M:%S

    # Audit log parser
    [PARSER]
        Name        audit
        Format      regex
        Regex       ^type=(?<type>[^ ]+) msg=audit\((?<timestamp>[^)]+)\): (?<message>.*)$
        Time_Key    timestamp
        Time_Format %s.%L

    # Veridis application logs (JSON format)
    [PARSER]
        Name        json
        Format      json
        Time_Key    timestamp
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z
        Time_Keep   On
        Decode_Field_As escaped_utf8 message do_next
        Decode_Field_As json message

    # Veridis metrics parser
    [PARSER]
        Name        veridis_metrics
        Format      regex
        Regex       ^.*\[METRICS\] (?<metric_name>[^:]+): (?<metric_value>[0-9.]+) (?<metric_unit>[a-zA-Z]+).*$

    # Veridis error parser
    [PARSER]
        Name        veridis_error
        Format      regex
        Regex       ^(?<timestamp>[^ ]+) \[(?<level>[^\]]+)\] (?<component>[^:]+): (?<error_code>[A-Z0-9_]+) - (?<message>.*)$
        Time_Key    timestamp
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z

    # Rust application logs
    [PARSER]
        Name        rust_log
        Format      regex
        Regex       ^(?<timestamp>[^ ]+) (?<level>[^ ]+) (?<target>[^ ]+) (?<message>.*)$
        Time_Key    timestamp
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z

    # Node.js application logs (for ZK circuits)
    [PARSER]
        Name        nodejs_log
        Format      json
        Time_Key    timestamp
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z
        Decode_Field_As json message

    # Multiline parser for Java stack traces
    [MULTILINE_PARSER]
        name          java_multiline
        type          regex
        flush_timeout 1000
        #
        # Regex rules for multiline parsing
        # ---------------------------------
        #
        # configuration hints:
        #
        #  - first state always has the name: start_state
        #  - every field in the rule must be inside double quotes
        #
        # rules |   state name  | regex pattern                  | next state
        # ------|---------------|-----------------------------   |------------
        rule      "start_state"   "/(^[0-9]{4}-[0-9]{2}-[0-9]{2}.*)/"  "cont"
        rule      "cont"          "/^(?!(^[0-9]{4}-[0-9]{2}-[0-9]{2})).*/"   "cont"

  # ==============================================================================
  # Plugins Configuration
  # ==============================================================================
  plugins.conf: |
    # ==============================================================================
    # Veridis Fluent Bit Plugins Configuration
    # Custom plugins and processors for enhanced log processing
    # ==============================================================================

    [PLUGINS]
        Path /fluent-bit/plugins/out_veridis_analytics.so

    [PLUGINS]
        Path /fluent-bit/plugins/filter_veridis_enrichment.so

  # ==============================================================================
  # Lua Scripts Configuration
  # ==============================================================================
  lua-scripts.conf: |
    # ==============================================================================
    # Veridis Fluent Bit Lua Scripts
    # Custom Lua scripts for advanced log processing
    # ==============================================================================

    # PII redaction script
    function redact_pii(tag, timestamp, record)
        if record["message"] then
            -- Remove credit card numbers
            record["message"] = string.gsub(record["message"], "%d%d%d%d[%s%-]?%d%d%d%d[%s%-]?%d%d%d%d[%s%-]?%d%d%d%d", "****-****-****-****")

            -- Remove email addresses
            record["message"] = string.gsub(record["message"], "[%w%._%+%-]+@[%w%.%-]+%.%w+", "***@***.***")

            -- Remove IP addresses
            record["message"] = string.gsub(record["message"], "%d+%.%d+%.%d+%.%d+", "***.***.***.***")

            -- Remove social security numbers
            record["message"] = string.gsub(record["message"], "%d%d%d[%-]?%d%d[%-]?%d%d%d%d", "***-**-****")
        end
        return 2, timestamp, record
    end

    # Add compliance metadata
    function add_compliance_metadata(tag, timestamp, record)
        record["compliance"] = {
            gdpr_processed = true,
            retention_days = 365,
            data_classification = "internal",
            pii_redacted = true
        }
        return 2, timestamp, record
    end

    # Performance metrics extraction
    function extract_metrics(tag, timestamp, record)
        if record["message"] and string.find(record["message"], "METRICS") then
            local metric_name = string.match(record["message"], "METRICS%] ([^:]+):")
            local metric_value = string.match(record["message"], ": ([%d%.]+)")
            local metric_unit = string.match(record["message"], " ([%w]+)$")

            if metric_name and metric_value then
                record["metric"] = {
                    name = metric_name,
                    value = tonumber(metric_value),
                    unit = metric_unit or "count",
                    timestamp = timestamp
                }
            end
        end
        return 2, timestamp, record
    end

---
# ==============================================================================
# Veridis Fluent Bit ConfigMap - Development Environment Configuration
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-fluent-bit-config-dev
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-development
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-configmap-dev
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    fluentbit.veridis.xyz/type: log-fluentbit-configmap-dev
    fluentbit.veridis.xyz/category: observability-configmap-dev
    fluentbit.veridis.xyz/role: development-fluentbit-configmap

    configmap.veridis.xyz/type: "development"
    configmap.veridis.xyz/log-level: "debug"
    configmap.veridis.xyz/performance-tier: "basic"

    veridis.xyz/environment: development
    veridis.xyz/team: observability-engineering

  annotations:
    veridis.xyz/description: "Development Fluent Bit ConfigMap with simplified configuration for testing environment"
    veridis.xyz/purpose: "Provides development Fluent Bit ConfigMap for testing and development workflows"

    config.veridis.xyz/input-sources: "docker,stdout"
    config.veridis.xyz/output-destinations: "stdout,file"
    config.veridis.xyz/parser-formats: "json,docker"
    config.veridis.xyz/filter-plugins: "basic"

    # Development specific annotations
    development.veridis.xyz/testing-enabled: "true"
    development.veridis.xyz/debug-logging: "true"
    development.veridis.xyz/performance-relaxed: "true"
    development.veridis.xyz/cost-optimized: "true"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "development-environment-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/observability/fluent-bit-configmap-development"

data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         1
        Daemon        Off
        Log_Level     debug
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020

    [INPUT]
        Name              tail
        Tag               dev.*
        Path              /var/log/*.log
        Parser            json
        Refresh_Interval  5

    [FILTER]
        Name modify
        Match *
        Add environment development
        Add debug_mode true

    [OUTPUT]
        Name   stdout
        Match  *
        Format json_lines

    [OUTPUT]
        Name   file
        Match  *
        Path   /tmp/
        File   dev-logs.log
        Format json_lines

  parsers.conf: |
    [PARSER]
        Name        json
        Format      json
        Time_Key    timestamp
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z

    [PARSER]
        Name        docker
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L

---
# ==============================================================================
# Veridis Fluent Bit ConfigMap - Staging Environment Configuration
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-fluent-bit-config-staging
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-staging
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-configmap-staging
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    fluentbit.veridis.xyz/type: log-fluentbit-configmap-staging
    fluentbit.veridis.xyz/category: observability-configmap-staging
    fluentbit.veridis.xyz/role: staging-fluentbit-configmap

    configmap.veridis.xyz/type: "staging"
    configmap.veridis.xyz/log-level: "info"
    configmap.veridis.xyz/performance-tier: "enhanced"

    veridis.xyz/environment: staging
    veridis.xyz/team: observability-engineering

  annotations:
    veridis.xyz/description: "Staging Fluent Bit ConfigMap with production-like configuration for pre-production testing"
    veridis.xyz/purpose: "Provides staging Fluent Bit ConfigMap for pre-production validation and testing"

    config.veridis.xyz/input-sources: "systemd,docker,kubernetes"
    config.veridis.xyz/output-destinations: "elasticsearch,stdout"
    config.veridis.xyz/parser-formats: "json,regex,multiline"
    config.veridis.xyz/filter-plugins: "kubernetes,grep,modify"

    # Staging specific annotations
    staging.veridis.xyz/production-like: "true"
    staging.veridis.xyz/performance-enhanced: "true"
    staging.veridis.xyz/load-testing-ready: "true"
    staging.veridis.xyz/monitoring-enhanced: "true"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "staging-environment-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/observability/fluent-bit-configmap-staging"

data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         3
        Daemon        Off
        Log_Level     info
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020
        storage.path  /fluent-bit/cache

    [INPUT]
        Name              tail
        Tag               staging.*
        Path              /var/log/pods/*/*/*.log
        Parser            cri
        DB                /fluent-bit/cache/staging.db
        Mem_Buf_Limit     32MB
        Refresh_Interval  10

    [INPUT]
        Name              systemd
        Tag               host.*
        Systemd_Filter    _SYSTEMD_UNIT=kubelet.service
        Read_From_Tail    On

    [FILTER]
        Name modify
        Match *
        Add environment staging
        Add cluster_name veridis-staging

    [FILTER]
        Name kubernetes
        Match staging.*
        Kube_URL https://kubernetes.default.svc:443
        Merge_Log On

    [OUTPUT]
        Name            es
        Match           *
        Host            elasticsearch.veridis-infrastructure.svc.cluster.local
        Port            9200
        Logstash_Format On
        Logstash_Prefix veridis-staging-logs
        Include_Tag_Key On

    [OUTPUT]
        Name   stdout
        Match  staging.*
        Format json_lines

  parsers.conf: |
    [PARSER]
        Name        cri
        Format      regex
        Regex       ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<message>.*)$
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z

    [PARSER]
        Name        json
        Format      json
        Time_Key    timestamp
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z

---
# ==============================================================================
# Veridis Fluent Bit ConfigMap - Custom Filters Configuration
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-fluent-bit-filters
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-filters
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    fluentbit.veridis.xyz/type: log-fluentbit-filters
    fluentbit.veridis.xyz/category: observability-filters
    fluentbit.veridis.xyz/role: custom-filters

    configmap.veridis.xyz/type: "filters"
    configmap.veridis.xyz/classification: "processing"

    veridis.xyz/environment: production
    veridis.xyz/team: observability-engineering

  annotations:
    veridis.xyz/description: "Custom Fluent Bit filters for advanced log processing and compliance"
    veridis.xyz/purpose: "Provides custom filters for PII redaction, security filtering, and compliance processing"

    veridis.xyz/documentation: "https://docs.veridis.xyz/observability/fluent-bit-filters"

data:
  # Custom Lua script for PII redaction
  pii-redaction.lua: |
    function redact_sensitive_data(tag, timestamp, record)
        if record["message"] then
            local message = record["message"]

            -- Credit card number redaction
            message = string.gsub(message, "%d%d%d%d[%s%-]?%d%d%d%d[%s%-]?%d%d%d%d[%s%-]?%d%d%d%d", "****-****-****-****")

            -- Email redaction
            message = string.gsub(message, "[%w%._%+%-]+@[%w%.%-]+%.%w+", "***@***.***")

            -- Phone number redaction
            message = string.gsub(message, "(%+?%d?%d?%d?)%s?%(?(%d%d%d)%)?[%s%-]?(%d%d%d)[%s%-]?(%d%d%d%d)", "%1 (***) ***-****")

            -- SSN redaction
            message = string.gsub(message, "%d%d%d[%-]?%d%d[%-]?%d%d%d%d", "***-**-****")

            -- IP address redaction
            message = string.gsub(message, "%d+%.%d+%.%d+%.%d+", "***.***.***.***")

            record["message"] = message
            record["pii_redacted"] = true
        end
        return 2, timestamp, record
    end

  # Security event detection
  security-detection.lua: |
    function detect_security_events(tag, timestamp, record)
        if record["message"] then
            local message = string.lower(record["message"])
            local security_keywords = {
                "authentication failed",
                "unauthorized access",
                "access denied",
                "security violation",
                "intrusion attempt",
                "malicious activity",
                "suspicious behavior",
                "privilege escalation",
                "data breach",
                "sql injection"
            }

            for _, keyword in ipairs(security_keywords) do
                if string.find(message, keyword) then
                    record["security_event"] = true
                    record["security_level"] = "high"
                    record["alert_required"] = true
                    break
                end
            end
        end
        return 2, timestamp, record
    end

  # Performance metrics extraction
  metrics-extraction.lua: |
    function extract_performance_metrics(tag, timestamp, record)
        if record["message"] then
            local message = record["message"]

            -- Response time extraction
            local response_time = string.match(message, "response_time=([%d%.]+)")
            if response_time then
                record["metrics"] = record["metrics"] or {}
                record["metrics"]["response_time_ms"] = tonumber(response_time)
            end

            -- Memory usage extraction
            local memory_usage = string.match(message, "memory_usage=([%d%.]+)")
            if memory_usage then
                record["metrics"] = record["metrics"] or {}
                record["metrics"]["memory_usage_mb"] = tonumber(memory_usage)
            end

            -- CPU usage extraction
            local cpu_usage = string.match(message, "cpu_usage=([%d%.]+)")
            if cpu_usage then
                record["metrics"] = record["metrics"] or {}
                record["metrics"]["cpu_usage_percent"] = tonumber(cpu_usage)
            end

            -- Error rate extraction
            local error_rate = string.match(message, "error_rate=([%d%.]+)")
            if error_rate then
                record["metrics"] = record["metrics"] or {}
                record["metrics"]["error_rate_percent"] = tonumber(error_rate)
            end
        end
        return 2, timestamp, record
    end

  # Compliance tagging
  compliance-tagging.lua: |
    function add_compliance_tags(tag, timestamp, record)
        -- Add compliance metadata
        record["compliance"] = {
            framework = "gdpr",
            retention_policy = "365d",
            data_classification = "internal",
            processing_purpose = "observability",
            legal_basis = "legitimate_interest"
        }

        -- Add audit trail
        record["audit"] = {
            processed_by = "fluent-bit",
            processing_timestamp = os.time(),
            node_name = os.getenv("NODE_NAME") or "unknown",
            cluster_name = "veridis-production"
        }

        return 2, timestamp, record
    end

# ==============================================================================
# Veridis Fluent Bit ConfigMap Summary and Enterprise Architecture
# ==============================================================================
#
# COMPREHENSIVE VERIDIS FLUENT BIT CONFIGMAP STRATEGY:
# ====================================================
#
# VERIDIS FLUENT BIT CONFIGMAP ARCHITECTURE OVERVIEW:
# ---------------------------------------------------
# 1. Primary Production ConfigMap (veridis-fluent-bit-config):
#    - Comprehensive enterprise-grade configmap with intelligent log configuration and advanced performance optimization for production Fluent Bit
#    - Advanced configmap configuration with multiple input sources, comprehensive filtering, Elasticsearch output, and comprehensive observability integration
#    - Multi-tier configmap architecture with log collection, processing, filtering, and comprehensive operational excellence
#    - Enterprise configmap policies with PII redaction, security filtering, compliance processing, and comprehensive disaster recovery procedures
#    - Performance optimization with intelligent log processing, buffering algorithms, filtering optimization, and security for maximum efficiency
#
# 2. Development Environment ConfigMap (veridis-fluent-bit-config-dev):
#    - Development-focused configmap with simplified configuration and comprehensive testing environment integration
#    - Advanced development configuration with debug logging, stdout output, basic filtering, and comprehensive experimentation support
#    - Flexible configmap optimization with simplified collection, basic processing, and comprehensive development intelligence
#    - Development intelligence with debug procedures, logging support, rapid iteration, and comprehensive development coordination
#    - Testing excellence with debug logging, development workflows, simplified configuration, and comprehensive development environment management
#
# 3. Staging Environment ConfigMap (veridis-fluent-bit-config-staging):
#    - Pre-production configmap with production-like configuration and comprehensive staging environment integration
#    - Staging configuration with comprehensive collection, Elasticsearch output, enhanced filtering, and comprehensive validation procedures
#    - Production-like configmap optimization with log processing, performance testing, and comprehensive staging intelligence
#    - Production simulation with realistic log processing, performance testing, collection validation, and comprehensive pre-production coordination
#    - Validation excellence with production-like behavior, performance testing, log validation, and comprehensive staging environment management
#
# 4. Custom Filters ConfigMap (veridis-fluent-bit-filters):
#    - Filter-focused configmap with custom Lua scripts and comprehensive processing enhancement integration
#    - Advanced filter configuration with PII redaction, security detection, metrics extraction, and comprehensive processing support
#    - Flexible configmap optimization with custom processing, compliance filtering, and comprehensive filter intelligence
#    - Filter intelligence with security procedures, compliance support, data protection, and comprehensive filter coordination
#    - Processing excellence with custom scripts, security filtering, compliance processing, and comprehensive filter environment management
#
# ENTERPRISE FLUENT BIT CONFIGMAP FEATURES:
# =========================================
# Advanced Log Configuration and Performance Integration:
#   - Multi-environment configmap architecture with production, development, staging, and custom filter configurations
#   - Intelligent log configuration with collection algorithms, filtering policies, processing optimization, and comprehensive log decisions
#   - ConfigMap discovery with input optimization, parser management, output policies, and comprehensive logging analytics
#   - Performance management with high throughput (10K logs/sec), low latency, buffer optimization, and comprehensive performance intelligence
#   - Log processing tuning with filter management, parser optimization, output algorithms, and intelligent configmap optimization
#
# Comprehensive Input Source and Collection Integration:
#   - Multi-source collection with systemd logs, Docker containers, Kubernetes pods, system logs, and comprehensive source coordination
#   - Input optimization with tail inputs, systemd integration, audit collection, and comprehensive input intelligence
#   - Source management with path monitoring, database tracking, memory buffering, and comprehensive source coordination
#   - Business intelligence with input analytics, collection correlation, cost optimization, and comprehensive strategic insights
#   - Collection management with refresh intervals, rotation handling, storage optimization, and comprehensive collection analytics
#
# Enterprise Security and Compliance Integration:
#   - PII redaction with credit card filtering, email redaction, phone masking, and comprehensive data protection enforcement
#   - Security filtering with threat detection, access monitoring, audit processing, and comprehensive security management
#   - Compliance processing with GDPR compliance, audit trails, retention policies, and comprehensive compliance management
#   - Data protection with sensitive filtering, encryption support, access control, and comprehensive protection management
#   - Security intelligence with threat detection, compliance monitoring, audit requirements, and comprehensive security analytics
#
# Advanced Parsing and Processing Optimization:
#   - Multi-format parsing with JSON support, regex patterns, multiline handling, and comprehensive parser coordination
#   - Parser optimization with time formatting, field extraction, data transformation, and comprehensive parser intelligence
#   - Processing management with filter chains, enrichment rules, modification scripts, and comprehensive processing coordination
#   - Business intelligence with parsing analytics, processing correlation, performance optimization, and comprehensive strategic insights
#   - Format management with schema validation, field mapping, data standardization, and comprehensive format analytics
#
# OPERATIONAL EXCELLENCE:
# ======================
# Fluent Bit ConfigMap Lifecycle Management:
#   - Multi-ConfigMap deployment with production configuration, development debugging, staging validation, and custom filters
#   - Intelligent configmap management with predictive analytics and log utilization correlation
#   - Advanced monitoring with comprehensive configmap analytics and log business intelligence
#   - Configuration validation with configmap schema enforcement and log deployment safety checks
#   - Automated optimization with configmap pattern analysis and log configuration recommendation engine
#
# Security Integration and Compliance:
#   - SOC 2 Type II configmap controls with comprehensive audit requirements and log logging
#   - GDPR configmap compliance with data protection and privacy-preserving log management
#   - ISO 27001 configmap security management with information security and log compliance integration
#   - NIST 800-190 container configmap security with log validation and compliance
#   - Zero-trust configmap architecture with comprehensive encryption and log authentication requirements
#
# Business Intelligence Integration:
#   - ConfigMap analytics with cost correlation and log resource utilization optimization
#   - Performance analytics with user experience optimization and configmap business intelligence
#   - Log intelligence with processing pattern monitoring and configmap optimization recommendations
#   - Strategic planning with capacity management and configmap forecasting
#   - Business impact assessment with configmap performance correlation and log tracking
#
# Developer Experience Excellence:
#   - Multi-environment configmap support with production configuration, development debugging, staging validation, and custom filters
#   - Comprehensive documentation with configmap guides and log troubleshooting procedures
#   - Environment-specific configmaps with production, development, staging, and filter support
#   - Testing integration with configmap development workflow and log debugging capabilities
#   - ConfigMap monitoring with comprehensive tracking and log correlation
#
# ==============================================================================
