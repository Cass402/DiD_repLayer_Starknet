# ==============================================================================
# Veridis Decentralized Identity Protocol - Fluent Bit DaemonSet Configuration
# ==============================================================================
#
# This manifest defines comprehensive Fluent Bit DaemonSet for the
# decentralized identity protocol, providing:
#
# ENTERPRISE VERIDIS FLUENT BIT DAEMONSET ARCHITECTURE:
#   • Advanced Fluent Bit DaemonSet with intelligent log management and performance-based optimization
#   • Multi-tier DaemonSet architecture with development, testing, staging, and production environments
#   • Comprehensive observability framework with DaemonSet policies, log optimization, Fluent Bit integration
#   • Advanced lifecycle management with automated DaemonSet optimization, Fluent Bit control, and log enhancement
#   • Enterprise-grade intelligence with comprehensive analytics and Fluent Bit DaemonSet performance insights
#
# VERIDIS FLUENT BIT DAEMONSET OPTIMIZATION:
#   • High-performance DaemonSet with intelligent log management and Fluent Bit daemonset optimization
#   • Intelligent DaemonSet log management with responsive policies and performance-based log decisions
#   • Advanced DaemonSet management with business intelligence and log-based Fluent Bit control
#   • Comprehensive observability control with intelligent Fluent Bit DaemonSet management and log enhancement
#   • Enterprise acceleration with predictive Fluent Bit DaemonSet management and log optimization
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II Fluent Bit DaemonSet controls with comprehensive audit and log requirements
#   • GDPR Fluent Bit DaemonSet compliance with data protection, privacy controls, and log management
#   • ISO 27001 Fluent Bit DaemonSet management with comprehensive framework integration
#   • NIST 800-190 container Fluent Bit DaemonSet security with log-specific validation and compliance
#   • Zero-knowledge protocol compliance with regulatory frameworks and Fluent Bit DaemonSet best practices
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent Fluent Bit DaemonSet lifecycle management with automated provisioning and log optimization
#   • Predictive log analytics with capacity planning and Fluent Bit DaemonSet intelligence
#   • Advanced DaemonSet integration with Fluent Bit log analytics and performance business intelligence
#   • Comprehensive observability control with Fluent Bit DaemonSet preservation and log optimization
#   • Business continuity Fluent Bit DaemonSet with log guarantees and performance optimization
#
# FLUENT BIT DAEMONSET ACCELERATION INTELLIGENCE:
#   • Fluent Bit DaemonSet usage analytics with log patterns and optimization recommendations
#   • DaemonSet monitoring with Fluent Bit log latency and management optimization intelligence
#   • Development efficiency with Fluent Bit DaemonSet analytics and deployment optimization procedures
#   • Cost optimization with Fluent Bit DaemonSet utilization analysis and log capacity planning procedures
#   • Quality assurance with Fluent Bit DaemonSet metrics and observability validation procedures
#
# ==============================================================================

# ==============================================================================
# Veridis Fluent Bit DaemonSet - Primary Log Collection Configuration
# ==============================================================================
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: veridis-fluent-bit
  namespace: veridis-infrastructure

  # Core Veridis Fluent Bit DaemonSet identification labels
  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-daemonset
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Fluent Bit DaemonSet specific classification
    fluentbit.veridis.xyz/type: log-fluentbit-daemonset
    fluentbit.veridis.xyz/category: observability-daemonset
    fluentbit.veridis.xyz/role: primary-fluentbit-daemonset
    fluentbit.veridis.xyz/daemonset-class: high-performance-fluentbit-daemonset
    fluentbit.veridis.xyz/security-level: enterprise

    # DaemonSet Fluent Bit DaemonSet classification
    daemonset.veridis.xyz/fluentbit-daemonset-type: intelligent-fluentbit-daemonset
    daemonset.veridis.xyz/daemonset-type: log-daemonset
    daemonset.veridis.xyz/performance-tier: high-throughput
    daemonset.veridis.xyz/optimization: enabled
    daemonset.veridis.xyz/features: full-fluentbit-daemonset-stack

    # Observability Fluent Bit DaemonSet classification
    observability.veridis.xyz/tier: production
    observability.veridis.xyz/optimization: intelligent-fluentbit-daemonset-management
    observability.veridis.xyz/log-management: advanced
    observability.veridis.xyz/performance-optimization: enabled
    observability.veridis.xyz/efficiency: maximum

    # Business Fluent Bit DaemonSet classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/impact: high-fluentbit-daemonset-performance
    business.veridis.xyz/cost-tier: production
    business.veridis.xyz/sla-tier: enterprise
    business.veridis.xyz/availability-requirement: 99.9

    # Operational Fluent Bit DaemonSet labels
    veridis.xyz/environment: production
    veridis.xyz/team: observability-engineering
    veridis.xyz/cost-center: observability-infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "fluentbit-daemonset-control-framework"
    compliance.veridis.xyz/gdpr: "fluentbit-daemonset-data-protection"
    compliance.veridis.xyz/iso27001: "fluentbit-daemonset-security-management"
    compliance.veridis.xyz/nist-800-190: "fluentbit-daemonset-container-security"
    governance.veridis.xyz/policy-enforcement: "enterprise"

    # Fluent Bit DaemonSet analytics and intelligence
    monitoring.veridis.xyz/fluentbit-daemonset-monitoring: "enabled"
    monitoring.veridis.xyz/performance-monitoring: "comprehensive"
    monitoring.veridis.xyz/log-monitoring: "enabled"
    monitoring.veridis.xyz/business-monitoring: "enabled"
    monitoring.veridis.xyz/compliance-monitoring: "enabled"

    # Log management labels
    log.veridis.xyz/type: "aggregator"
    log.veridis.xyz/collection: "node-level"
    log.veridis.xyz/forwarding: "intelligent"
    log.veridis.xyz/filtering: "advanced"
    log.veridis.xyz/enrichment: "enabled"

    # Node affinity labels
    node.veridis.xyz/type: "all-nodes"
    node.veridis.xyz/scheduling: "required"
    node.veridis.xyz/resource-class: "logging"
    node.veridis.xyz/priority: "high"
    node.veridis.xyz/tolerance: "all-taints"

    # Performance labels
    performance.veridis.xyz/throughput-tier: "high"
    performance.veridis.xyz/latency-tier: "low"
    performance.veridis.xyz/concurrency-tier: "high"
    performance.veridis.xyz/optimization-enabled: "true"
    performance.veridis.xyz/resource-optimization: "enabled"

  annotations:
    # Fluent Bit DaemonSet purpose and specifications
    veridis.xyz/description: "Enterprise Veridis Fluent Bit DaemonSet with intelligent log management, advanced performance optimization, and comprehensive observability optimization"
    veridis.xyz/purpose: "Provides comprehensive Fluent Bit DaemonSet for decentralized identity management with intelligent log management, performance optimization, and observability guarantees"
    veridis.xyz/scope: "Fluent Bit DaemonSet including log management, performance optimization, node coverage, and comprehensive monitoring intelligence"

    # Fluent Bit DaemonSet architecture and design
    fluentbit.veridis.xyz/architecture: "Enterprise Fluent Bit DaemonSet with intelligent log management, advanced performance optimization, and node integration optimization"
    fluentbit.veridis.xyz/design-pattern: "Multi-tier Fluent Bit DaemonSet with performance optimization, cost efficiency, and business intelligence"
    fluentbit.veridis.xyz/optimization-model: "Intelligent Fluent Bit DaemonSet with predictive analytics, performance optimization, and log efficiency"
    fluentbit.veridis.xyz/performance-model: "High-performance Fluent Bit DaemonSet with log optimization and intelligent node management"

    # DaemonSet Fluent Bit DaemonSet specifications
    daemonset.veridis.xyz/fluentbit-daemonset-specification: "Fluent Bit DaemonSet with performance optimization and intelligent fluentbit daemonset management"
    daemonset.veridis.xyz/log-specification: "Advanced log management configuration with fluentbit optimization and daemonset enhancement"
    daemonset.veridis.xyz/node-specification: "Fluent Bit DaemonSet node management optimization with intelligent log and enhancement"
    daemonset.veridis.xyz/performance-specification: "Fluent Bit performance daemonset with log acceleration and efficiency"
    daemonset.veridis.xyz/business-specification: "Fluent Bit business daemonset with cost optimization and strategic log intelligence"

    # Log specific annotations
    log.veridis.xyz/collection-mode: "comprehensive"
    log.veridis.xyz/forwarding-protocol: "forward"
    log.veridis.xyz/buffer-size: "32MB"
    log.veridis.xyz/flush-interval: "5s"
    log.veridis.xyz/retry-limit: "5"

    # Performance annotations
    performance.veridis.xyz/expected-logs-per-second: "10000"
    performance.veridis.xyz/max-log-size: "64KB"
    performance.veridis.xyz/batch-size: "1000"
    performance.veridis.xyz/worker-threads: "4"
    performance.veridis.xyz/memory-buffer: "128MB"

    # Node coverage annotations
    node.veridis.xyz/coverage: "all-nodes"
    node.veridis.xyz/scheduling-policy: "required"
    node.veridis.xyz/host-access: "read-only"
    node.veridis.xyz/volume-access: "logs-only"
    node.veridis.xyz/network-access: "cluster-internal"

    # Security annotations
    security.veridis.xyz/host-access: "read-only"
    security.veridis.xyz/privileged: "false"
    security.veridis.xyz/host-network: "false"
    security.veridis.xyz/host-pid: "false"
    security.veridis.xyz/log-filtering: "enabled"

    # Business annotations
    business.veridis.xyz/cost-center: "observability-infrastructure"
    business.veridis.xyz/budget-allocation: "production-logging"
    business.veridis.xyz/cost-optimization: "enabled"
    business.veridis.xyz/usage-tracking: "comprehensive"
    business.veridis.xyz/roi-tracking: "enabled"

    # Monitoring annotations
    monitoring.veridis.xyz/daemonset-monitoring: "enabled"
    monitoring.veridis.xyz/performance-alerts: "enabled"
    monitoring.veridis.xyz/capacity-alerts: "enabled"
    monitoring.veridis.xyz/error-rate-alerts: "enabled"
    monitoring.veridis.xyz/latency-alerts: "enabled"

    # Documentation and procedures
    veridis.xyz/owner: "observability-team@veridis.xyz"
    veridis.xyz/fluentbit-daemonset-admin: "observability-admin@veridis.xyz"
    veridis.xyz/escalation: "observability-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "observability-oncall@veridis.xyz"

    # Documentation references
    veridis.xyz/documentation: "https://docs.veridis.xyz/observability/fluent-bit-daemonset"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/observability/fluent-bit-daemonset-management"
    veridis.xyz/daemonset-docs: "https://observability.veridis.xyz/fluent-bit-daemonset-guide"
    veridis.xyz/observability-docs: "https://observability.veridis.xyz/fluent-bit-daemonset-monitoring"

spec:
  # ==============================================================================
  # Pod Selection Configuration
  # ==============================================================================
  selector:
    matchLabels:
      app.kubernetes.io/name: fluent-bit
      app.kubernetes.io/instance: veridis-production
      app.kubernetes.io/component: fluent-bit-daemonset

  # ==============================================================================
  # Update Strategy Configuration
  # ==============================================================================
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%  # Allow 25% of nodes to be unavailable during updates
      maxSurge: 0  # DaemonSets don't support maxSurge

  # ==============================================================================
  # Pod Template Configuration
  # ==============================================================================
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fluent-bit
        app.kubernetes.io/instance: veridis-production
        app.kubernetes.io/version: "2.2.2"
        app.kubernetes.io/component: fluent-bit-daemonset
        app.kubernetes.io/part-of: veridis-protocol

        # Fluent Bit specific labels
        fluentbit.veridis.xyz/collection-mode: "comprehensive"
        fluentbit.veridis.xyz/forwarding-enabled: "true"
        fluentbit.veridis.xyz/filtering-enabled: "true"
        fluentbit.veridis.xyz/enrichment-enabled: "true"

        # Network and security labels
        network.veridis.xyz/allow-ingress: "limited"
        network.veridis.xyz/allow-egress: "true"
        security.veridis.xyz/context: "observability"

        veridis.xyz/environment: production
        veridis.xyz/team: observability-engineering

      annotations:
        # Pod specific annotations
        fluentbit.veridis.xyz/pod-type: "log-collector"
        fluentbit.veridis.xyz/collection-enabled: "true"
        fluentbit.veridis.xyz/node-access: "read-only"
        fluentbit.veridis.xyz/host-volumes: "logs-only"

        # Performance annotations
        performance.veridis.xyz/cpu-intensive: "false"
        performance.veridis.xyz/memory-intensive: "true"
        performance.veridis.xyz/network-intensive: "true"
        performance.veridis.xyz/io-intensive: "true"

        # Monitoring annotations
        prometheus.io/scrape: "true"
        prometheus.io/port: "2020"
        prometheus.io/path: "/api/v1/metrics/prometheus"

        # Security annotations
        container.apparmor.security.beta.kubernetes.io/fluent-bit: "runtime/default"

        # Backup annotations
        backup.veridis.xyz/enabled: "false"  # Logs are ephemeral
        backup.veridis.xyz/config-backup: "true"

    spec:
      # ==============================================================================
      # Security Context Configuration
      # ==============================================================================
      securityContext:
        # Pod-level security context
        runAsNonRoot: true
        runAsUser: 2020
        runAsGroup: 2020
        fsGroup: 2020
        fsGroupChangePolicy: "OnRootMismatch"

        # Security enhancements
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [2020]

      # ==============================================================================
      # Service Account Configuration
      # ==============================================================================
      serviceAccountName: veridis-fluent-bit

      # ==============================================================================
      # DNS and Hostname Configuration
      # ==============================================================================
      dnsPolicy: ClusterFirst
      hostNetwork: false
      hostPID: false
      hostIPC: false

      # ==============================================================================
      # Scheduling and Affinity Configuration
      # ==============================================================================
      # Node selection preferences
      nodeSelector:
        kubernetes.io/os: linux

      # Tolerations for all nodes including control plane
      tolerations:
        # Control plane tolerations
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule

        # GPU node tolerations
        - key: nvidia.com/gpu
          operator: Exists
          effect: NoSchedule

        # Observability node tolerations
        - key: "veridis.xyz/observability"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"

        # Generic taints
        - operator: Exists
          effect: NoExecute
          tolerationSeconds: 300
        - operator: Exists
          effect: NoSchedule

      # ==============================================================================
      # Priority and Scheduling Configuration
      # ==============================================================================
      priorityClassName: veridis-observability-high

      # Termination settings
      terminationGracePeriodSeconds: 60

      # ==============================================================================
      # Init Container Configuration
      # ==============================================================================
      initContainers:
        - name: init-fluent-bit
          image: busybox:1.36.1
          imagePullPolicy: IfNotPresent

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2020
            runAsGroup: 2020
            capabilities:
              drop: ["ALL"]

          command:
            - /bin/sh
            - -c
            - |
              set -e

              echo "Initializing Fluent Bit configuration..."

              # Validate configuration files
              if [ -f /fluent-bit/etc/fluent-bit.conf ]; then
                echo "Main configuration file found"
              else
                echo "ERROR: Main configuration file not found"
                exit 1
              fi

              # Check log directories accessibility
              echo "Checking log directories..."
              if [ -d /var/log ]; then
                echo "Host log directory accessible"
              else
                echo "WARNING: Host log directory not accessible"
              fi

              if [ -d /var/lib/docker/containers ]; then
                echo "Docker container logs accessible"
              else
                echo "WARNING: Docker container logs not accessible"
              fi

              # Create runtime directories
              echo "Creating runtime directories..."
              mkdir -p /fluent-bit/cache
              mkdir -p /fluent-bit/buffer
              chmod 755 /fluent-bit/cache /fluent-bit/buffer

              echo "Fluent Bit initialization completed successfully"

          volumeMounts:
            - name: fluent-bit-config
              mountPath: /fluent-bit/etc
              readOnly: true
            - name: fluent-bit-cache
              mountPath: /fluent-bit/cache
            - name: fluent-bit-buffer
              mountPath: /fluent-bit/buffer

          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 100m
              memory: 128Mi

      # ==============================================================================
      # Container Configuration
      # ==============================================================================
      containers:
        - name: fluent-bit
          image: fluent/fluent-bit:2.2.2
          imagePullPolicy: IfNotPresent

          # ==============================================================================
          # Container Security Context
          # ==============================================================================
          securityContext:
            # Container-level security
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2020
            runAsGroup: 2020

            # Capabilities
            capabilities:
              drop:
                - ALL

            # Security profiles
            seccompProfile:
              type: RuntimeDefault

          # ==============================================================================
          # Command and Arguments Configuration
          # ==============================================================================
          command:
            - /fluent-bit/bin/fluent-bit

          args:
            # Configuration
            - "--config=/fluent-bit/etc/fluent-bit.conf"
            - "--log-level=info"
            - "--enable-hot-reload"

            # Performance tuning
            - "--http-server"
            - "--http-listen=0.0.0.0"
            - "--http-port=2020"

            # Storage
            - "--storage.path=/fluent-bit/cache"
            - "--storage.sync=normal"
            - "--storage.checksum=off"
            - "--storage.backlog.mem_limit=128MB"

            # Parser configuration
            - "--parser=/fluent-bit/etc/parsers.conf"

            # Verbose mode for debugging (can be controlled via config)
            # - "--verbose"

          # ==============================================================================
          # Environment Variables Configuration
          # ==============================================================================
          env:
            # Node information
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName

            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP

            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace

            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP

            # Fluent Bit configuration
            - name: FLUENT_ELASTICSEARCH_HOST
              value: "elasticsearch.veridis-infrastructure.svc.cluster.local"

            - name: FLUENT_ELASTICSEARCH_PORT
              value: "9200"

            - name: FLUENT_ELASTICSEARCH_SCHEME
              value: "http"

            - name: FLUENT_ELASTICSEARCH_USER
              valueFrom:
                secretKeyRef:
                  name: veridis-fluent-bit-secret
                  key: elasticsearch-username

            - name: FLUENT_ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: veridis-fluent-bit-secret
                  key: elasticsearch-password

            # Performance configuration
            - name: FLUENT_FLUSH_INTERVAL
              value: "5"

            - name: FLUENT_BUFFER_CHUNK_SIZE
              value: "1MB"

            - name: FLUENT_BUFFER_MAX_SIZE
              value: "32MB"

            - name: FLUENT_MEM_BUF_LIMIT
              value: "128MB"

            - name: FLUENT_WORKERS
              value: "4"

            # Log level and debugging
            - name: FLUENT_LOG_LEVEL
              value: "info"

            # Kubernetes API
            - name: KUBERNETES_SERVICE_HOST
              value: "kubernetes.default.svc.cluster.local"

            - name: KUBERNETES_SERVICE_PORT
              value: "443"

          # ==============================================================================
          # Port Configuration
          # ==============================================================================
          ports:
            # HTTP server for metrics and health checks
            - name: http
              containerPort: 2020
              protocol: TCP

            # Forward protocol port
            - name: forward
              containerPort: 24224
              protocol: TCP

          # ==============================================================================
          # Health Check Configuration
          # ==============================================================================
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1

          readinessProbe:
            httpGet:
              path: /api/v1/health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1

          startupProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 20
            successThreshold: 1

          # ==============================================================================
          # Resource Management Configuration
          # ==============================================================================
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
              ephemeral-storage: 1Gi
            limits:
              cpu: 500m
              memory: 512Mi
              ephemeral-storage: 4Gi

          # ==============================================================================
          # Volume Mounts Configuration
          # ==============================================================================
          volumeMounts:
            # Configuration volume
            - name: fluent-bit-config
              mountPath: /fluent-bit/etc
              readOnly: true

            # Host log directories
            - name: varlog
              mountPath: /var/log
              readOnly: true

            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true

            - name: etcmachineid
              mountPath: /etc/machine-id
              readOnly: true

            # Kubernetes logs
            - name: kubernetes-logs
              mountPath: /var/log/pods
              readOnly: true

            # Cache and buffer storage
            - name: fluent-bit-cache
              mountPath: /fluent-bit/cache

            - name: fluent-bit-buffer
              mountPath: /fluent-bit/buffer

            # Temporary storage
            - name: tmp
              mountPath: /tmp

      # ==============================================================================
      # Volume Configuration
      # ==============================================================================
      volumes:
        # Configuration volume
        - name: fluent-bit-config
          configMap:
            name: veridis-fluent-bit-config
            defaultMode: 0644

        # Host log directories
        - name: varlog
          hostPath:
            path: /var/log
            type: Directory

        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
            type: DirectoryOrCreate

        - name: etcmachineid
          hostPath:
            path: /etc/machine-id
            type: File

        # Kubernetes logs
        - name: kubernetes-logs
          hostPath:
            path: /var/log/pods
            type: DirectoryOrCreate

        # Cache and buffer storage
        - name: fluent-bit-cache
          emptyDir:
            sizeLimit: 1Gi

        - name: fluent-bit-buffer
          emptyDir:
            sizeLimit: 2Gi

        # Temporary storage
        - name: tmp
          emptyDir:
            sizeLimit: 512Mi

      # ==============================================================================
      # Image Pull Configuration
      # ==============================================================================
      imagePullSecrets:
        - name: veridis-registry-secret

---
# ==============================================================================
# Veridis Fluent Bit DaemonSet - Development Environment Configuration
# ==============================================================================
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: veridis-fluent-bit-dev
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-development
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-daemonset-dev
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    fluentbit.veridis.xyz/type: log-fluentbit-daemonset-dev
    fluentbit.veridis.xyz/category: observability-daemonset-dev
    fluentbit.veridis.xyz/role: development-fluentbit-daemonset

    daemonset.veridis.xyz/type: "development"
    daemonset.veridis.xyz/log-level: "debug"
    daemonset.veridis.xyz/performance-tier: "basic"

    veridis.xyz/environment: development
    veridis.xyz/team: observability-engineering

  annotations:
    veridis.xyz/description: "Development Fluent Bit DaemonSet with simplified configuration for testing environment"
    veridis.xyz/purpose: "Provides development Fluent Bit DaemonSet for testing and development workflows"

    log.veridis.xyz/collection-mode: "basic"
    log.veridis.xyz/forwarding-protocol: "stdout"
    log.veridis.xyz/buffer-size: "8MB"
    log.veridis.xyz/flush-interval: "1s"

    # Development specific annotations
    development.veridis.xyz/testing-enabled: "true"
    development.veridis.xyz/debug-logging: "true"
    development.veridis.xyz/performance-relaxed: "true"
    development.veridis.xyz/cost-optimized: "true"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "development-environment-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/observability/fluent-bit-daemonset-development"

spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: fluent-bit
      app.kubernetes.io/instance: veridis-development
      app.kubernetes.io/component: fluent-bit-daemonset-dev

  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 50%  # More aggressive updates for development

  template:
    metadata:
      labels:
        app.kubernetes.io/name: fluent-bit
        app.kubernetes.io/instance: veridis-development
        app.kubernetes.io/version: "2.2.2"
        app.kubernetes.io/component: fluent-bit-daemonset-dev
        app.kubernetes.io/part-of: veridis-protocol

        fluentbit.veridis.xyz/collection-mode: "basic"
        fluentbit.veridis.xyz/debug-enabled: "true"

        veridis.xyz/environment: development
        veridis.xyz/team: observability-engineering

      annotations:
        fluentbit.veridis.xyz/pod-type: "log-collector-dev"
        fluentbit.veridis.xyz/debug-mode: "enabled"

        prometheus.io/scrape: "true"
        prometheus.io/port: "2020"
        prometheus.io/path: "/api/v1/metrics/prometheus"

    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 2020
        runAsGroup: 2020
        fsGroup: 2020

      serviceAccountName: veridis-fluent-bit

      # Relaxed scheduling for development
      nodeSelector:
        kubernetes.io/os: linux

      tolerations:
        - operator: Exists
          effect: NoSchedule

      priorityClassName: veridis-observability-low

      containers:
        - name: fluent-bit
          image: fluent/fluent-bit:2.2.2
          imagePullPolicy: IfNotPresent

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2020
            runAsGroup: 2020
            capabilities:
              drop: ["ALL"]

          args:
            - "--config=/fluent-bit/etc/fluent-bit.conf"
            - "--log-level=debug"
            - "--enable-hot-reload"
            - "--http-server"
            - "--http-listen=0.0.0.0"
            - "--http-port=2020"

          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: FLUENT_LOG_LEVEL
              value: "debug"
            - name: FLUENT_OUTPUT
              value: "stdout"

          ports:
            - name: http
              containerPort: 2020
              protocol: TCP

          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 15
            periodSeconds: 30

          readinessProbe:
            httpGet:
              path: /api/v1/health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10

          # Reduced resources for development
          resources:
            requests:
              cpu: 50m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi

          volumeMounts:
            - name: fluent-bit-config
              mountPath: /fluent-bit/etc
              readOnly: true
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: tmp
              mountPath: /tmp

      volumes:
        - name: fluent-bit-config
          configMap:
            name: veridis-fluent-bit-config-dev
        - name: varlog
          hostPath:
            path: /var/log
        - name: tmp
          emptyDir:
            sizeLimit: 256Mi

---
# ==============================================================================
# Veridis Fluent Bit DaemonSet - Staging Environment Configuration
# ==============================================================================
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: veridis-fluent-bit-staging
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-staging
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-daemonset-staging
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    fluentbit.veridis.xyz/type: log-fluentbit-daemonset-staging
    fluentbit.veridis.xyz/category: observability-daemonset-staging
    fluentbit.veridis.xyz/role: staging-fluentbit-daemonset

    daemonset.veridis.xyz/type: "staging"
    daemonset.veridis.xyz/log-level: "info"
    daemonset.veridis.xyz/performance-tier: "enhanced"

    veridis.xyz/environment: staging
    veridis.xyz/team: observability-engineering

  annotations:
    veridis.xyz/description: "Staging Fluent Bit DaemonSet with production-like configuration for pre-production testing"
    veridis.xyz/purpose: "Provides staging Fluent Bit DaemonSet for pre-production validation and testing"

    log.veridis.xyz/collection-mode: "comprehensive"
    log.veridis.xyz/forwarding-protocol: "forward"
    log.veridis.xyz/buffer-size: "16MB"
    log.veridis.xyz/flush-interval: "3s"

    # Staging specific annotations
    staging.veridis.xyz/production-like: "true"
    staging.veridis.xyz/performance-enhanced: "true"
    staging.veridis.xyz/load-testing-ready: "true"
    staging.veridis.xyz/monitoring-enhanced: "true"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "staging-environment-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/observability/fluent-bit-daemonset-staging"

spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: fluent-bit
      app.kubernetes.io/instance: veridis-staging
      app.kubernetes.io/component: fluent-bit-daemonset-staging

  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 33%

  template:
    metadata:
      labels:
        app.kubernetes.io/name: fluent-bit
        app.kubernetes.io/instance: veridis-staging
        app.kubernetes.io/version: "2.2.2"
        app.kubernetes.io/component: fluent-bit-daemonset-staging
        app.kubernetes.io/part-of: veridis-protocol

        fluentbit.veridis.xyz/collection-mode: "comprehensive"
        fluentbit.veridis.xyz/forwarding-enabled: "true"

        veridis.xyz/environment: staging
        veridis.xyz/team: observability-engineering

      annotations:
        fluentbit.veridis.xyz/pod-type: "log-collector-staging"
        fluentbit.veridis.xyz/production-like: "true"

        prometheus.io/scrape: "true"
        prometheus.io/port: "2020"
        prometheus.io/path: "/api/v1/metrics/prometheus"

    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 2020
        runAsGroup: 2020
        fsGroup: 2020
        seccompProfile:
          type: RuntimeDefault

      serviceAccountName: veridis-fluent-bit

      # Production-like scheduling for staging
      nodeSelector:
        kubernetes.io/os: linux

      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: "veridis.xyz/observability"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
        - operator: Exists
          effect: NoSchedule

      priorityClassName: veridis-observability-medium

      containers:
        - name: fluent-bit
          image: fluent/fluent-bit:2.2.2
          imagePullPolicy: IfNotPresent

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2020
            runAsGroup: 2020
            capabilities:
              drop: ["ALL"]

          args:
            - "--config=/fluent-bit/etc/fluent-bit.conf"
            - "--log-level=info"
            - "--enable-hot-reload"
            - "--http-server"
            - "--http-listen=0.0.0.0"
            - "--http-port=2020"
            - "--storage.path=/fluent-bit/cache"

          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: FLUENT_ELASTICSEARCH_HOST
              value: "elasticsearch.veridis-infrastructure.svc.cluster.local"
            - name: FLUENT_LOG_LEVEL
              value: "info"

          ports:
            - name: http
              containerPort: 2020
              protocol: TCP
            - name: forward
              containerPort: 24224
              protocol: TCP

          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30

          readinessProbe:
            httpGet:
              path: /api/v1/health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10

          # Production-like resources for staging
          resources:
            requests:
              cpu: 150m
              memory: 192Mi
            limits:
              cpu: 400m
              memory: 384Mi

          volumeMounts:
            - name: fluent-bit-config
              mountPath: /fluent-bit/etc
              readOnly: true
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: fluent-bit-cache
              mountPath: /fluent-bit/cache
            - name: tmp
              mountPath: /tmp

      volumes:
        - name: fluent-bit-config
          configMap:
            name: veridis-fluent-bit-config-staging
        - name: varlog
          hostPath:
            path: /var/log
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: fluent-bit-cache
          emptyDir:
            sizeLimit: 512Mi
        - name: tmp
          emptyDir:
            sizeLimit: 256Mi

# ==============================================================================
# Veridis Fluent Bit DaemonSet Summary and Enterprise Architecture
# ==============================================================================
#
# COMPREHENSIVE VERIDIS FLUENT BIT DAEMONSET STRATEGY:
# ====================================================
#
# VERIDIS FLUENT BIT DAEMONSET ARCHITECTURE OVERVIEW:
# ---------------------------------------------------
# 1. Primary Production DaemonSet (veridis-fluent-bit):
#    - Comprehensive enterprise-grade daemonset with intelligent log management and advanced performance optimization for production Fluent Bit
#    - Advanced daemonset configuration with all-node coverage, comprehensive log collection, Elasticsearch forwarding, and comprehensive observability integration
#    - Multi-tier daemonset architecture with host volume access, log filtering, performance buffering, and comprehensive operational excellence
#    - Enterprise daemonset policies with security contexts, resource limits, health monitoring, and comprehensive disaster recovery procedures
#    - Performance optimization with intelligent log processing, buffering algorithms, filtering optimization, and security for maximum efficiency
#
# 2. Development Environment DaemonSet (veridis-fluent-bit-dev):
#    - Development-focused daemonset with simplified configuration and comprehensive testing environment integration
#    - Advanced development configuration with debug logging, stdout output, relaxed resources, and comprehensive experimentation support
#    - Flexible daemonset optimization with simplified collection, basic forwarding, and comprehensive development intelligence
#    - Development intelligence with debug procedures, logging support, rapid iteration, and comprehensive development coordination
#    - Testing excellence with debug logging, development workflows, simplified configuration, and comprehensive development environment management
#
# 3. Staging Environment DaemonSet (veridis-fluent-bit-staging):
#    - Pre-production daemonset with production-like configuration and comprehensive staging environment integration
#    - Staging configuration with comprehensive collection, Elasticsearch forwarding, enhanced resources, and comprehensive validation procedures
#    - Production-like daemonset optimization with log collection, performance testing, and comprehensive staging intelligence
#    - Production simulation with realistic log processing, performance testing, collection validation, and comprehensive pre-production coordination
#    - Validation excellence with production-like behavior, performance testing, log validation, and comprehensive staging environment management
#
# ENTERPRISE FLUENT BIT DAEMONSET FEATURES:
# =========================================
# Advanced Log Management and Performance Integration:
#   - Multi-environment daemonset architecture with production, development, and staging configurations
#   - Intelligent log management with collection algorithms, filtering policies, forwarding optimization, and comprehensive log decisions
#   - DaemonSet discovery with node coverage optimization, volume management, scheduling policies, and comprehensive logging analytics
#   - Performance management with high throughput (10K logs/sec), low latency, concurrent processing, and comprehensive performance intelligence
#   - Log processing tuning with buffer management, flush intervals, filtering algorithms, and intelligent daemonset optimization
#
# Comprehensive Node Coverage and Host Access Integration:
#   - All-node scheduling with control plane tolerations, GPU node support, observability node access, and comprehensive node coordination
#   - Host volume optimization with read-only access, log directory mounting, container log access, and comprehensive host intelligence
#   - Security management with non-privileged execution, capability dropping, secure contexts, and comprehensive security coordination
#   - Business intelligence with node analytics, resource correlation, cost optimization, and comprehensive strategic insights
#   - Coverage management with scheduling policies, node affinity, tolerance configuration, and comprehensive coverage analytics
#
# Enterprise Security and Compliance Integration:
#   - Host access management with read-only mounting, secure volume access, limited privileges, and comprehensive security enforcement
#   - Log filtering with sensitive data protection, compliance filtering, PII redaction, and comprehensive security management
#   - Access control with service accounts, RBAC integration, security contexts, and comprehensive access management
#   - Security monitoring with threat detection, access tracking, compliance validation, and comprehensive security management
#   - Compliance intelligence with audit trails, log retention, data protection, and comprehensive compliance analytics
#
# Advanced Buffer Management and Performance Optimization:
#   - Multi-tier buffering with memory buffers, disk caching, queue management, and comprehensive buffer coordination
#   - Buffer optimization with chunk sizing, flush intervals, retry policies, and comprehensive buffer intelligence
#   - Performance management with worker threads, concurrent processing, memory optimization, and comprehensive performance coordination
#   - Business intelligence with buffer analytics, performance correlation, cost optimization, and comprehensive strategic insights
#   - Resource management with memory limits, disk allocation, CPU optimization, and comprehensive resource analytics
#
# OPERATIONAL EXCELLENCE:
# ======================
# Fluent Bit DaemonSet Lifecycle Management:
#   - Multi-DaemonSet deployment with production coverage, development flexibility, staging validation, and comprehensive daemonset coordination
#   - Intelligent daemonset management with predictive analytics and log utilization correlation
#   - Advanced monitoring with comprehensive daemonset analytics and log business intelligence
#   - Configuration validation with daemonset schema enforcement and log deployment safety checks
#   - Automated optimization with daemonset pattern analysis and log configuration recommendation engine
#
# Security Integration and Compliance:
#   - SOC 2 Type II daemonset controls with comprehensive audit requirements and log logging
#   - GDPR daemonset compliance with data protection and privacy-preserving log management
#   - ISO 27001 daemonset security management with information security and log compliance integration
#   - NIST 800-190 container daemonset security with log validation and compliance
#   - Zero-trust daemonset architecture with comprehensive encryption and log authentication requirements
#
# Business Intelligence Integration:
#   - DaemonSet analytics with cost correlation and log resource utilization optimization
#   - Performance analytics with user experience optimization and daemonset business intelligence
#   - Log intelligence with processing pattern monitoring and daemonset optimization recommendations
#   - Strategic planning with capacity management and daemonset forecasting
#   - Business impact assessment with daemonset performance correlation and log tracking
#
# Developer Experience Excellence:
#   - Multi-environment daemonset support with production coverage, development debugging, staging validation, and comprehensive daemonset coordination
#   - Comprehensive documentation with daemonset guides and log troubleshooting procedures
#   - Environment-specific daemonsets with production, development, and staging support
#   - Testing integration with daemonset development workflow and log debugging capabilities
#   - DaemonSet monitoring with comprehensive tracking and log correlation
#
# ==============================================================================
