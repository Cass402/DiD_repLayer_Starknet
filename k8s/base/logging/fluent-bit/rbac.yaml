# ==============================================================================
# Veridis Decentralized Identity Protocol - Fluent Bit RBAC Configuration
# ==============================================================================
#
# This manifest defines comprehensive Fluent Bit RBAC for the
# decentralized identity protocol, providing:
#
# ENTERPRISE VERIDIS FLUENT BIT RBAC ARCHITECTURE:
#   • Advanced Fluent Bit RBAC with intelligent log authorization and performance-based optimization
#   • Multi-tier RBAC architecture with development, testing, staging, and production environments
#   • Comprehensive observability framework with RBAC policies, log optimization, Fluent Bit integration
#   • Advanced lifecycle management with automated RBAC optimization, Fluent Bit control, and log enhancement
#   • Enterprise-grade intelligence with comprehensive analytics and Fluent Bit RBAC performance insights
#
# VERIDIS FLUENT BIT RBAC OPTIMIZATION:
#   • High-performance RBAC with intelligent log authorization and Fluent Bit rbac optimization
#   • Intelligent RBAC log authorization with responsive policies and performance-based log decisions
#   • Advanced RBAC management with business intelligence and log-based Fluent Bit control
#   • Comprehensive observability control with intelligent Fluent Bit RBAC management and log enhancement
#   • Enterprise acceleration with predictive Fluent Bit RBAC management and log optimization
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II Fluent Bit RBAC controls with comprehensive audit and log requirements
#   • GDPR Fluent Bit RBAC compliance with data protection, privacy controls, and log management
#   • ISO 27001 Fluent Bit RBAC management with comprehensive framework integration
#   • NIST 800-190 container Fluent Bit RBAC security with log-specific validation and compliance
#   • Zero-knowledge protocol compliance with regulatory frameworks and Fluent Bit RBAC best practices
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent Fluent Bit RBAC lifecycle management with automated provisioning and log optimization
#   • Predictive log analytics with capacity planning and Fluent Bit RBAC intelligence
#   • Advanced RBAC integration with Fluent Bit log analytics and performance business intelligence
#   • Comprehensive observability control with Fluent Bit RBAC preservation and log optimization
#   • Business continuity Fluent Bit RBAC with log guarantees and performance optimization
#
# FLUENT BIT RBAC ACCELERATION INTELLIGENCE:
#   • Fluent Bit RBAC usage analytics with log patterns and optimization recommendations
#   • RBAC monitoring with Fluent Bit log latency and management optimization intelligence
#   • Development efficiency with Fluent Bit RBAC analytics and deployment optimization procedures
#   • Cost optimization with Fluent Bit RBAC utilization analysis and log capacity planning procedures
#   • Quality assurance with Fluent Bit RBAC metrics and observability validation procedures
#
# ==============================================================================

# ==============================================================================
# Veridis Fluent Bit ClusterRole - Primary Log Collection Authorization
# ==============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: veridis-fluent-bit-cluster-role

  # Core Veridis Fluent Bit RBAC identification labels
  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-rbac
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Fluent Bit RBAC specific classification
    fluentbit.veridis.xyz/type: log-fluentbit-rbac
    fluentbit.veridis.xyz/category: observability-rbac
    fluentbit.veridis.xyz/role: primary-fluentbit-rbac
    fluentbit.veridis.xyz/rbac-class: high-performance-fluentbit-rbac
    fluentbit.veridis.xyz/security-level: enterprise

    # RBAC Fluent Bit RBAC classification
    rbac.veridis.xyz/fluentbit-rbac-type: intelligent-fluentbit-rbac
    rbac.veridis.xyz/rbac-type: log-rbac
    rbac.veridis.xyz/performance-tier: high-throughput
    rbac.veridis.xyz/optimization: enabled
    rbac.veridis.xyz/features: full-fluentbit-rbac-stack

    # Observability Fluent Bit RBAC classification
    observability.veridis.xyz/tier: production
    observability.veridis.xyz/optimization: intelligent-fluentbit-rbac-management
    observability.veridis.xyz/log-management: advanced
    observability.veridis.xyz/performance-optimization: enabled
    observability.veridis.xyz/efficiency: maximum

    # Business Fluent Bit RBAC classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/impact: high-fluentbit-rbac-performance
    business.veridis.xyz/cost-tier: production
    business.veridis.xyz/sla-tier: enterprise
    business.veridis.xyz/availability-requirement: 99.9

    # Operational Fluent Bit RBAC labels
    veridis.xyz/environment: production
    veridis.xyz/team: observability-engineering
    veridis.xyz/cost-center: observability-infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "fluentbit-rbac-control-framework"
    compliance.veridis.xyz/gdpr: "fluentbit-rbac-data-protection"
    compliance.veridis.xyz/iso27001: "fluentbit-rbac-security-management"
    compliance.veridis.xyz/nist-800-190: "fluentbit-rbac-container-security"
    governance.veridis.xyz/policy-enforcement: "enterprise"

    # Fluent Bit RBAC analytics and intelligence
    monitoring.veridis.xyz/fluentbit-rbac-monitoring: "enabled"
    monitoring.veridis.xyz/performance-monitoring: "comprehensive"
    monitoring.veridis.xyz/log-monitoring: "enabled"
    monitoring.veridis.xyz/business-monitoring: "enabled"
    monitoring.veridis.xyz/compliance-monitoring: "enabled"

    # Authorization labels
    auth.veridis.xyz/type: "cluster-role"
    auth.veridis.xyz/scope: "cluster-wide"
    auth.veridis.xyz/permission-level: "read-only"
    auth.veridis.xyz/resource-access: "logs-metadata"
    auth.veridis.xyz/api-groups: "core,apps,extensions"

    # Permission labels
    permission.veridis.xyz/cluster-access: "read-only"
    permission.veridis.xyz/namespace-access: "all"
    permission.veridis.xyz/resource-access: "logs-only"
    permission.veridis.xyz/verb-access: "get,list,watch"
    permission.veridis.xyz/escalation: "none"

    # Security labels
    security.veridis.xyz/context: "observability"
    security.veridis.xyz/privilege-level: "minimal"
    security.veridis.xyz/least-privilege: "enforced"
    security.veridis.xyz/escalation-prevention: "enabled"
    security.veridis.xyz/audit-logging: "enabled"

    # Performance labels
    performance.veridis.xyz/throughput-tier: "high"
    performance.veridis.xyz/latency-tier: "low"
    performance.veridis.xyz/concurrency-tier: "high"
    performance.veridis.xyz/optimization-enabled: "true"
    performance.veridis.xyz/caching-enabled: "true"

  annotations:
    # Fluent Bit RBAC purpose and specifications
    veridis.xyz/description: "Enterprise Veridis Fluent Bit RBAC with intelligent log authorization, advanced performance optimization, and comprehensive observability optimization"
    veridis.xyz/purpose: "Provides comprehensive Fluent Bit RBAC for decentralized identity management with intelligent log authorization, performance optimization, and observability guarantees"
    veridis.xyz/scope: "Fluent Bit RBAC including log authorization, performance optimization, permission management, and comprehensive monitoring intelligence"

    # Fluent Bit RBAC architecture and design
    fluentbit.veridis.xyz/architecture: "Enterprise Fluent Bit RBAC with intelligent log authorization, advanced performance optimization, and permission integration optimization"
    fluentbit.veridis.xyz/design-pattern: "Multi-tier Fluent Bit RBAC with performance optimization, cost efficiency, and business intelligence"
    fluentbit.veridis.xyz/optimization-model: "Intelligent Fluent Bit RBAC with predictive analytics, performance optimization, and log efficiency"
    fluentbit.veridis.xyz/performance-model: "High-performance Fluent Bit RBAC with log optimization and intelligent permission management"

    # RBAC Fluent Bit RBAC specifications
    rbac.veridis.xyz/fluentbit-rbac-specification: "Fluent Bit RBAC with performance optimization and intelligent fluentbit rbac management"
    rbac.veridis.xyz/log-specification: "Advanced log authorization management with fluentbit optimization and rbac enhancement"
    rbac.veridis.xyz/permission-specification: "Fluent Bit RBAC permission management optimization with intelligent log and enhancement"
    rbac.veridis.xyz/performance-specification: "Fluent Bit performance rbac with log acceleration and efficiency"
    rbac.veridis.xyz/business-specification: "Fluent Bit business rbac with cost optimization and strategic log intelligence"

    # Permission specific annotations
    permission.veridis.xyz/resource-types: "pods,nodes,namespaces,services,events"
    permission.veridis.xyz/api-groups: "core,apps,extensions,networking.k8s.io"
    permission.veridis.xyz/verbs: "get,list,watch"
    permission.veridis.xyz/cluster-scope: "true"
    permission.veridis.xyz/namespace-scope: "all"

    # Security annotations
    security.veridis.xyz/least-privilege-principle: "enforced"
    security.veridis.xyz/privilege-escalation: "denied"
    security.veridis.xyz/resource-restriction: "logs-only"
    security.veridis.xyz/sensitive-data-access: "denied"
    security.veridis.xyz/audit-logging: "comprehensive"

    # Compliance annotations
    compliance.veridis.xyz/soc2-control: "AC-6"  # Least Privilege
    compliance.veridis.xyz/gdpr-article: "25"     # Data Protection by Design
    compliance.veridis.xyz/iso27001-control: "A.9.4.1"  # Information Access Restriction
    compliance.veridis.xyz/nist-control: "AC-6"   # Least Privilege
    compliance.veridis.xyz/audit-required: "true"

    # API access annotations
    api.veridis.xyz/kubernetes-api-access: "read-only"
    api.veridis.xyz/resource-discovery: "enabled"
    api.veridis.xyz/metadata-access: "labels-annotations"
    api.veridis.xyz/log-access: "container-logs"
    api.veridis.xyz/rate-limiting: "standard"

    # Performance annotations
    performance.veridis.xyz/expected-requests-per-second: "1000"
    performance.veridis.xyz/api-call-optimization: "enabled"
    performance.veridis.xyz/caching-strategy: "metadata-cache"
    performance.veridis.xyz/permission-optimization: "enabled"
    performance.veridis.xyz/resource-filtering: "enabled"

    # Monitoring annotations
    monitoring.veridis.xyz/rbac-monitoring: "enabled"
    monitoring.veridis.xyz/permission-monitoring: "enabled"
    monitoring.veridis.xyz/access-monitoring: "enabled"
    monitoring.veridis.xyz/usage-monitoring: "enabled"
    monitoring.veridis.xyz/compliance-monitoring: "enabled"

    # Business annotations
    business.veridis.xyz/cost-center: "observability-infrastructure"
    business.veridis.xyz/budget-allocation: "production-logging"
    business.veridis.xyz/cost-optimization: "enabled"
    business.veridis.xyz/usage-tracking: "comprehensive"
    business.veridis.xyz/roi-tracking: "enabled"

    # Documentation and procedures
    veridis.xyz/owner: "observability-team@veridis.xyz"
    veridis.xyz/fluentbit-rbac-admin: "observability-admin@veridis.xyz"
    veridis.xyz/escalation: "observability-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "observability-oncall@veridis.xyz"

    # Documentation references
    veridis.xyz/documentation: "https://docs.veridis.xyz/observability/fluent-bit-rbac"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/observability/fluent-bit-rbac-management"
    veridis.xyz/rbac-docs: "https://observability.veridis.xyz/fluent-bit-rbac-guide"
    veridis.xyz/observability-docs: "https://observability.veridis.xyz/fluent-bit-rbac-monitoring"

# ==============================================================================
# ClusterRole Rules Configuration
# ==============================================================================
rules:
  # ==============================================================================
  # Core API Group - Pod and Node Access for Log Collection
  # ==============================================================================

  # Pod access for log collection and metadata enrichment
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
    # Reasoning: Required to discover pods and collect container logs
    # Security: Read-only access prevents modification of pod configurations

  # Pod logs access for direct log collection
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "list"]
    # Reasoning: Essential for accessing container logs directly
    # Security: Limited to log subresource only, no pod manipulation

  # Node access for node-level log collection and metadata
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
    # Reasoning: Required for node metadata enrichment and system log collection
    # Security: Read-only access to node information, no administrative access

  # Node proxy access for accessing node-level logs
  - apiGroups: [""]
    resources: ["nodes/proxy"]
    verbs: ["get"]
    # Reasoning: May be required for certain log collection methods
    # Security: Limited proxy access for log collection purposes only

  # Namespace access for namespace-aware log processing
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch"]
    # Reasoning: Required for namespace metadata enrichment in logs
    # Security: Read-only namespace information access

  # Service access for service mesh and network log correlation
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "watch"]
    # Reasoning: Service metadata for log correlation and enrichment
    # Security: Read-only service discovery, no service modification

  # Endpoints access for service discovery and log correlation
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch"]
    # Reasoning: Endpoint information for service discovery in logs
    # Security: Read-only endpoint information access

  # ConfigMap access for configuration discovery (limited scope)
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]
    resourceNames: ["fluent-bit-config", "veridis-fluent-bit-config"]
    # Reasoning: Access to own configuration for dynamic reloading
    # Security: Restricted to specific ConfigMaps related to Fluent Bit

  # Event access for Kubernetes event log collection
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch"]
    # Reasoning: Kubernetes events provide valuable operational insights
    # Security: Read-only event access, no event creation or modification

  # ==============================================================================
  # Apps API Group - Workload Metadata Access
  # ==============================================================================

  # Deployment access for workload metadata enrichment
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch"]
    # Reasoning: Deployment metadata for log correlation and application context
    # Security: Read-only deployment information access

  # ReplicaSet access for replica and scaling information
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
    # Reasoning: ReplicaSet information for pod lifecycle tracking
    # Security: Read-only replica information access

  # DaemonSet access for DaemonSet workload information
  - apiGroups: ["apps"]
    resources: ["daemonsets"]
    verbs: ["get", "list", "watch"]
    # Reasoning: DaemonSet metadata for system-level log correlation
    # Security: Read-only DaemonSet information access

  # StatefulSet access for stateful workload information
  - apiGroups: ["apps"]
    resources: ["statefulsets"]
    verbs: ["get", "list", "watch"]
    # Reasoning: StatefulSet metadata for persistent workload log correlation
    # Security: Read-only StatefulSet information access

  # ==============================================================================
  # Extensions API Group - Legacy Resource Access
  # ==============================================================================

  # DaemonSet access in extensions API group (for legacy compatibility)
  - apiGroups: ["extensions"]
    resources: ["daemonsets"]
    verbs: ["get", "list", "watch"]
    # Reasoning: Legacy DaemonSet API compatibility
    # Security: Read-only access for backward compatibility

  # ReplicaSet access in extensions API group (for legacy compatibility)
  - apiGroups: ["extensions"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
    # Reasoning: Legacy ReplicaSet API compatibility
    # Security: Read-only access for backward compatibility

  # ==============================================================================
  # Networking API Group - Network Policy and Service Mesh
  # ==============================================================================

  # NetworkPolicy access for network security log correlation
  - apiGroups: ["networking.k8s.io"]
    resources: ["networkpolicies"]
    verbs: ["get", "list", "watch"]
    # Reasoning: Network policy information for security log correlation
    # Security: Read-only network policy information access

  # Ingress access for ingress controller log correlation
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]
    # Reasoning: Ingress metadata for HTTP access log correlation
    # Security: Read-only ingress information access

  # ==============================================================================
  # Batch API Group - Job and CronJob Information
  # ==============================================================================

  # Job access for batch workload log correlation
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["get", "list", "watch"]
    # Reasoning: Job metadata for batch process log correlation
    # Security: Read-only job information access

  # CronJob access for scheduled workload information
  - apiGroups: ["batch"]
    resources: ["cronjobs"]
    verbs: ["get", "list", "watch"]
    # Reasoning: CronJob metadata for scheduled task log correlation
    # Security: Read-only CronJob information access

  # ==============================================================================
  # Metrics API Group - Performance Metrics Access
  # ==============================================================================

  # Node metrics access for performance correlation
  - apiGroups: ["metrics.k8s.io"]
    resources: ["nodes"]
    verbs: ["get", "list"]
    # Reasoning: Node performance metrics for log correlation
    # Security: Read-only metrics access for observability

  # Pod metrics access for application performance correlation
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods"]
    verbs: ["get", "list"]
    # Reasoning: Pod performance metrics for application log correlation
    # Security: Read-only metrics access for observability

  # ==============================================================================
  # Discovery API Group - API Discovery and Schema Access
  # ==============================================================================

  # API resource discovery for dynamic resource handling
  - apiGroups: [""]
    resources: [""]
    verbs: ["get"]
    # Reasoning: Basic API discovery for resource enumeration
    # Security: Minimal discovery access for API exploration

---
# ==============================================================================
# Veridis Fluent Bit ClusterRoleBinding - Primary Authorization Binding
# ==============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: veridis-fluent-bit-cluster-binding

  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-rbac-binding
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    fluentbit.veridis.xyz/type: log-fluentbit-rbac-binding
    fluentbit.veridis.xyz/category: observability-rbac-binding
    fluentbit.veridis.xyz/role: primary-fluentbit-rbac-binding

    rbac.veridis.xyz/binding-type: "cluster-role-binding"
    rbac.veridis.xyz/scope: "cluster-wide"
    rbac.veridis.xyz/permission-level: "read-only"

    veridis.xyz/environment: production
    veridis.xyz/team: observability-engineering

  annotations:
    veridis.xyz/description: "Primary cluster-wide RBAC binding for Veridis Fluent Bit log collection service"
    veridis.xyz/purpose: "Binds Fluent Bit service account to cluster role for log collection permissions"

    # Binding specific annotations
    rbac.veridis.xyz/role-reference: "veridis-fluent-bit-cluster-role"
    rbac.veridis.xyz/subject-type: "ServiceAccount"
    rbac.veridis.xyz/subject-namespace: "veridis-infrastructure"
    rbac.veridis.xyz/binding-scope: "cluster-wide"

    # Security annotations
    security.veridis.xyz/binding-purpose: "log-collection"
    security.veridis.xyz/privilege-escalation: "denied"
    security.veridis.xyz/least-privilege: "enforced"
    security.veridis.xyz/audit-required: "true"

    # Compliance annotations
    compliance.veridis.xyz/access-review: "quarterly"
    compliance.veridis.xyz/binding-audit: "enabled"
    compliance.veridis.xyz/permission-justification: "log-collection-observability"

# ==============================================================================
# ClusterRoleBinding Configuration
# ==============================================================================
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: veridis-fluent-bit-cluster-role

subjects:
  - kind: ServiceAccount
    name: veridis-fluent-bit
    namespace: veridis-infrastructure

---
# ==============================================================================
# Veridis Fluent Bit Role - Namespace-Specific Permissions
# ==============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: veridis-fluent-bit-namespace-role
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-namespace-role
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    fluentbit.veridis.xyz/type: log-fluentbit-namespace-role
    fluentbit.veridis.xyz/category: observability-namespace-role
    fluentbit.veridis.xyz/role: namespace-fluentbit-role

    rbac.veridis.xyz/role-type: "namespace-role"
    rbac.veridis.xyz/scope: "namespace-specific"
    rbac.veridis.xyz/permission-level: "enhanced"

    veridis.xyz/environment: production
    veridis.xyz/team: observability-engineering

  annotations:
    veridis.xyz/description: "Namespace-specific RBAC role for Veridis Fluent Bit enhanced permissions"
    veridis.xyz/purpose: "Provides enhanced namespace permissions for Fluent Bit configuration and secret access"

    # Role specific annotations
    rbac.veridis.xyz/role-scope: "veridis-infrastructure"
    rbac.veridis.xyz/permission-enhancement: "configuration-access"
    rbac.veridis.xyz/secret-access: "limited"
    rbac.veridis.xyz/configmap-access: "enhanced"

    # Security annotations
    security.veridis.xyz/namespace-isolation: "enforced"
    security.veridis.xyz/secret-access-justification: "fluent-bit-configuration"
    security.veridis.xyz/least-privilege-namespace: "enforced"

# ==============================================================================
# Role Rules Configuration
# ==============================================================================
rules:
  # ==============================================================================
  # Enhanced ConfigMap Access within Namespace
  # ==============================================================================

  # Full ConfigMap access within the namespace for configuration management
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
    # Reasoning: Enhanced configuration management capabilities
    # Security: Limited to namespace scope, allows configuration updates

  # ==============================================================================
  # Limited Secret Access for Credentials
  # ==============================================================================

  # Specific Secret access for Fluent Bit credentials
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
    resourceNames:
      - "veridis-fluent-bit-secret"
      - "veridis-fluent-bit-token"
      - "veridis-fluent-bit-dev-token"
      - "veridis-fluent-bit-staging-token"
      - "veridis-fluent-bit-projected-token"
    # Reasoning: Access to own secrets for authentication and configuration
    # Security: Restricted to specific named secrets related to Fluent Bit

  # ==============================================================================
  # Enhanced Pod Access within Namespace
  # ==============================================================================

  # Enhanced pod access within the observability namespace
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
    # Reasoning: Enhanced pod discovery within the observability namespace
    # Security: Namespace-scoped access for observability correlation

  # Pod exec access for debugging (restricted)
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
    resourceNames: ["veridis-fluent-bit-*"]
    # Reasoning: Limited debugging capabilities for Fluent Bit pods
    # Security: Restricted to Fluent Bit pods only for operational debugging

  # ==============================================================================
  # Service Account Token Management
  # ==============================================================================

  # ServiceAccount token access for authentication
  - apiGroups: [""]
    resources: ["serviceaccounts/token"]
    verbs: ["create"]
    resourceNames: ["veridis-fluent-bit", "veridis-fluent-bit-dev", "veridis-fluent-bit-staging"]
    # Reasoning: Token creation for authentication and authorization
    # Security: Restricted to specific Fluent Bit service accounts

  # ==============================================================================
  # Event Creation for Operational Logging
  # ==============================================================================

  # Event creation for operational status reporting
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
    # Reasoning: Allows Fluent Bit to report operational events
    # Security: Limited to event creation within namespace scope

---
# ==============================================================================
# Veridis Fluent Bit RoleBinding - Namespace-Specific Binding
# ==============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: veridis-fluent-bit-namespace-binding
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-namespace-binding
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    fluentbit.veridis.xyz/type: log-fluentbit-namespace-binding
    fluentbit.veridis.xyz/category: observability-namespace-binding
    fluentbit.veridis.xyz/role: namespace-fluentbit-binding

    rbac.veridis.xyz/binding-type: "role-binding"
    rbac.veridis.xyz/scope: "namespace-specific"
    rbac.veridis.xyz/permission-level: "enhanced"

    veridis.xyz/environment: production
    veridis.xyz/team: observability-engineering

  annotations:
    veridis.xyz/description: "Namespace-specific RBAC binding for Veridis Fluent Bit enhanced permissions"
    veridis.xyz/purpose: "Binds Fluent Bit service account to namespace role for enhanced permissions"

    # Binding specific annotations
    rbac.veridis.xyz/role-reference: "veridis-fluent-bit-namespace-role"
    rbac.veridis.xyz/binding-namespace: "veridis-infrastructure"
    rbac.veridis.xyz/enhancement-purpose: "configuration-management"

# ==============================================================================
# RoleBinding Configuration
# ==============================================================================
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: veridis-fluent-bit-namespace-role

subjects:
  - kind: ServiceAccount
    name: veridis-fluent-bit
    namespace: veridis-infrastructure

---
# ==============================================================================
# Veridis Fluent Bit Development ClusterRole - Development Environment
# ==============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: veridis-fluent-bit-dev-cluster-role

  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-development
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-dev-rbac
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    fluentbit.veridis.xyz/type: log-fluentbit-dev-rbac
    fluentbit.veridis.xyz/category: observability-dev-rbac
    fluentbit.veridis.xyz/role: development-fluentbit-rbac

    rbac.veridis.xyz/role-type: "development-cluster-role"
    rbac.veridis.xyz/scope: "cluster-wide-dev"
    rbac.veridis.xyz/permission-level: "relaxed"

    veridis.xyz/environment: development
    veridis.xyz/team: observability-engineering

  annotations:
    veridis.xyz/description: "Development environment ClusterRole for Fluent Bit with relaxed permissions"
    veridis.xyz/purpose: "Provides development-appropriate permissions for testing and debugging"

    # Development specific annotations
    development.veridis.xyz/testing-enabled: "true"
    development.veridis.xyz/debug-permissions: "enabled"
    development.veridis.xyz/relaxed-security: "true"
    development.veridis.xyz/enhanced-access: "debugging"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "development-environment-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/observability/fluent-bit-rbac-development"

# ==============================================================================
# Development ClusterRole Rules
# ==============================================================================
rules:
  # Inherit all production permissions
  - apiGroups: [""]
    resources: ["pods", "pods/log", "nodes", "namespaces", "services", "endpoints", "events"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
    verbs: ["get", "list", "watch"]

  # Enhanced debugging permissions for development
  - apiGroups: [""]
    resources: ["pods/exec", "pods/portforward"]
    verbs: ["create"]
    # Reasoning: Enhanced debugging capabilities for development
    # Security: Development environment allows enhanced access for testing

  # ConfigMap creation for testing
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    # Reasoning: Full ConfigMap management for development testing
    # Security: Development environment allows configuration experimentation

  # Secret access for development debugging
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
    # Reasoning: Enhanced secret access for development debugging
    # Security: Development environment allows broader secret access for testing

---
# ==============================================================================
# Veridis Fluent Bit Development ClusterRoleBinding
# ==============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: veridis-fluent-bit-dev-cluster-binding

  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-development
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-dev-rbac-binding
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    fluentbit.veridis.xyz/type: log-fluentbit-dev-rbac-binding
    fluentbit.veridis.xyz/category: observability-dev-rbac-binding
    fluentbit.veridis.xyz/role: development-fluentbit-rbac-binding

    rbac.veridis.xyz/binding-type: "development-cluster-role-binding"
    rbac.veridis.xyz/scope: "cluster-wide-dev"

    veridis.xyz/environment: development
    veridis.xyz/team: observability-engineering

  annotations:
    veridis.xyz/description: "Development environment ClusterRoleBinding for Fluent Bit testing"
    veridis.xyz/purpose: "Binds development Fluent Bit service account to development cluster role"

    # Development specific annotations
    development.veridis.xyz/testing-purpose: "log-collection-debugging"
    development.veridis.xyz/enhanced-permissions: "debugging-access"

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: veridis-fluent-bit-dev-cluster-role

subjects:
  - kind: ServiceAccount
    name: veridis-fluent-bit-dev
    namespace: veridis-infrastructure

---
# ==============================================================================
# Veridis Fluent Bit Staging ClusterRole - Staging Environment
# ==============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: veridis-fluent-bit-staging-cluster-role

  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-staging
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-staging-rbac
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    fluentbit.veridis.xyz/type: log-fluentbit-staging-rbac
    fluentbit.veridis.xyz/category: observability-staging-rbac
    fluentbit.veridis.xyz/role: staging-fluentbit-rbac

    rbac.veridis.xyz/role-type: "staging-cluster-role"
    rbac.veridis.xyz/scope: "cluster-wide-staging"
    rbac.veridis.xyz/permission-level: "production-like"

    veridis.xyz/environment: staging
    veridis.xyz/team: observability-engineering

  annotations:
    veridis.xyz/description: "Staging environment ClusterRole for Fluent Bit with production-like permissions"
    veridis.xyz/purpose: "Provides production-like permissions for pre-production validation"

    # Staging specific annotations
    staging.veridis.xyz/production-like: "true"
    staging.veridis.xyz/security-enhanced: "true"
    staging.veridis.xyz/monitoring-enhanced: "true"
    staging.veridis.xyz/compliance-validation: "enabled"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "staging-environment-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/observability/fluent-bit-rbac-staging"

# ==============================================================================
# Staging ClusterRole Rules (Production-like)
# ==============================================================================
rules:
  # Production-equivalent permissions
  - apiGroups: [""]
    resources: ["pods", "pods/log", "nodes", "nodes/proxy", "namespaces", "services", "endpoints", "events"]
    verbs: ["get", "list", "watch"]

  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]
    resourceNames: ["fluent-bit-config", "veridis-fluent-bit-config-staging"]

  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["networking.k8s.io"]
    resources: ["networkpolicies", "ingresses"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["metrics.k8s.io"]
    resources: ["nodes", "pods"]
    verbs: ["get", "list"]

---
# ==============================================================================
# Veridis Fluent Bit Staging ClusterRoleBinding
# ==============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: veridis-fluent-bit-staging-cluster-binding

  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/instance: veridis-staging
    app.kubernetes.io/version: "2.2.2"
    app.kubernetes.io/component: fluent-bit-staging-rbac-binding
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    fluentbit.veridis.xyz/type: log-fluentbit-staging-rbac-binding
    fluentbit.veridis.xyz/category: observability-staging-rbac-binding
    fluentbit.veridis.xyz/role: staging-fluentbit-rbac-binding

    rbac.veridis.xyz/binding-type: "staging-cluster-role-binding"
    rbac.veridis.xyz/scope: "cluster-wide-staging"

    veridis.xyz/environment: staging
    veridis.xyz/team: observability-engineering

  annotations:
    veridis.xyz/description: "Staging environment ClusterRoleBinding for Fluent Bit validation"
    veridis.xyz/purpose: "Binds staging Fluent Bit service account to staging cluster role"

    # Staging specific annotations
    staging.veridis.xyz/validation-purpose: "production-readiness-testing"
    staging.veridis.xyz/security-testing: "enabled"

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: veridis-fluent-bit-staging-cluster-role

subjects:
  - kind: ServiceAccount
    name: veridis-fluent-bit-staging
    namespace: veridis-infrastructure

# ==============================================================================
# Veridis Fluent Bit RBAC Summary and Enterprise Architecture
# ==============================================================================
#
# COMPREHENSIVE VERIDIS FLUENT BIT RBAC STRATEGY:
# ===============================================
#
# VERIDIS FLUENT BIT RBAC ARCHITECTURE OVERVIEW:
# ----------------------------------------------
# 1. Primary Production ClusterRole (veridis-fluent-bit-cluster-role):
#    - Comprehensive enterprise-grade clusterrole with intelligent log authorization and advanced performance optimization for production Fluent Bit
#    - Advanced clusterrole configuration with minimal permissions, comprehensive API access, resource discovery, and comprehensive observability integration
#    - Multi-tier clusterrole architecture with least privilege, security enforcement, audit compliance, and comprehensive operational excellence
#    - Enterprise clusterrole policies with read-only access, resource restrictions, compliance controls, and comprehensive disaster recovery procedures
#    - Performance optimization with intelligent permission processing, API caching, resource optimization, and security for maximum efficiency
#
# 2. Development Environment ClusterRole (veridis-fluent-bit-dev-cluster-role):
#    - Development-focused clusterrole with relaxed permissions and comprehensive testing environment integration
#    - Advanced development configuration with debug permissions, enhanced access, testing capabilities, and comprehensive experimentation support
#    - Flexible clusterrole optimization with development access, debugging permissions, and comprehensive development intelligence
#    - Development intelligence with debug procedures, permission support, rapid iteration, and comprehensive development coordination
#    - Testing excellence with relaxed permissions, development workflows, enhanced debugging, and comprehensive development environment management
#
# 3. Staging Environment ClusterRole (veridis-fluent-bit-staging-cluster-role):
#    - Pre-production clusterrole with production-like permissions and comprehensive staging environment integration
#    - Staging configuration with enhanced security, production-like RBAC, compliance validation, and comprehensive validation procedures
#    - Production-like clusterrole optimization with permission testing, security validation, and comprehensive staging intelligence
#    - Production simulation with realistic permissions, security testing, compliance validation, and comprehensive pre-production coordination
#    - Validation excellence with production-like behavior, security testing, permission validation, and comprehensive staging environment management
#
# 4. Namespace Role Enhancement (veridis-fluent-bit-namespace-role):
#    - Role-focused clusterrole with namespace-specific permissions and comprehensive enhancement integration
#    - Advanced role configuration with enhanced ConfigMap access, secret management, operational capabilities, and comprehensive namespace support
#    - Flexible clusterrole optimization with namespace permissions, enhanced access, and comprehensive role intelligence
#    - Role intelligence with namespace procedures, configuration support, operational enhancement, and comprehensive role coordination
#    - Operational excellence with namespace permissions, configuration management, enhanced access, and comprehensive role environment management
#
# ENTERPRISE FLUENT BIT RBAC FEATURES:
# ====================================
# Advanced Permission Management and Performance Integration:
#   - Multi-environment clusterrole architecture with production, development, staging, and namespace-specific configurations
#   - Intelligent permission management with authorization algorithms, RBAC policies, access optimization, and comprehensive permission decisions
#   - RBAC discovery with API optimization, resource management, permission policies, and comprehensive authorization analytics
#   - Performance management with high throughput (1K requests/sec), low latency, permission caching, and comprehensive performance intelligence
#   - Authorization processing tuning with permission management, API optimization, resource algorithms, and intelligent clusterrole optimization
#
# Comprehensive API Access and Resource Integration:
#   - Least privilege access with minimal permissions, read-only access, resource restrictions, and comprehensive permission coordination
#   - Resource optimization with API integration, cluster access, namespace limits, and comprehensive resource intelligence
#   - Security management with permission enforcement, audit compliance, access validation, and comprehensive security coordination
#   - Business intelligence with permission analytics, access correlation, cost optimization, and comprehensive strategic insights
#   - Access management with permission policies, RBAC validation, security audit, and comprehensive access analytics
#
# Enterprise Security and Compliance Integration:
#   - Permission security with least privilege enforcement, escalation prevention, audit compliance, and comprehensive security enforcement
#   - Authorization audit with access tracking, permission monitoring, RBAC audit, and comprehensive authorization management
#   - Compliance processing with RBAC audit, permission review, access validation, and comprehensive compliance management
#   - Security monitoring with permission tracking, authorization validation, access audit, and comprehensive security management
#   - Compliance intelligence with audit trails, access review, permission validation, and comprehensive compliance analytics
#
# Advanced Resource Discovery and API Optimization:
#   - Multi-tier API access with core APIs, apps APIs, networking APIs, and comprehensive API coordination
#   - API optimization with resource discovery, metadata access, performance caching, and comprehensive API intelligence
#   - Resource management with discovery optimization, access patterns, performance tuning, and comprehensive resource coordination
#   - Business intelligence with API analytics, resource correlation, performance optimization, and comprehensive strategic insights
#   - Discovery management with API security, resource optimization, access validation, and comprehensive discovery analytics
#
# OPERATIONAL EXCELLENCE:
# ======================
# Fluent Bit RBAC Lifecycle Management:
#   - Multi-RBAC deployment with production authorization, development flexibility, staging validation, and comprehensive rbac coordination
#   - Intelligent rbac management with predictive analytics and authorization utilization correlation
#   - Advanced monitoring with comprehensive rbac analytics and authorization business intelligence
#   - Configuration validation with rbac schema enforcement and authorization deployment safety checks
#   - Automated optimization with rbac pattern analysis and authorization configuration recommendation engine
#
# Security Integration and Compliance:
#   - SOC 2 Type II rbac controls with comprehensive audit requirements and authorization logging
#   - GDPR rbac compliance with data protection and privacy-preserving authorization management
#   - ISO 27001 rbac security management with information security and authorization compliance integration
#   - NIST 800-190 container rbac security with authorization validation and compliance
#   - Zero-trust rbac architecture with comprehensive encryption and authorization authentication requirements
#
# Business Intelligence Integration:
#   - RBAC analytics with cost correlation and authorization resource utilization optimization
#   - Performance analytics with user experience optimization and rbac business intelligence
#   - Authorization intelligence with processing pattern monitoring and rbac optimization recommendations
#   - Strategic planning with capacity management and rbac forecasting
#   - Business impact assessment with rbac performance correlation and authorization tracking
#
# Developer Experience Excellence:
#   - Multi-environment rbac support with production authorization, development debugging, staging validation, and comprehensive rbac coordination
#   - Comprehensive documentation with rbac guides and authorization troubleshooting procedures
#   - Environment-specific rbacs with production, development, staging, and namespace support
#   - Testing integration with rbac development workflow and authorization debugging capabilities
#   - RBAC monitoring with comprehensive tracking and authorization correlation
#
# ==============================================================================
