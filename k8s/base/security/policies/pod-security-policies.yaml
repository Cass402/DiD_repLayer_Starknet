# ==============================================================================
# Veridis Decentralized Identity Protocol - Pod Security Policies
# ==============================================================================
#
# This manifest defines comprehensive pod security policies for the Veridis deployment,
# providing:
#
# CONTAINER RUNTIME SECURITY:
#   • Strict container security controls with minimal attack surface
#   • Runtime security enforcement with admission controllers and validation
#   • Privileged access prevention with capability restrictions and user controls
#   • Container image security with signature verification and vulnerability scanning
#   • Resource governance with limits, quotas, and quality of service management
#
# KUBERNETES SECURITY HARDENING:
#   • Pod Security Standards (PSS) implementation replacing deprecated PSPs
#   • Security Context enforcement with non-root users and read-only filesystems
#   • Network security controls with host network restrictions and port limitations
#   • Volume security with mount restrictions and sensitive data protection
#   • Process isolation with PID namespace separation and IPC restrictions
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II container security controls and runtime protection
#   • GDPR data processing security with container-level data protection
#   • ISO 27001 system security controls and access management
#   • PCI DSS secure container deployment for cardholder data processing
#   • NIST Cybersecurity Framework container security implementation
#
# ENTERPRISE SECURITY FEATURES:
#   • Multi-tenant isolation with namespace-based security boundaries
#   • Workload identity integration with service mesh and authentication
#   • Runtime threat detection with behavioral analysis and anomaly monitoring
#   • Supply chain security with image provenance and software bill of materials
#   • Automated security policy enforcement with GitOps and infrastructure as code
#
# OPERATIONAL SECURITY CONTROLS:
#   • Real-time security monitoring with runtime protection and incident response
#   • Automated vulnerability management with image scanning and patch orchestration
#   • Security audit logging with comprehensive container activity tracking
#   • Performance optimization with security-aware resource management
#   • Disaster recovery integration with secure backup and restore procedures
#
# ==============================================================================

# ==============================================================================
# Restricted Pod Security Policy - Maximum Security Baseline
# ==============================================================================
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: veridis-restricted-psp

  # Core resource identification labels
  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: pod-security-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Pod security policy specific classification
    security.veridis.xyz/policy-type: pod-security-policy
    security.veridis.xyz/security-level: restricted
    security.veridis.xyz/scope: production-workloads
    security.veridis.xyz/enforcement-mode: strict
    security.veridis.xyz/compliance-tier: maximum

    # Security classification
    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: critical
    security.veridis.xyz/threat-mitigation: "container-escape,privilege-escalation,host-access"
    security.veridis.xyz/attack-surface: "minimal"
    security.veridis.xyz/hardening-level: "maximum"

    # Business classification
    business.veridis.xyz/criticality: system-critical
    business.veridis.xyz/impact-level: maximum
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,pci-dss,nist"
    business.veridis.xyz/security-investment: "tier-1"
    business.veridis.xyz/risk-tolerance: "minimal"

    # Operational labels
    veridis.xyz/environment: production
    veridis.xyz/team: security
    veridis.xyz/cost-center: security-operations
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "container-security-control"
    compliance.veridis.xyz/gdpr: "data-processing-security"
    compliance.veridis.xyz/iso27001: "system-security-control"
    compliance.veridis.xyz/pci-dss: "secure-container-deployment"
    compliance.veridis.xyz/nist: "container-security-implementation"
    governance.veridis.xyz/policy-enforcement: "mandatory"
    governance.veridis.xyz/exception-process: "ciso-approval-required"

  annotations:
    # Policy purpose and implementation
    veridis.xyz/description: "Restricted pod security policy implementing maximum security controls for production workloads with comprehensive compliance integration"
    veridis.xyz/purpose: "Enforces strict container security controls to minimize attack surface and prevent container escape or privilege escalation"
    veridis.xyz/scope: "All production workloads requiring maximum security posture with comprehensive threat mitigation"

    # Security architecture and controls
    security.veridis.xyz/security-model: "Defense in depth with container hardening, minimal privileges, and runtime protection"
    security.veridis.xyz/threat-landscape: "Container escapes, privilege escalation, host system access, malicious containers, supply chain attacks"
    security.veridis.xyz/control-objectives: "Prevent unauthorized system access, enforce least privilege, maintain runtime integrity"

    # Compliance and regulatory alignment
    compliance.veridis.xyz/regulatory-requirement: "SOC 2 CC6.1, GDPR Article 32, ISO 27001 A.12.6.1, PCI DSS 2.2, NIST 800-53 SI-4"
    compliance.veridis.xyz/control-implementation: "Container security controls, runtime protection, access restrictions, audit logging"
    compliance.veridis.xyz/evidence-collection: "Policy enforcement logs, security violation reports, compliance validation results"

    # Operational impact and management
    veridis.xyz/operational-impact: "Strict security controls may require application modifications for compliance"
    veridis.xyz/development-guidance: "Applications must run as non-root, use read-only filesystems, avoid privileged operations"
    veridis.xyz/troubleshooting: "Security violations logged with specific policy requirements and remediation guidance"

    # Performance and resource considerations
    veridis.xyz/performance-impact: "Minimal runtime overhead from security controls, resource limits enforced"
    veridis.xyz/resource-governance: "CPU/memory limits enforced, ephemeral storage restricted, network policies applied"
    veridis.xyz/optimization-notes: "Security controls optimized for production performance with minimal overhead"

    # Emergency procedures and exceptions
    veridis.xyz/emergency-override: "Security policy exceptions require CISO approval and documented business justification"
    veridis.xyz/exception-process: "Temporary exceptions with time limits, enhanced monitoring, and automatic expiration"
    veridis.xyz/incident-response: "Security violations trigger immediate incident response and forensic analysis"

    # Contact information and ownership
    veridis.xyz/owner: "security-team@veridis.xyz"
    veridis.xyz/policy-admin: "container-security@veridis.xyz"
    veridis.xyz/compliance-contact: "compliance@veridis.xyz"
    veridis.xyz/escalation: "ciso@veridis.xyz"

    # Documentation and procedures
    veridis.xyz/policy-documentation: "https://docs.veridis.xyz/security/pod-security-policies"
    veridis.xyz/developer-guidance: "https://docs.veridis.xyz/development/security-requirements"
    veridis.xyz/compliance-procedures: "https://docs.veridis.xyz/compliance/container-security"

# Pod Security Policy Specification
spec:
  # ==============================================================================
  # Privilege and Access Controls
  # ==============================================================================
  # Prevent privileged containers - critical security control
  privileged: false

  # Prevent host namespace access - container isolation
  hostNetwork: false
  hostIPC: false
  hostPID: false

  # Prevent host port access - network security
  hostPorts:
  - min: 0
    max: 0  # No host ports allowed

  # ==============================================================================
  # User and Group Security Controls
  # ==============================================================================
  # Require non-root users - prevent privilege escalation
  runAsUser:
    rule: 'MustRunAsNonRoot'

  # Control group membership for security
  runAsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1000
      max: 65535

  # Supplemental groups for file access control
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
    - min: 1000
      max: 65535

  # File system group for volume permissions
  fsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1000
      max: 65535

  # ==============================================================================
  # Capability Management - Minimal Required Capabilities
  # ==============================================================================
  # Default capabilities to drop - reduce attack surface
  defaultAllowPrivilegedEscalation: false
  allowPrivilegeEscalation: false

  # Required capabilities to drop - enhanced security
  requiredDropCapabilities:
  - ALL  # Drop all capabilities by default

  # Allowed capabilities - minimal set for application functionality
  allowedCapabilities:
  - NET_BIND_SERVICE  # Allow binding to privileged ports (< 1024)

  # Default capabilities added to containers
  defaultAddCapabilities: []

  # ==============================================================================
  # Volume Security Controls
  # ==============================================================================
  # Allowed volume types - restrict to secure volume types only
  volumes:
  - 'configMap'           # Configuration data
  - 'emptyDir'           # Temporary storage
  - 'projected'          # Service account tokens, secrets
  - 'secret'             # Sensitive data
  - 'downwardAPI'        # Pod metadata
  - 'persistentVolumeClaim'  # Persistent storage
  - 'csi'                # Container Storage Interface

  # Forbidden volume types - prevent dangerous mounts
  # - 'hostPath'         # Host filesystem access - FORBIDDEN
  # - 'flexVolume'       # Flexible volumes - SECURITY RISK
  # - 'azureFile'        # Direct cloud storage - USE CSI INSTEAD
  # - 'nfs'              # Network filesystem - SECURITY RISK

  # Read-only root filesystem enforcement
  readOnlyRootFilesystem: true

  # ==============================================================================
  # SELinux Security Context
  # ==============================================================================
  seLinux:
    rule: 'RunAsAny'  # Flexible SELinux context for compatibility

  # ==============================================================================
  # AppArmor Security Profiles
  # ==============================================================================
  # AppArmor profiles for additional security
  annotations:
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default,docker/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'

  # ==============================================================================
  # Seccomp Security Profiles
  # ==============================================================================
  # Seccomp profiles for system call filtering
  allowedProfiles:
  - 'runtime/default'    # Default seccomp profile
  - 'docker/default'     # Docker default profile

  # ==============================================================================
  # Resource Governance and Limits
  # ==============================================================================
  # Allowed unsafe sysctls - none for maximum security
  allowedUnsafeSysctls: []

  # Forbidden sysctls - prevent dangerous system modifications
  forbiddenSysctls:
  - '*'  # Forbid all sysctl modifications

  # ==============================================================================
  # Runtime Security Controls
  # ==============================================================================
  # Allow specific runtime classes only
  allowedRuntimeClassNames:
  - 'gvisor'           # gVisor sandboxed runtime
  - 'kata-containers'  # Kata Containers VM isolation
  # Note: 'runc' (default) allowed implicitly for compatibility

---
# ==============================================================================
# Database Pod Security Policy - Enhanced Data Protection
# ==============================================================================
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: veridis-database-psp

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: pod-security-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    security.veridis.xyz/policy-type: pod-security-policy
    security.veridis.xyz/security-level: database-enhanced
    security.veridis.xyz/scope: database-workloads
    security.veridis.xyz/enforcement-mode: strict
    security.veridis.xyz/compliance-tier: maximum

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: critical
    security.veridis.xyz/threat-mitigation: "data-breach,unauthorized-access,container-escape"
    security.veridis.xyz/data-classification: "confidential,restricted,regulated"
    security.veridis.xyz/encryption-required: "mandatory"

    business.veridis.xyz/criticality: system-critical
    business.veridis.xyz/revenue-impact: direct
    business.veridis.xyz/data-sovereignty: "regulated"
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,pci-dss"
    business.veridis.xyz/audit-requirements: "comprehensive"

    veridis.xyz/environment: production
    veridis.xyz/service: database
    veridis.xyz/team: database-administration
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "data-security-control"
    compliance.veridis.xyz/gdpr: "data-controller-security"
    compliance.veridis.xyz/iso27001: "information-storage-security"
    compliance.veridis.xyz/pci-dss: "cardholder-data-protection"
    governance.veridis.xyz/policy-enforcement: "maximum"

  annotations:
    veridis.xyz/description: "Enhanced database pod security policy with maximum data protection controls and comprehensive compliance integration"
    veridis.xyz/purpose: "Provides specialized security controls for database workloads handling sensitive customer data and regulated information"
    veridis.xyz/scope: "PostgreSQL database pods, backup operations, replication services, data processing workloads"

    # Database-specific security requirements
    security.veridis.xyz/data-protection: "Customer PII encryption, audit trail integrity, access logging, data residency compliance"
    security.veridis.xyz/database-hardening: "Minimal attack surface, encrypted storage, secure communication, access controls"
    security.veridis.xyz/threat-modeling: "Database attacks, privilege escalation, data exfiltration, insider threats, APTs"

    # Enhanced compliance for data processing
    compliance.veridis.xyz/data-handling: "GDPR Article 32 technical measures, PCI DSS data protection requirements"
    compliance.veridis.xyz/regulatory-compliance: "Data controller security, processor agreements, cross-border transfers"
    compliance.veridis.xyz/audit-scope: "All database operations, data access, configuration changes, security events"

    # High availability and disaster recovery
    veridis.xyz/ha-requirements: "99.99% availability, automatic failover, zero data loss, cross-region replication"
    veridis.xyz/disaster-recovery: "RTO 15 minutes, RPO 5 minutes, automated backup verification, secure recovery"
    veridis.xyz/business-continuity: "24/7 operations, maintenance windows, emergency procedures, escalation matrix"

    veridis.xyz/owner: "database-team@veridis.xyz"
    veridis.xyz/dba: "dba@veridis.xyz"
    veridis.xyz/security-contact: "data-protection@veridis.xyz"
    veridis.xyz/compliance-contact: "dpo@veridis.xyz"

# Enhanced Database Security Specification
spec:
  # ==============================================================================
  # Maximum Security Controls for Database Workloads
  # ==============================================================================
  privileged: false
  hostNetwork: false
  hostIPC: false
  hostPID: false
  hostPorts:
  - min: 0
    max: 0

  # ==============================================================================
  # Database User Security - Enhanced Controls
  # ==============================================================================
  runAsUser:
    rule: 'MustRunAs'
    ranges:
    - min: 999    # PostgreSQL user (postgres)
      max: 999
    - min: 1000   # Application users
      max: 65535

  runAsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 999    # PostgreSQL group
      max: 999
    - min: 1000   # Application groups
      max: 65535

  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
    - min: 999    # Database supplemental groups
      max: 65535

  fsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 999    # Database file system group
      max: 65535

  # ==============================================================================
  # Database-Specific Capability Management
  # ==============================================================================
  defaultAllowPrivilegedEscalation: false
  allowPrivilegeEscalation: false

  requiredDropCapabilities:
  - ALL

  # Database-specific capabilities for PostgreSQL
  allowedCapabilities:
  - CHOWN          # File ownership changes for data directories
  - DAC_OVERRIDE   # Override discretionary access controls for data files
  - FOWNER         # File operations regardless of ownership
  - SETGID         # Set group ID for PostgreSQL operations
  - SETUID         # Set user ID for PostgreSQL operations

  # ==============================================================================
  # Database Volume Security - Enhanced Data Protection
  # ==============================================================================
  volumes:
  - 'persistentVolumeClaim'  # Database data storage
  - 'secret'                 # Database credentials and certificates
  - 'configMap'              # Database configuration
  - 'emptyDir'               # Temporary processing space
  - 'projected'              # Service account tokens
  - 'csi'                    # Container Storage Interface volumes

  # Enhanced filesystem security for database
  readOnlyRootFilesystem: false  # Database needs write access to data directories

  # ==============================================================================
  # Enhanced Security Contexts for Database
  # ==============================================================================
  seLinux:
    rule: 'MustRunAs'
    seLinuxOptions:
      level: 's0:c123,c456'  # Multi-Category Security (MCS) labels
      type: 'container_t'    # SELinux type for containers

  # ==============================================================================
  # Database-Specific Security Profiles
  # ==============================================================================
  allowedProfiles:
  - 'runtime/default'
  - 'unconfined'      # Required for some database operations

  # Database-specific sysctls for performance and security
  allowedUnsafeSysctls:
  - 'kernel.shmmax'   # Shared memory maximum size
  - 'kernel.shmall'   # Total shared memory pages
  - 'kernel.shmmni'   # Maximum number of shared memory segments

  forbiddenSysctls:
  - 'kernel.msg*'     # Prevent message queue modifications
  - 'kernel.sem*'     # Prevent semaphore modifications
  - 'net.*'           # Prevent network stack modifications

---
# ==============================================================================
# ZK Circuits Pod Security Policy - Cryptographic Workload Protection
# ==============================================================================
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: veridis-zk-circuits-psp

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: pod-security-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    security.veridis.xyz/policy-type: pod-security-policy
    security.veridis.xyz/security-level: cryptographic-enhanced
    security.veridis.xyz/scope: cryptographic-workloads
    security.veridis.xyz/enforcement-mode: maximum
    security.veridis.xyz/compliance-tier: specialized

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: critical
    security.veridis.xyz/threat-mitigation: "crypto-key-exposure,algorithm-theft,side-channel-attacks"
    security.veridis.xyz/data-classification: "cryptographic-material,trade-secrets"
    security.veridis.xyz/fips-compliance: "required"
    security.veridis.xyz/gpu-security: "enhanced"

    business.veridis.xyz/criticality: business-critical
    business.veridis.xyz/revenue-impact: direct
    business.veridis.xyz/ip-classification: "trade-secrets"
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,fips-140-2"
    business.veridis.xyz/competitive-advantage: "core-technology"

    veridis.xyz/environment: production
    veridis.xyz/service: zk-circuits
    veridis.xyz/team: cryptography-engineering
    veridis.xyz/cost-center: research-development

    compliance.veridis.xyz/soc2: "cryptographic-control"
    compliance.veridis.xyz/fips-140-2: "level-2-container-security"
    compliance.veridis.xyz/iso27001: "cryptographic-processing-security"
    governance.veridis.xyz/policy-enforcement: "maximum"
    governance.veridis.xyz/ip-protection: "critical"

  annotations:
    veridis.xyz/description: "Specialized cryptographic workload pod security policy with maximum protection for ZK circuits and GPU resources"
    veridis.xyz/purpose: "Protects cryptographic algorithms, GPU resources, and intellectual property while ensuring FIPS compliance and performance"
    veridis.xyz/scope: "GPU-accelerated proof generation, cryptographic key operations, algorithm execution, performance optimization"

    # Cryptographic security requirements
    security.veridis.xyz/crypto-isolation: "Hardware-level isolation, secure memory management, side-channel attack prevention"
    security.veridis.xyz/gpu-security: "GPU memory isolation, secure CUDA operations, hardware attestation"
    security.veridis.xyz/algorithm-protection: "Proprietary algorithm confidentiality, performance data protection, trade secret security"

    # FIPS 140-2 compliance requirements
    compliance.veridis.xyz/fips-requirements: "FIPS 140-2 Level 2 cryptographic operations, validated algorithms, secure key handling"
    compliance.veridis.xyz/crypto-module: "Software cryptographic module with role-based authentication"
    compliance.veridis.xyz/key-management: "Secure key generation, storage, and destruction with audit trails"

    # GPU and performance considerations
    veridis.xyz/gpu-requirements: "NVIDIA RTX 4090/A100 access, CUDA programming, parallel processing, memory management"
    veridis.xyz/performance-targets: "Sub-second proof generation, optimal GPU utilization, scalable processing"
    veridis.xyz/resource-optimization: "Cost-effective GPU usage, energy efficiency, performance per dollar"

    # Intellectual property protection
    business.veridis.xyz/ip-controls: "Algorithm confidentiality, performance optimization secrets, proprietary techniques"
    business.veridis.xyz/trade-secret-protection: "Non-disclosure enforcement, access logging, confidentiality monitoring"
    business.veridis.xyz/competitive-intelligence: "Performance benchmarks, optimization methods, efficiency improvements"

    veridis.xyz/owner: "zk-engineering@veridis.xyz"
    veridis.xyz/crypto-officer: "cryptography-architect@veridis.xyz"
    veridis.xyz/ip-counsel: "legal@veridis.xyz"
    veridis.xyz/compliance-contact: "fips-compliance@veridis.xyz"

# Cryptographic Workload Security Specification
spec:
  # ==============================================================================
  # Enhanced Security for Cryptographic Operations
  # ==============================================================================
  privileged: false  # Maintain container security
  hostNetwork: false
  hostIPC: false
  hostPID: false
  hostPorts:
  - min: 0
    max: 0

  # ==============================================================================
  # Cryptographic User Security Controls
  # ==============================================================================
  runAsUser:
    rule: 'MustRunAs'
    ranges:
    - min: 1001   # ZK circuits service user
      max: 1001
    - min: 2000   # GPU processing users
      max: 2999

  runAsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1001   # ZK circuits group
      max: 1001
    - min: 2000   # GPU groups
      max: 2999
    - min: 44     # Video group for GPU access
      max: 44

  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
    - min: 44     # Video group for GPU device access
      max: 44
    - min: 1001   # ZK circuits supplemental groups
      max: 2999

  fsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1001   # ZK circuits file system group
      max: 2999

  # ==============================================================================
  # GPU and Cryptographic Capability Management
  # ==============================================================================
  defaultAllowPrivilegedEscalation: false
  allowPrivilegeEscalation: false

  requiredDropCapabilities:
  - ALL

  # GPU and cryptographic specific capabilities
  allowedCapabilities:
  - SYS_RAWIO      # Raw I/O operations for GPU access
  - MLOCK          # Memory locking for secure key storage
  - IPC_LOCK       # IPC locking for shared memory operations
  - DAC_OVERRIDE   # Override access controls for GPU devices

  # ==============================================================================
  # Cryptographic Volume Security
  # ==============================================================================
  volumes:
  - 'persistentVolumeClaim'  # Circuit cache and temporary data
  - 'secret'                 # Cryptographic keys and certificates
  - 'configMap'              # Circuit configurations
  - 'emptyDir'               # High-performance temporary storage
  - 'projected'              # Service account tokens
  - 'csi'                    # Container Storage Interface
  - 'hostPath'               # GPU device access (restricted paths only)

  # Allow specific host paths for GPU access
  allowedHostPaths:
  - pathPrefix: '/dev/nvidia0'
    readOnly: false
  - pathPrefix: '/dev/nvidiactl'
    readOnly: false
  - pathPrefix: '/dev/nvidia-uvm'
    readOnly: false
  - pathPrefix: '/dev/nvidia-uvm-tools'
    readOnly: false
  - pathPrefix: '/usr/local/cuda'
    readOnly: true

  # Flexible filesystem for GPU operations
  readOnlyRootFilesystem: false  # GPU operations require write access

  # ==============================================================================
  # Enhanced Security Contexts for Cryptographic Operations
  # ==============================================================================
  seLinux:
    rule: 'MustRunAs'
    seLinuxOptions:
      level: 's0:c789,c012'  # High-security MCS labels
      type: 'container_gpu_t'  # Custom SELinux type for GPU containers

  # ==============================================================================
  # FIPS-Compliant Security Profiles
  # ==============================================================================
  allowedProfiles:
  - 'runtime/default'
  - 'localhost/fips-crypto-profile'  # Custom FIPS-compliant profile

  # GPU and cryptographic sysctls
  allowedUnsafeSysctls:
  - 'kernel.shmmax'        # Shared memory for GPU operations
  - 'kernel.shmall'        # Total shared memory
  - 'vm.mlock_limit'       # Memory locking limits
  - 'kernel.msgmax'        # Message queue size for IPC

  forbiddenSysctls:
  - 'net.*'                # Prevent network modifications
  - 'kernel.core_pattern'  # Prevent core dump modifications

---
# ==============================================================================
# Development Pod Security Policy - Balanced Security and Flexibility
# ==============================================================================
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: veridis-development-psp

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-development
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: pod-security-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    security.veridis.xyz/policy-type: pod-security-policy
    security.veridis.xyz/security-level: development-balanced
    security.veridis.xyz/scope: development-workloads
    security.veridis.xyz/enforcement-mode: balanced
    security.veridis.xyz/compliance-tier: basic

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: low
    security.veridis.xyz/threat-mitigation: "basic-security,development-safety"
    security.veridis.xyz/learning-environment: "true"
    security.veridis.xyz/flexibility: "enhanced"

    business.veridis.xyz/criticality: development
    business.veridis.xyz/revenue-impact: none
    business.veridis.xyz/customer-facing: "false"
    business.veridis.xyz/compliance-scope: "basic"
    business.veridis.xyz/innovation-enablement: "maximum"

    veridis.xyz/environment: development
    veridis.xyz/team: development
    veridis.xyz/cost-center: engineering
    veridis.xyz/learning-environment: "true"

    governance.veridis.xyz/policy-enforcement: "relaxed"
    governance.veridis.xyz/exception-process: "team-lead-approval"

  annotations:
    veridis.xyz/description: "Development-focused pod security policy balancing security with developer productivity and learning"
    veridis.xyz/purpose: "Provides essential security controls while enabling rapid development, experimentation, and learning"
    veridis.xyz/scope: "Development workloads, testing environments, learning platforms, experimentation frameworks"

    # Development-focused security approach
    security.veridis.xyz/security-philosophy: "Essential security with maximum developer flexibility and productivity"
    security.veridis.xyz/threat-model: "Minimal threats in isolated development environment with basic protections"
    security.veridis.xyz/risk-acceptance: "Higher risk tolerance for development speed and innovation"

    # Developer experience optimization
    veridis.xyz/developer-experience: "Maximum flexibility, minimal friction, comprehensive debugging capabilities"
    veridis.xyz/learning-support: "Educational security controls, clear error messages, development guidance"
    veridis.xyz/innovation-enablement: "Experimental features, prototype development, architectural exploration"

    # Development safety and isolation
    veridis.xyz/isolation-boundaries: "Development environment isolation, no production data access"
    veridis.xyz/safety-measures: "Resource limits, namespace isolation, automated cleanup, data protection"

    veridis.xyz/owner: "development-team@veridis.xyz"
    veridis.xyz/dev-lead: "development-manager@veridis.xyz"
    veridis.xyz/mentor: "senior-developers@veridis.xyz"

# Development-Focused Security Specification
spec:
  # ==============================================================================
  # Balanced Security for Development Productivity
  # ==============================================================================
  privileged: false  # Maintain basic security
  hostNetwork: false
  hostIPC: false
  hostPID: false
  hostPorts:
  - min: 8000    # Development server ports
    max: 9999

  # ==============================================================================
  # Flexible User Controls for Development
  # ==============================================================================
  runAsUser:
    rule: 'RunAsAny'  # Flexible user execution for development

  runAsGroup:
    rule: 'RunAsAny'  # Flexible group execution

  supplementalGroups:
    rule: 'RunAsAny'  # Allow various supplemental groups

  fsGroup:
    rule: 'RunAsAny'  # Flexible file system groups

  # ==============================================================================
  # Development-Friendly Capability Management
  # ==============================================================================
  defaultAllowPrivilegedEscalation: false
  allowPrivilegeEscalation: true  # Allow for debugging scenarios

  requiredDropCapabilities: []  # No required capability drops

  # Development-friendly capabilities
  allowedCapabilities:
  - NET_BIND_SERVICE  # Bind to privileged ports
  - SYS_PTRACE        # Process tracing for debugging
  - DAC_OVERRIDE      # Override file permissions for development
  - CHOWN             # Change file ownership
  - SETGID            # Set group ID
  - SETUID            # Set user ID

  defaultAddCapabilities: []

  # ==============================================================================
  # Comprehensive Volume Support for Development
  # ==============================================================================
  volumes:
  - 'persistentVolumeClaim'
  - 'secret'
  - 'configMap'
  - 'emptyDir'
  - 'projected'
  - 'csi'
  - 'hostPath'          # Allow host paths for development tools
  - 'gitRepo'           # Git repository access
  - 'downwardAPI'       # Pod metadata access

  # Allow development-specific host paths
  allowedHostPaths:
  - pathPrefix: '/tmp'
    readOnly: false
  - pathPrefix: '/var/tmp'
    readOnly: false
  - pathPrefix: '/home'
    readOnly: false
  - pathPrefix: '/opt/development'
    readOnly: false

  # Flexible filesystem for development
  readOnlyRootFilesystem: false

  # ==============================================================================
  # Development Security Context
  # ==============================================================================
  seLinux:
    rule: 'RunAsAny'  # Flexible SELinux for development

  # ==============================================================================
  # Development Security Profiles
  # ==============================================================================
  allowedProfiles:
  - 'runtime/default'
  - 'unconfined'        # Allow unconfined for debugging
  - 'localhost/*'       # Custom development profiles

  # Development sysctls
  allowedUnsafeSysctls:
  - 'kernel.shmmax'
  - 'kernel.shmall'
  - 'net.core.somaxconn'
  - 'vm.max_map_count'

  forbiddenSysctls: []  # No forbidden sysctls in development

---
# ==============================================================================
# Monitoring Pod Security Policy - Observability Infrastructure
# ==============================================================================
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: veridis-monitoring-psp

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: pod-security-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    security.veridis.xyz/policy-type: pod-security-policy
    security.veridis.xyz/security-level: monitoring-specialized
    security.veridis.xyz/scope: observability-workloads
    security.veridis.xyz/enforcement-mode: high
    security.veridis.xyz/compliance-tier: operational

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: medium
    security.veridis.xyz/threat-mitigation: "data-exposure,unauthorized-access,system-monitoring"
    security.veridis.xyz/data-classification: "operational,metrics,logs"
    security.veridis.xyz/observability: "comprehensive"

    business.veridis.xyz/criticality: operational-critical
    business.veridis.xyz/revenue-impact: indirect
    business.veridis.xyz/customer-facing: "false"
    business.veridis.xyz/compliance-scope: "soc2,gdpr"
    business.veridis.xyz/operational-visibility: "maximum"

    veridis.xyz/environment: production
    veridis.xyz/service: monitoring
    veridis.xyz/team: sre
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "monitoring-control"
    compliance.veridis.xyz/gdpr: "operational-data-processing"
    governance.veridis.xyz/policy-enforcement: "high"

  annotations:
    veridis.xyz/description: "Monitoring infrastructure pod security policy with specialized controls for observability and operational data"
    veridis.xyz/purpose: "Enables secure monitoring operations while protecting operational data and maintaining system observability"
    veridis.xyz/scope: "Prometheus, Grafana, Jaeger, logging infrastructure, alerting systems, metrics collection"

    # Monitoring-specific security requirements
    security.veridis.xyz/monitoring-security: "Operational data protection, metric integrity, log security, dashboard access control"
    security.veridis.xyz/data-sensitivity: "System metrics, application logs, performance data, error information"
    security.veridis.xyz/access-patterns: "Read-heavy workloads, time-series data, log aggregation, real-time monitoring"

    # Operational requirements
    veridis.xyz/availability-requirements: "99.9% monitoring uptime, real-time alerting, historical data retention"
    veridis.xyz/performance-requirements: "High-throughput data ingestion, efficient querying, dashboard responsiveness"
    veridis.xyz/retention-policies: "Metrics 90 days, logs 365 days, traces 30 days, alerts 2 years"

    veridis.xyz/owner: "sre-team@veridis.xyz"
    veridis.xyz/monitoring-lead: "monitoring@veridis.xyz"
    veridis.xyz/ops-contact: "operations@veridis.xyz"

# Monitoring Infrastructure Security Specification
spec:
  # ==============================================================================
  # Monitoring Security Controls
  # ==============================================================================
  privileged: false
  hostNetwork: true   # Required for node-level metrics collection
  hostIPC: false
  hostPID: true       # Required for process monitoring
  hostPorts:
  - min: 9090    # Prometheus
    max: 9099
  - min: 3000    # Grafana
    max: 3000
  - min: 14268   # Jaeger
    max: 14268

  # ==============================================================================
  # Monitoring User Security
  # ==============================================================================
  runAsUser:
    rule: 'MustRunAs'
    ranges:
    - min: 65534  # nobody user for monitoring
      max: 65534
    - min: 472    # Grafana user
      max: 472
    - min: 999    # Prometheus user
      max: 999

  runAsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 65534  # nobody group
      max: 65534
    - min: 472    # Grafana group
      max: 472
    - min: 999    # Prometheus group
      max: 999

  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
    - min: 65534
      max: 65534
    - min: 472
      max: 999

  fsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 472
      max: 999

  # ==============================================================================
  # Monitoring Capability Management
  # ==============================================================================
  defaultAllowPrivilegedEscalation: false
  allowPrivilegeEscalation: false

  requiredDropCapabilities:
  - ALL

  # Monitoring-specific capabilities
  allowedCapabilities:
  - NET_BIND_SERVICE  # Bind to monitoring ports
  - DAC_OVERRIDE      # Read system files for monitoring
  - SYS_PTRACE        # Process monitoring

  # ==============================================================================
  # Monitoring Volume Security
  # ==============================================================================
  volumes:
  - 'persistentVolumeClaim'  # Time-series data storage
  - 'secret'                 # Monitoring credentials
  - 'configMap'              # Monitoring configurations
  - 'emptyDir'               # Temporary data processing
  - 'projected'              # Service account tokens
  - 'csi'                    # Container Storage Interface
  - 'hostPath'               # System monitoring access

  # System monitoring host paths
  allowedHostPaths:
  - pathPrefix: '/proc'
    readOnly: true
  - pathPrefix: '/sys'
    readOnly: true
  - pathPrefix: '/var/lib/docker'
    readOnly: true
  - pathPrefix: '/var/run'
    readOnly: true
  - pathPrefix: '/etc/hostname'
    readOnly: true
  - pathPrefix: '/etc/hosts'
    readOnly: true

  readOnlyRootFilesystem: false  # Monitoring tools need write access

  # ==============================================================================
  # Monitoring Security Context
  # ==============================================================================
  seLinux:
    rule: 'RunAsAny'

  # ==============================================================================
  # Monitoring Security Profiles
  # ==============================================================================
  allowedProfiles:
  - 'runtime/default'
  - 'localhost/monitoring-profile'

  # Monitoring sysctls
  allowedUnsafeSysctls:
  - 'kernel.shmmax'
  - 'kernel.shmall'
  - 'vm.max_map_count'  # Elasticsearch/monitoring backends

  forbiddenSysctls:
  - 'net.ipv4.ip_forward'
  - 'net.ipv6.conf.all.forwarding'

# ==============================================================================
# Pod Security Policy Summary and Implementation Architecture
# ==============================================================================
#
# COMPREHENSIVE CONTAINER SECURITY IMPLEMENTATION:
# ================================================
#
# SECURITY POLICY HIERARCHY:
# --------------------------
# 1. Restricted PSP (veridis-restricted-psp):
#    - Maximum security baseline for all production workloads
#    - Non-root users, no privileged containers, minimal capabilities
#    - Read-only root filesystem, restricted volume types
#    - Comprehensive compliance integration (SOC 2, GDPR, ISO 27001)
#
# 2. Database PSP (veridis-database-psp):
#    - Enhanced data protection for database workloads
#    - Specialized user controls for PostgreSQL operations
#    - Database-specific capabilities and volume permissions
#    - Maximum compliance controls for regulated data
#
# 3. ZK Circuits PSP (veridis-zk-circuits-psp):
#    - Cryptographic workload protection with GPU access
#    - FIPS 140-2 compliance and trade secret protection
#    - Specialized capabilities for GPU operations
#    - Enhanced security for intellectual property
#
# 4. Development PSP (veridis-development-psp):
#    - Balanced security with developer productivity
#    - Flexible controls for rapid development and learning
#    - Enhanced debugging capabilities and tool access
#    - Isolated development environment protections
#
# 5. Monitoring PSP (veridis-monitoring-psp):
#    - Observability infrastructure specialized controls
#    - System-level access for comprehensive monitoring
#    - Operational data protection and integrity
#    - High availability and performance requirements
#
# SECURITY CONTROL IMPLEMENTATION:
# ================================
# Container Hardening:
#   - Non-root user enforcement across all environments
#   - Minimal capability sets with least privilege principle
#   - Read-only root filesystems where operationally feasible
#   - Secure volume type restrictions and mount controls
#
# Runtime Protection:
#   - Seccomp and AppArmor profile enforcement
#   - SELinux security context controls
#   - Process isolation with namespace restrictions
#   - Resource governance with limits and quotas
#
# Specialized Workload Support:
#   - Database operations with data protection controls
#   - GPU workloads with hardware security integration
#   - Cryptographic operations with FIPS compliance
#   - Development workflows with balanced security
#   - Monitoring infrastructure with system access
#
# COMPLIANCE FRAMEWORK ALIGNMENT:
# ===============================
# SOC 2 Type II:
#   - Container security controls (CC6.1, CC6.7)
#   - Access control implementation and monitoring
#   - System security configuration management
#
# GDPR:
#   - Data processing security (Article 32)
#   - Container-level data protection by design
#   - Technical security measures implementation
#
# ISO 27001:
#   - System security controls (A.12.6.1, A.13.1.1)
#   - Access control policy enforcement
#   - Information processing security
#
# PCI DSS:
#   - Secure container deployment (Requirement 2.2)
#   - Cardholder data environment protection
#   - System security configuration standards
#
# FIPS 140-2:
#   - Cryptographic module security (Level 2)
#   - Secure container runtime for crypto operations
#   - Key management and protection controls
#
# OPERATIONAL SECURITY FEATURES:
# ==============================
# Policy Enforcement:
#   - Admission controller integration
#   - Real-time policy violation detection
#   - Automated remediation and alerting
#
# Monitoring and Audit:
#   - Comprehensive security event logging
#   - Policy compliance monitoring and reporting
#   - Security violation investigation and response
#
# Business Continuity:
#   - High-availability workload protection
#   - Disaster recovery security consistency
#   - Emergency access procedures and override controls
#
# Developer Experience:
#   - Clear security guidance and documentation
#   - Development-friendly policies with safety boundaries
#   - Learning-oriented security controls and feedback
#
# ==============================================================================
