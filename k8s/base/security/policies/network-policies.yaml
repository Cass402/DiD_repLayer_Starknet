# ==============================================================================
# Veridis Decentralized Identity Protocol - Network Policies
# ==============================================================================
#
# This manifest defines comprehensive network policies for the Veridis deployment,
# providing:
#
# ZERO-TRUST NETWORK ARCHITECTURE:
#   • Default deny-all policies with explicit allow rules for required communication
#   • Microsegmentation between application tiers and infrastructure components
#   • Service-to-service authentication and authorization through network controls
#   • East-west traffic encryption and inspection with service mesh integration
#   • North-south traffic control with ingress/egress filtering and monitoring
#
# DEFENSE-IN-DEPTH NETWORK SECURITY:
#   • Layer 3/4 network segmentation with Kubernetes NetworkPolicies
#   • Layer 7 application-aware policies through service mesh integration
#   • DNS security with controlled resolution and monitoring
#   • Container-to-container communication restrictions and audit logging
#   • External network access controls with geographical and threat intelligence
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II network security controls and network access monitoring
#   • GDPR data flow control with network-level data protection measures
#   • ISO 27001 network access control and network security management
#   • PCI DSS network segmentation for cardholder data environment isolation
#   • NIST Cybersecurity Framework network security implementation
#
# ENTERPRISE NETWORK FEATURES:
#   • Multi-tenant network isolation with namespace-based segmentation
#   • Cross-cluster communication policies for hybrid and multi-cloud deployments
#   • Network-based disaster recovery and business continuity controls
#   • Integration with enterprise SIEM and network monitoring platforms
#   • Automated network policy management with GitOps and infrastructure as code
#
# OPERATIONAL SECURITY CONTROLS:
#   • Real-time network traffic monitoring and anomaly detection
#   • Automated threat response with network-based incident containment
#   • Network forensics and audit trail preservation for compliance
#   • Emergency network isolation procedures for incident response
#   • Performance optimization with intelligent traffic routing and load balancing
#
# ==============================================================================

# ==============================================================================
# Default Deny-All Network Policy - Foundation Security Control
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: veridis-default-deny-all
  namespace: veridis

  # Core resource identification labels
  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Network policy specific classification
    network.veridis.xyz/policy-type: default-deny
    network.veridis.xyz/scope: namespace-wide
    network.veridis.xyz/security-tier: foundation
    network.veridis.xyz/policy-category: baseline-security
    network.veridis.xyz/enforcement-level: strict

    # Security classification
    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: critical
    security.veridis.xyz/threat-mitigation: "lateral-movement,data-exfiltration,unauthorized-access"
    security.veridis.xyz/zero-trust: "enabled"
    security.veridis.xyz/audit-level: "comprehensive"

    # Business classification
    business.veridis.xyz/criticality: system-critical
    business.veridis.xyz/impact-level: maximum
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,pci-dss,nist"
    business.veridis.xyz/security-investment: "tier-1"

    # Operational labels
    veridis.xyz/environment: production
    veridis.xyz/team: security
    veridis.xyz/cost-center: security-operations
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "network-security-control"
    compliance.veridis.xyz/gdpr: "data-protection-by-design"
    compliance.veridis.xyz/iso27001: "network-access-control"
    compliance.veridis.xyz/pci-dss: "network-segmentation"
    compliance.veridis.xyz/nist: "access-control-implementation"
    governance.veridis.xyz/policy-enforcement: "mandatory"

  annotations:
    # Policy purpose and implementation
    veridis.xyz/description: "Foundation default deny-all network policy implementing zero-trust network architecture with comprehensive traffic control"
    veridis.xyz/purpose: "Establishes baseline security posture by denying all network traffic and requiring explicit allow rules for legitimate communication"
    veridis.xyz/scope: "All pods in veridis namespace - ingress and egress traffic control with explicit allow requirements"

    # Zero-trust architecture implementation
    security.veridis.xyz/zero-trust-principle: "Never trust, always verify - all network communication requires explicit authorization"
    security.veridis.xyz/security-model: "Default deny with explicit allow, least privilege network access, continuous verification"
    security.veridis.xyz/threat-landscape: "Insider threats, lateral movement, privilege escalation, data exfiltration, advanced persistent threats"

    # Compliance and regulatory alignment
    compliance.veridis.xyz/regulatory-requirement: "SOC 2 CC6.1, GDPR Article 32, ISO 27001 A.13.1.1, PCI DSS 1.2.1, NIST 800-53 AC-4"
    compliance.veridis.xyz/control-objective: "Prevent unauthorized network access, enforce network segmentation, enable audit and monitoring"
    compliance.veridis.xyz/evidence-collection: "Network policy enforcement logs, traffic analysis reports, compliance validation results"

    # Operational impact and management
    veridis.xyz/operational-impact: "All network communication must be explicitly allowed through dedicated network policies"
    veridis.xyz/troubleshooting: "Check specific service network policies if communication fails, verify label selectors and port specifications"
    veridis.xyz/monitoring-integration: "Network policy violations logged to SIEM, real-time alerting on policy enforcement failures"

    # Emergency procedures and business continuity
    veridis.xyz/emergency-override: "Network policies can be temporarily relaxed through emergency change management process"
    veridis.xyz/business-continuity: "Critical service communication paths protected with redundant policy rules"
    veridis.xyz/incident-response: "Network isolation capabilities for containment, forensic network traffic preservation"

    # Performance and optimization considerations
    veridis.xyz/performance-impact: "Minimal - policies evaluated at connection establishment, not per-packet"
    veridis.xyz/optimization-notes: "Policies optimized for Kubernetes native implementation, CNI plugin compatibility verified"

    # Contact information and ownership
    veridis.xyz/owner: "security-team@veridis.xyz"
    veridis.xyz/network-admin: "network-security@veridis.xyz"
    veridis.xyz/compliance-contact: "compliance@veridis.xyz"
    veridis.xyz/escalation: "ciso@veridis.xyz"

    # Documentation and procedures
    veridis.xyz/policy-documentation: "https://docs.veridis.xyz/security/network-policies"
    veridis.xyz/change-management: "All changes require security team approval and compliance validation"
    veridis.xyz/testing-procedures: "Network policy testing in staging environment before production deployment"

# Apply to all pods in the namespace
spec:
  podSelector: {}

  # Deny all ingress and egress traffic by default
  policyTypes:
  - Ingress
  - Egress

  # Empty ingress and egress rules = deny all
  ingress: []
  egress: []

---
# ==============================================================================
# Veridis Backend Service - Network Communication Policy
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: veridis-backend-network-policy
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    network.veridis.xyz/policy-type: service-specific
    network.veridis.xyz/scope: backend-service
    network.veridis.xyz/security-tier: application
    network.veridis.xyz/policy-category: service-communication
    network.veridis.xyz/enforcement-level: strict

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: high
    security.veridis.xyz/threat-mitigation: "unauthorized-api-access,data-breach,service-disruption"
    security.veridis.xyz/data-classification: "confidential,restricted"
    security.veridis.xyz/audit-level: "comprehensive"

    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/revenue-impact: direct
    business.veridis.xyz/customer-facing: "true"
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,pci-dss"
    business.veridis.xyz/sla-tier: "platinum"

    veridis.xyz/environment: production
    veridis.xyz/service: backend
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "application-security-control"
    compliance.veridis.xyz/gdpr: "data-processing-control"
    compliance.veridis.xyz/iso27001: "application-access-control"
    compliance.veridis.xyz/pci-dss: "cardholder-data-access"
    governance.veridis.xyz/policy-enforcement: "strict"

  annotations:
    veridis.xyz/description: "Backend service network policy controlling API access, database connectivity, and external service communication with comprehensive security controls"
    veridis.xyz/purpose: "Enables secure backend service communication while maintaining zero-trust network architecture and compliance requirements"
    veridis.xyz/scope: "Backend API access, database connectivity, cache access, blockchain integration, monitoring, and external service communication"

    # Service communication patterns
    veridis.xyz/ingress-patterns: "Load balancer traffic, service mesh proxy, health checks, monitoring systems"
    veridis.xyz/egress-patterns: "Database connections, cache operations, blockchain RPC, external APIs, monitoring exports"
    veridis.xyz/internal-communication: "Redis cache, PostgreSQL database, Vault secrets, ZK circuits service"

    # Security and compliance controls
    security.veridis.xyz/encryption-requirements: "All communication encrypted in transit, mTLS for service mesh"
    security.veridis.xyz/authentication: "Service mesh authentication, database authentication, API key validation"
    security.veridis.xyz/authorization: "Role-based access control, fine-grained API permissions, data access controls"

    # Performance and availability
    veridis.xyz/performance-requirements: "Sub-100ms API latency, 99.9% availability, horizontal scalability"
    veridis.xyz/connection-limits: "Database connection pooling, cache connection optimization, rate limiting"
    veridis.xyz/health-monitoring: "Kubernetes health checks, application metrics, dependency monitoring"

    # Data flow and compliance
    compliance.veridis.xyz/data-flow: "Customer PII, authentication data, transaction records, audit logs"
    compliance.veridis.xyz/data-residence: "EU and US data centers, compliance with data sovereignty requirements"
    compliance.veridis.xyz/audit-trail: "All network connections logged, data access tracking, compliance reporting"

    # Operational procedures
    veridis.xyz/troubleshooting: "Check service discovery, verify database connectivity, validate cache access"
    veridis.xyz/scaling-considerations: "Auto-scaling compatible, load balancer health checks, graceful shutdown"
    veridis.xyz/maintenance-windows: "Rolling updates supported, zero-downtime deployments, canary releases"

    veridis.xyz/owner: "backend-team@veridis.xyz"
    veridis.xyz/service-owner: "platform-engineering@veridis.xyz"
    veridis.xyz/security-contact: "security@veridis.xyz"

# Apply to backend service pods
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: veridis
      app.kubernetes.io/component: backend

  policyTypes:
  - Ingress
  - Egress

  # ==============================================================================
  # Ingress Rules - Inbound Traffic Control
  # ==============================================================================
  ingress:
  # Load balancer and ingress controller access
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: istio-gateway
    ports:
    - protocol: TCP
      port: 8080  # Backend API port
    - protocol: TCP
      port: 8443  # HTTPS API port

  # Service mesh sidecar communication
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: backend
    ports:
    - protocol: TCP
      port: 15000  # Envoy admin
    - protocol: TCP
      port: 15001  # Envoy outbound
    - protocol: TCP
      port: 15006  # Envoy inbound
    - protocol: TCP
      port: 15020  # Envoy health check
    - protocol: TCP
      port: 15021  # Envoy health check

  # ZK Circuits service communication
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: zk-circuits
    ports:
    - protocol: TCP
      port: 8080  # Internal API communication

  # Frontend UI communication
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: ui
    ports:
    - protocol: TCP
      port: 8080  # API access from UI

  # Monitoring and observability access
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: grafana
    - podSelector:
        matchLabels:
          app: jaeger
    ports:
    - protocol: TCP
      port: 9090  # Prometheus metrics
    - protocol: TCP
      port: 8080  # Health checks
    - protocol: TCP
      port: 14268 # Jaeger traces

  # Kubernetes health checks and probes
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8080  # Liveness/readiness probes

  # ==============================================================================
  # Egress Rules - Outbound Traffic Control
  # ==============================================================================
  egress:
  # DNS resolution (required for all external connectivity)
  - to: []
    ports:
    - protocol: UDP
      port: 53   # DNS
    - protocol: TCP
      port: 53   # DNS over TCP

  # PostgreSQL database access
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: database
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL

  # Redis cache access
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: cache
    ports:
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 26379 # Redis Sentinel

  # HashiCorp Vault secrets access
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: vault
    ports:
    - protocol: TCP
      port: 8200  # Vault API

  # StarkNet blockchain access
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: starknet-devnet
    ports:
    - protocol: TCP
      port: 5050  # StarkNet RPC

  # ZK Circuits service communication
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: zk-circuits
    ports:
    - protocol: TCP
      port: 4000  # ZK Circuits API

  # External blockchain networks (production networks)
  - to: []
    ports:
    - protocol: TCP
      port: 443   # HTTPS for blockchain APIs
    - protocol: TCP
      port: 8545  # Ethereum RPC
    - protocol: TCP
      port: 8546  # Ethereum WebSocket
    - protocol: TCP
      port: 26657 # Cosmos RPC

  # External API services and integrations
  - to: []
    ports:
    - protocol: TCP
      port: 443   # HTTPS external APIs
    - protocol: TCP
      port: 80    # HTTP external APIs (deprecated)

  # Monitoring and logging exports
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090  # Prometheus
    - protocol: TCP
      port: 14250 # Jaeger collector
    - protocol: TCP
      port: 3100  # Loki logs

  # Service mesh control plane
  - to:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 15010 # Pilot discovery
    - protocol: TCP
      port: 15011 # Pilot webhook
    - protocol: TCP
      port: 15014 # Pilot health

---
# ==============================================================================
# ZK Circuits Service - Cryptographic Network Policy
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: veridis-zk-circuits-network-policy
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    network.veridis.xyz/policy-type: service-specific
    network.veridis.xyz/scope: zk-circuits-service
    network.veridis.xyz/security-tier: cryptographic
    network.veridis.xyz/policy-category: specialized-service
    network.veridis.xyz/enforcement-level: maximum

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: critical
    security.veridis.xyz/threat-mitigation: "crypto-key-exposure,algorithm-theft,side-channel-attacks"
    security.veridis.xyz/data-classification: "cryptographic-material,trade-secrets"
    security.veridis.xyz/fips-compliance: "required"

    business.veridis.xyz/criticality: business-critical
    business.veridis.xyz/revenue-impact: direct
    business.veridis.xyz/ip-protection: "maximum"
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,fips-140-2"
    business.veridis.xyz/competitive-advantage: "core-technology"

    veridis.xyz/environment: production
    veridis.xyz/service: zk-circuits
    veridis.xyz/team: cryptography-engineering
    veridis.xyz/cost-center: research-development

    compliance.veridis.xyz/soc2: "cryptographic-control"
    compliance.veridis.xyz/fips-140-2: "level-2-network-security"
    compliance.veridis.xyz/iso27001: "cryptographic-key-management"
    governance.veridis.xyz/policy-enforcement: "maximum"

  annotations:
    veridis.xyz/description: "ZK circuits service network policy with specialized security controls for cryptographic operations and intellectual property protection"
    veridis.xyz/purpose: "Protects cryptographic algorithms and GPU resources while enabling secure proof generation with maximum security controls"
    veridis.xyz/scope: "GPU-accelerated proof generation, cryptographic key management, algorithm protection, performance optimization"

    # Cryptographic security requirements
    security.veridis.xyz/crypto-isolation: "Dedicated network segments for cryptographic operations, encrypted communication only"
    security.veridis.xyz/key-management: "Secure key distribution, hardware security module integration, key rotation procedures"
    security.veridis.xyz/algorithm-protection: "Proprietary algorithm confidentiality, performance data protection, optimization secrets"

    # GPU and performance considerations
    veridis.xyz/gpu-networking: "GPU-direct networking, high-bandwidth memory access, CUDA optimization"
    veridis.xyz/performance-requirements: "Low-latency proof generation, parallel processing, optimal GPU utilization"
    veridis.xyz/resource-management: "GPU memory management, compute scheduling, thermal management"

    # Intellectual property and trade secret protection
    business.veridis.xyz/ip-controls: "Algorithm confidentiality, performance optimization secrets, proprietary techniques"
    business.veridis.xyz/competitive-intelligence: "Performance benchmarks, optimization methods, efficiency improvements"
    business.veridis.xyz/trade-secret-protection: "Non-disclosure enforcement, access logging, confidentiality monitoring"

    # Compliance and audit requirements
    compliance.veridis.xyz/fips-requirements: "FIPS 140-2 Level 2 cryptographic operations, validated algorithms only"
    compliance.veridis.xyz/audit-scope: "All cryptographic operations, key access, algorithm execution, performance data"
    compliance.veridis.xyz/evidence-preservation: "Cryptographic audit logs, key usage tracking, algorithm execution records"

    veridis.xyz/owner: "zk-engineering@veridis.xyz"
    veridis.xyz/crypto-officer: "cryptography-architect@veridis.xyz"
    veridis.xyz/ip-counsel: "legal@veridis.xyz"
    veridis.xyz/security-contact: "security@veridis.xyz"

# Apply to ZK circuits service pods
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: veridis
      app.kubernetes.io/component: zk-circuits

  policyTypes:
  - Ingress
  - Egress

  # ==============================================================================
  # Ingress Rules - Cryptographic Service Access
  # ==============================================================================
  ingress:
  # Backend service communication for proof requests
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: backend
    ports:
    - protocol: TCP
      port: 4000  # ZK Circuits API

  # Service mesh sidecar communication
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: zk-circuits
    ports:
    - protocol: TCP
      port: 15000  # Envoy admin
    - protocol: TCP
      port: 15001  # Envoy outbound
    - protocol: TCP
      port: 15006  # Envoy inbound
    - protocol: TCP
      port: 15020  # Envoy health check

  # Monitoring access (restricted for cryptographic service)
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9091  # Prometheus metrics (filtered)
    - protocol: TCP
      port: 4000  # Health checks only

  # GPU monitoring and management (NVIDIA tools)
  - from:
    - namespaceSelector:
        matchLabels:
          name: gpu-operator-resources
    - podSelector:
        matchLabels:
          app: nvidia-device-plugin
    ports:
    - protocol: TCP
      port: 9400  # GPU metrics

  # ==============================================================================
  # Egress Rules - Cryptographic Service Dependencies
  # ==============================================================================
  egress:
  # DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

  # Redis cache for circuit caching and performance optimization
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: cache
    ports:
    - protocol: TCP
      port: 6379  # Redis

  # Vault for cryptographic key management
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: vault
    ports:
    - protocol: TCP
      port: 8200  # Vault API (cryptographic keys)

  # Backend service communication for proof responses
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: backend
    ports:
    - protocol: TCP
      port: 8080  # Backend API

  # External cryptographic libraries and updates (restricted)
  - to: []
    ports:
    - protocol: TCP
      port: 443   # HTTPS only for security updates

  # GPU driver and CUDA libraries communication
  - to:
    - namespaceSelector:
        matchLabels:
          name: gpu-operator-resources
    ports:
    - protocol: TCP
      port: 2379  # GPU operator communication

  # Monitoring exports (filtered for sensitive data)
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090  # Prometheus (filtered metrics)

  # Service mesh control plane
  - to:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 15010 # Pilot discovery

---
# ==============================================================================
# Database Service - Data Protection Network Policy
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: veridis-database-network-policy
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    network.veridis.xyz/policy-type: infrastructure-service
    network.veridis.xyz/scope: database-service
    network.veridis.xyz/security-tier: data-protection
    network.veridis.xyz/policy-category: critical-infrastructure
    network.veridis.xyz/enforcement-level: maximum

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: critical
    security.veridis.xyz/threat-mitigation: "data-breach,unauthorized-access,data-exfiltration"
    security.veridis.xyz/data-classification: "confidential,restricted,regulated"
    security.veridis.xyz/encryption-required: "mandatory"

    business.veridis.xyz/criticality: system-critical
    business.veridis.xyz/revenue-impact: direct
    business.veridis.xyz/data-sovereignty: "regulated"
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,pci-dss"
    business.veridis.xyz/disaster-recovery: "tier-1"

    veridis.xyz/environment: production
    veridis.xyz/service: database
    veridis.xyz/team: database-administration
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "data-security-control"
    compliance.veridis.xyz/gdpr: "data-controller-infrastructure"
    compliance.veridis.xyz/iso27001: "information-storage-security"
    compliance.veridis.xyz/pci-dss: "cardholder-data-environment"
    governance.veridis.xyz/policy-enforcement: "maximum"

  annotations:
    veridis.xyz/description: "Database service network policy with maximum security controls for customer data protection and regulatory compliance"
    veridis.xyz/purpose: "Protects customer data and ensures compliance with data protection regulations through strict network access controls"
    veridis.xyz/scope: "Customer PII, authentication data, transaction records, audit logs, configuration data, cryptographic material"

    # Data protection and compliance
    security.veridis.xyz/data-protection: "Customer PII encryption, audit trail integrity, access logging, data residency compliance"
    security.veridis.xyz/regulatory-compliance: "GDPR Article 32 technical measures, PCI DSS data security, SOC 2 data integrity"
    security.veridis.xyz/threat-modeling: "Database attacks, privilege escalation, data exfiltration, insider threats"

    # High availability and disaster recovery
    veridis.xyz/ha-requirements: "99.99% availability, automatic failover, read replica support, backup verification"
    veridis.xyz/disaster-recovery: "RTO 15 minutes, RPO 5 minutes, cross-region replication, automated recovery"
    veridis.xyz/backup-security: "Encrypted backups, secure storage, access auditing, retention compliance"

    # Performance and scalability
    veridis.xyz/performance-requirements: "Sub-10ms query latency, connection pooling, read scaling, write optimization"
    veridis.xyz/capacity-planning: "Automated scaling, resource monitoring, performance optimization, cost management"

    veridis.xyz/owner: "database-team@veridis.xyz"
    veridis.xyz/dba: "dba@veridis.xyz"
    veridis.xyz/security-contact: "data-protection@veridis.xyz"
    veridis.xyz/compliance-contact: "dpo@veridis.xyz"

# Apply to database service pods
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: veridis
      app.kubernetes.io/component: database

  policyTypes:
  - Ingress
  - Egress

  # ==============================================================================
  # Ingress Rules - Database Access Control
  # ==============================================================================
  ingress:
  # Backend service database access
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: backend
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL

  # Database administration access
  - from:
    - podSelector:
        matchLabels:
          veridis.xyz/role: database-admin
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL admin access

  # Backup and maintenance jobs
  - from:
    - podSelector:
        matchLabels:
          veridis.xyz/role: backup-operator
    - podSelector:
        matchLabels:
          batch.kubernetes.io/job-name: postgres-backup
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL backup

  # Monitoring and health checks
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: postgres-exporter
    ports:
    - protocol: TCP
      port: 9187  # PostgreSQL exporter
    - protocol: TCP
      port: 5432  # Health checks

  # Database replication (for HA setup)
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: database
          veridis.xyz/replica-role: secondary
    ports:
    - protocol: TCP
      port: 5432  # Replication

  # ==============================================================================
  # Egress Rules - Database External Dependencies
  # ==============================================================================
  egress:
  # DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

  # Database replication to secondary instances
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: database
          veridis.xyz/replica-role: secondary
    ports:
    - protocol: TCP
      port: 5432  # Replication

  # Backup storage access (encrypted)
  - to: []
    ports:
    - protocol: TCP
      port: 443   # HTTPS to backup storage

  # Monitoring exports
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090  # Prometheus metrics

  # Security and audit logging
  - to:
    - namespaceSelector:
        matchLabels:
          name: logging
    ports:
    - protocol: TCP
      port: 24224 # Fluent Bit log forwarding

---
# ==============================================================================
# Frontend UI Service - User-Facing Network Policy
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: veridis-ui-network-policy
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    network.veridis.xyz/policy-type: service-specific
    network.veridis.xyz/scope: frontend-ui
    network.veridis.xyz/security-tier: presentation
    network.veridis.xyz/policy-category: user-facing
    network.veridis.xyz/enforcement-level: standard

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: medium
    security.veridis.xyz/threat-mitigation: "xss-attacks,csrf-attacks,unauthorized-access"
    security.veridis.xyz/data-classification: "public,internal"
    security.veridis.xyz/user-facing: "true"

    business.veridis.xyz/criticality: business-important
    business.veridis.xyz/revenue-impact: indirect
    business.veridis.xyz/customer-facing: "true"
    business.veridis.xyz/compliance-scope: "gdpr,accessibility"
    business.veridis.xyz/user-experience: "critical"

    veridis.xyz/environment: production
    veridis.xyz/service: ui
    veridis.xyz/team: frontend-engineering
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/gdpr: "user-interface-compliance"
    governance.veridis.xyz/policy-enforcement: "standard"

  annotations:
    veridis.xyz/description: "Frontend UI service network policy enabling secure user access while protecting against web application threats"
    veridis.xyz/purpose: "Provides secure user interface access with web application security controls and performance optimization"
    veridis.xyz/scope: "User interface rendering, API proxy, static asset serving, authentication flows, session management"

    # User experience and performance
    veridis.xyz/performance-requirements: "Sub-2s page load, 99.5% availability, global CDN integration"
    veridis.xyz/scalability: "Auto-scaling based on traffic, edge caching, content optimization"
    veridis.xyz/user-experience: "Responsive design, accessibility compliance, progressive web app features"

    # Security for web applications
    security.veridis.xyz/web-security: "Content Security Policy, XSS protection, CSRF prevention, secure headers"
    security.veridis.xyz/session-management: "Secure cookies, session timeout, concurrent session limits"
    security.veridis.xyz/authentication-integration: "OIDC integration, MFA support, social login"

    veridis.xyz/owner: "frontend-team@veridis.xyz"
    veridis.xyz/ui-lead: "ui-engineering@veridis.xyz"
    veridis.xyz/ux-contact: "user-experience@veridis.xyz"

# Apply to UI service pods
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: veridis
      app.kubernetes.io/component: ui

  policyTypes:
  - Ingress
  - Egress

  # ==============================================================================
  # Ingress Rules - User Access and Load Balancing
  # ==============================================================================
  ingress:
  # Load balancer and ingress controller access
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 3000  # React/Next.js application
    - protocol: TCP
      port: 8080  # Health checks

  # CDN and edge cache access
  - from: []  # Allow from anywhere for CDN
    ports:
    - protocol: TCP
      port: 3000  # Public web access
    - protocol: TCP
      port: 8080  # Health checks

  # Service mesh sidecar communication
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: ui
    ports:
    - protocol: TCP
      port: 15000  # Envoy admin
    - protocol: TCP
      port: 15001  # Envoy outbound
    - protocol: TCP
      port: 15006  # Envoy inbound

  # Monitoring access
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9092  # UI metrics
    - protocol: TCP
      port: 8080  # Health checks

  # ==============================================================================
  # Egress Rules - Backend API and External Dependencies
  # ==============================================================================
  egress:
  # DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

  # Backend API access
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
          app.kubernetes.io/component: backend
    ports:
    - protocol: TCP
      port: 8080  # Backend API

  # External APIs and services
  - to: []
    ports:
    - protocol: TCP
      port: 443   # HTTPS external APIs
    - protocol: TCP
      port: 80    # HTTP (deprecated, for legacy support)

  # CDN and static asset serving
  - to: []
    ports:
    - protocol: TCP
      port: 443   # CDN integration

  # Authentication providers (OIDC, OAuth)
  - to: []
    ports:
    - protocol: TCP
      port: 443   # External auth providers

  # Monitoring exports
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090  # Prometheus metrics

  # Service mesh control plane
  - to:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 15010 # Pilot discovery

---
# ==============================================================================
# Inter-Service Communication Policy - Service Mesh Integration
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: veridis-service-mesh-communication
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    network.veridis.xyz/policy-type: service-mesh
    network.veridis.xyz/scope: inter-service
    network.veridis.xyz/security-tier: infrastructure
    network.veridis.xyz/policy-category: mesh-communication
    network.veridis.xyz/enforcement-level: high

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/encryption: "mtls-required"
    security.veridis.xyz/authentication: "service-identity"
    security.veridis.xyz/authorization: "policy-based"
    security.veridis.xyz/observability: "comprehensive"

    veridis.xyz/environment: production
    veridis.xyz/service: service-mesh
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: engineering

    governance.veridis.xyz/policy-enforcement: "high"

  annotations:
    veridis.xyz/description: "Service mesh communication policy enabling secure inter-service communication with mTLS and identity-based authorization"
    veridis.xyz/purpose: "Provides secure service-to-service communication with encryption, authentication, and comprehensive observability"
    veridis.xyz/scope: "All inter-service communication, service discovery, load balancing, circuit breaking, retry policies"

    # Service mesh features
    security.veridis.xyz/mtls: "Automatic mutual TLS encryption for all service communication"
    security.veridis.xyz/identity: "SPIFFE-based workload identity, certificate rotation, trust domain validation"
    security.veridis.xyz/policy-enforcement: "Fine-grained authorization policies, traffic routing, rate limiting"

    # Observability and monitoring
    veridis.xyz/observability: "Distributed tracing, metrics collection, access logging, traffic analysis"
    veridis.xyz/monitoring-integration: "Prometheus metrics, Jaeger tracing, Grafana dashboards, alerting"

    veridis.xyz/owner: "platform-engineering@veridis.xyz"
    veridis.xyz/service-mesh-admin: "service-mesh@veridis.xyz"

# Apply to all pods in the namespace for service mesh
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: veridis

  policyTypes:
  - Ingress
  - Egress

  # ==============================================================================
  # Service Mesh Ingress Rules
  # ==============================================================================
  ingress:
  # Service mesh sidecar proxy communication
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
    ports:
    - protocol: TCP
      port: 15000  # Envoy admin interface
    - protocol: TCP
      port: 15001  # Envoy outbound listener
    - protocol: TCP
      port: 15006  # Envoy inbound listener
    - protocol: TCP
      port: 15020  # Envoy health check
    - protocol: TCP
      port: 15021  # Envoy readiness probe

  # Service mesh control plane access
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 15090  # Envoy Prometheus metrics

  # ==============================================================================
  # Service Mesh Egress Rules
  # ==============================================================================
  egress:
  # Service mesh control plane communication
  - to:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 15010  # Pilot discovery service
    - protocol: TCP
      port: 15011  # Pilot configuration
    - protocol: TCP
      port: 15014  # Pilot health

  # Inter-service communication via service mesh
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: veridis
    ports:
    - protocol: TCP
      port: 15001  # Envoy outbound
    - protocol: TCP
      port: 15006  # Envoy inbound

---
# ==============================================================================
# External Access Policy - Controlled Internet Connectivity
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: veridis-external-access-policy
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    network.veridis.xyz/policy-type: external-access
    network.veridis.xyz/scope: internet-connectivity
    network.veridis.xyz/security-tier: perimeter
    network.veridis.xyz/policy-category: external-communication
    network.veridis.xyz/enforcement-level: high

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/threat-mitigation: "data-exfiltration,malware-communication,unauthorized-access"
    security.veridis.xyz/monitoring: "comprehensive"
    security.veridis.xyz/threat-intelligence: "enabled"

    veridis.xyz/environment: production
    veridis.xyz/team: security
    veridis.xyz/cost-center: security-operations

    governance.veridis.xyz/policy-enforcement: "high"

  annotations:
    veridis.xyz/description: "External access policy controlling internet connectivity with comprehensive security controls and threat intelligence integration"
    veridis.xyz/purpose: "Enables secure external connectivity while preventing data exfiltration and malicious communication"
    veridis.xyz/scope: "Blockchain networks, external APIs, software updates, monitoring services, authentication providers"

    # External connectivity security
    security.veridis.xyz/allowed-destinations: "Approved blockchain networks, verified API endpoints, trusted CDNs, official repositories"
    security.veridis.xyz/blocked-destinations: "Known malicious IPs, suspicious domains, data exfiltration sites, unauthorized services"
    security.veridis.xyz/monitoring-integration: "SIEM integration, threat intelligence feeds, anomaly detection, traffic analysis"

    # Compliance and audit
    compliance.veridis.xyz/data-egress-monitoring: "All external communication logged and analyzed for compliance"
    compliance.veridis.xyz/threat-detection: "Real-time threat intelligence, behavioral analysis, automated response"

    veridis.xyz/owner: "security-team@veridis.xyz"
    veridis.xyz/network-security: "network-security@veridis.xyz"

# Apply to all pods requiring external access
spec:
  podSelector:
    matchLabels:
      veridis.xyz/external-access: "required"

  policyTypes:
  - Egress

  # ==============================================================================
  # Controlled External Egress Rules
  # ==============================================================================
  egress:
  # DNS resolution (required for all external connectivity)
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

  # HTTPS external APIs and services (controlled)
  - to: []
    ports:
    - protocol: TCP
      port: 443

  # Blockchain network access (specific networks only)
  - to: []
    ports:
    - protocol: TCP
      port: 8545   # Ethereum RPC
    - protocol: TCP
      port: 8546   # Ethereum WebSocket
    - protocol: TCP
      port: 26657  # Cosmos RPC
    - protocol: TCP
      port: 9944   # Polkadot RPC

  # Software updates and package repositories (secure channels only)
  - to: []
    ports:
    - protocol: TCP
      port: 443    # HTTPS package repositories

  # NTP time synchronization
  - to: []
    ports:
    - protocol: UDP
      port: 123

# ==============================================================================
# Network Policy Summary and Security Architecture
# ==============================================================================
#
# COMPREHENSIVE NETWORK SECURITY IMPLEMENTATION:
# ==============================================
#
# ZERO-TRUST NETWORK ARCHITECTURE:
# --------------------------------
# 1. Default Deny-All Policy:
#    - Foundation security control denying all traffic by default
#    - Explicit allow rules required for all communication
#    - Comprehensive audit logging and compliance integration
#    - Emergency procedures and business continuity controls
#
# 2. Service-Specific Policies:
#    - Backend Service: API access, database connectivity, external integration
#    - ZK Circuits: Cryptographic operations, GPU resources, IP protection
#    - Database: Maximum security, data protection, compliance controls
#    - Frontend UI: User access, web security, performance optimization
#
# 3. Infrastructure Policies:
#    - Service Mesh: mTLS encryption, identity-based authorization
#    - External Access: Controlled internet connectivity, threat intelligence
#
# SECURITY CONTROLS IMPLEMENTATION:
# =================================
# - Network Microsegmentation: Pods isolated by function and security tier
# - Encryption in Transit: mTLS for all internal communication
# - Identity-Based Access: Service mesh workload identity and authentication
# - Threat Detection: Network traffic monitoring and anomaly detection
# - Compliance Integration: SOC 2, GDPR, ISO 27001, PCI DSS, FIPS 140-2
#
# OPERATIONAL SECURITY FEATURES:
# ==============================
# - Real-time Monitoring: Network traffic analysis and alerting
# - Incident Response: Network isolation and forensic preservation
# - Business Continuity: Redundant communication paths and failover
# - Performance Optimization: Intelligent routing and load balancing
# - Audit and Compliance: Comprehensive logging and evidence collection
#
# COMPLIANCE FRAMEWORK ALIGNMENT:
# ===============================
# SOC 2 Type II: Network security controls and access monitoring
# GDPR: Data flow control and network-level data protection
# ISO 27001: Network access control and security management
# PCI DSS: Network segmentation for cardholder data environment
# FIPS 140-2: Cryptographic communication and key management
#
# THREAT MITIGATION COVERAGE:
# ===========================
# - Lateral Movement: Microsegmentation prevents unauthorized access
# - Data Exfiltration: Controlled external access and monitoring
# - Insider Threats: Zero-trust model with explicit permissions
# - Advanced Persistent Threats: Multi-layered detection and response
# - Cryptographic Attacks: Specialized protection for ZK circuits
#
# ==============================================================================
