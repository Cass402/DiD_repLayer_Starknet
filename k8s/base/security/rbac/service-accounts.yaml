# ==============================================================================
# Veridis Decentralized Identity Protocol - Service Accounts
# ==============================================================================
#
# This manifest defines comprehensive service accounts for the Veridis namespace,
# providing:
#
# SECURITY ARCHITECTURE:
#   • Least privilege access control with role-based permissions
#   • Service-specific identity isolation and authentication
#   • Automated secret management with token rotation
#   • Cross-service authentication and authorization
#   • Integration with external identity providers and systems
#
# SERVICE IDENTITY MANAGEMENT:
#   • Unique service accounts for each component and workload type
#   • Hierarchical permission structure with inheritance
#   • Service mesh integration with workload identity
#   • Kubernetes-native authentication and authorization
#   • External system integration with service account tokens
#
# COMPLIANCE FRAMEWORK:
#   • SOC 2 Type II identity and access management controls
#   • GDPR data processing authorization and audit trails
#   • ISO 27001 access control and identity management
#   • Zero-trust security model with explicit permissions
#   • Comprehensive audit logging and access monitoring
#
# OPERATIONAL SECURITY:
#   • Automated token lifecycle management and rotation
#   • Integration with HashiCorp Vault for secret management
#   • Service mesh mTLS certificate management
#   • Cross-cluster and cross-cloud authentication
#   • Emergency access procedures and break-glass accounts
#
# ENTERPRISE FEATURES:
#   • Integration with enterprise identity providers (OIDC, SAML)
#   • Multi-tenancy support with namespace isolation
#   • Federated identity management across environments
#   • Policy enforcement through admission controllers
#   • Centralized identity governance and lifecycle management
#
# ==============================================================================

# ==============================================================================
# Core Service Account - Veridis Backend
# ==============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: veridis-backend
  namespace: veridis

  # Core resource identification labels
  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: service-account
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Service account specific labels
    serviceaccount.veridis.xyz/type: core-service
    serviceaccount.veridis.xyz/service: backend
    serviceaccount.veridis.xyz/tier: critical
    serviceaccount.veridis.xyz/security-level: high
    serviceaccount.veridis.xyz/workload-type: api-server

    # Security and compliance classification
    security.veridis.xyz/access-level: elevated
    security.veridis.xyz/data-access: confidential
    security.veridis.xyz/network-access: restricted
    security.veridis.xyz/external-access: required
    security.veridis.xyz/audit-required: "true"

    # Business classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/revenue-impact: direct
    business.veridis.xyz/customer-facing: "true"
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001"

    # Operational labels
    veridis.xyz/environment: production
    veridis.xyz/team: platform
    veridis.xyz/cost-center: engineering
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "critical"
    compliance.veridis.xyz/gdpr: "data-processor"
    compliance.veridis.xyz/iso27001: "high-risk"
    compliance.veridis.xyz/pci-dss: "conditional"
    governance.veridis.xyz/policy-enforcement: "strict"

  annotations:
    # Service account information
    veridis.xyz/description: "Service account for the unified Veridis backend service handling identity, attestation, verification, compliance, and bridge operations"
    veridis.xyz/purpose: "Provides secure identity and permissions for core DID protocol operations with elevated privileges for database and external service access"
    veridis.xyz/scope: "Database access, external API calls, cross-chain bridge operations, compliance processing, audit logging"

    # Security and access control
    veridis.xyz/security-context: "Requires database read/write access, external blockchain network access, secret management integration"
    veridis.xyz/privilege-level: "elevated"
    veridis.xyz/access-pattern: "continuous"
    veridis.xyz/authentication-method: "service-account-token"
    veridis.xyz/authorization-model: "rbac"

    # External system integration
    veridis.xyz/database-access: "postgresql-primary,postgresql-replica"
    veridis.xyz/cache-access: "redis-cluster"
    veridis.xyz/secrets-access: "vault-kv-store"
    veridis.xyz/blockchain-access: "starknet-mainnet,ethereum-mainnet"
    veridis.xyz/monitoring-access: "prometheus-metrics,jaeger-tracing"

    # Compliance and audit
    compliance.veridis.xyz/data-processing-role: "controller-processor"
    compliance.veridis.xyz/access-justification: "Core business operations and regulatory compliance"
    compliance.veridis.xyz/retention-period: "7-years"
    compliance.veridis.xyz/audit-scope: "all-operations"
    compliance.veridis.xyz/gdpr-lawful-basis: "legitimate-interest"

    # Token and secret management
    veridis.xyz/token-rotation: "automated"
    veridis.xyz/token-lifetime: "24h"
    veridis.xyz/secret-injection: "vault-agent"
    veridis.xyz/certificate-management: "cert-manager"

    # Service mesh integration
    istio.io/service-account: "veridis-backend"
    security.istio.io/tlsMode: "istio"
    networking.istio.io/exportTo: "."

    # Vault integration
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/agent-inject-status: "update"
    vault.hashicorp.com/agent-pre-populate-only: "false"
    vault.hashicorp.com/role: "veridis-backend-role"
    vault.hashicorp.com/agent-inject-secret-database: "secret/data/database/credentials"
    vault.hashicorp.com/agent-inject-secret-api-keys: "secret/data/api/keys"
    vault.hashicorp.com/agent-inject-secret-blockchain: "secret/data/blockchain/credentials"

    # Monitoring and observability
    prometheus.io/scrape: "false"
    monitoring.veridis.xyz/service-identity: "veridis-backend"
    observability.veridis.xyz/trace-sampling: "1.0"

    # Contact and ownership
    veridis.xyz/owner: "platform-engineering@veridis.xyz"
    veridis.xyz/security-contact: "security@veridis.xyz"
    veridis.xyz/compliance-contact: "compliance@veridis.xyz"
    veridis.xyz/escalation: "oncall@veridis.xyz"

# Automatic token mounting enabled for API server access
automountServiceAccountToken: true

# Image pull secrets for private container registries
imagePullSecrets:
- name: veridis-registry-credentials
- name: github-container-registry

# Additional secrets mounted to service account
secrets:
- name: veridis-backend-tls-cert
- name: veridis-backend-signing-key

---
# ==============================================================================
# ZK Circuits Service Account - Zero-Knowledge Proof Generation
# ==============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: veridis-zk-circuits
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: service-account
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    serviceaccount.veridis.xyz/type: compute-service
    serviceaccount.veridis.xyz/service: zk-circuits
    serviceaccount.veridis.xyz/tier: critical
    serviceaccount.veridis.xyz/security-level: maximum
    serviceaccount.veridis.xyz/workload-type: gpu-compute

    security.veridis.xyz/access-level: specialized
    security.veridis.xyz/data-access: cryptographic
    security.veridis.xyz/network-access: internal
    security.veridis.xyz/gpu-access: required
    security.veridis.xyz/audit-required: "true"

    business.veridis.xyz/criticality: business-critical
    business.veridis.xyz/revenue-impact: direct
    business.veridis.xyz/customer-facing: "false"
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001"

    veridis.xyz/environment: production
    veridis.xyz/team: platform
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "high"
    compliance.veridis.xyz/gdpr: "processor"
    compliance.veridis.xyz/iso27001: "high-risk"
    governance.veridis.xyz/policy-enforcement: "strict"

  annotations:
    veridis.xyz/description: "Service account for ZK circuits service responsible for zero-knowledge proof generation and cryptographic computation"
    veridis.xyz/purpose: "Provides secure identity for GPU-accelerated cryptographic operations with specialized hardware access and key management"
    veridis.xyz/scope: "GPU resource access, cryptographic key management, proof generation, circuit compilation, performance optimization"

    # Cryptographic and GPU specific access
    veridis.xyz/security-context: "Requires GPU device access, cryptographic key storage, high-performance computing resources"
    veridis.xyz/gpu-requirements: "CUDA 12.0+, 16GB+ VRAM, compute capability 8.0+"
    veridis.xyz/cryptographic-operations: "proof generation, circuit compilation, key derivation, signature verification"
    veridis.xyz/performance-requirements: "low-latency, high-throughput, parallel processing"

    # ZK-specific configurations
    veridis.xyz/garaga-integration: "enabled"
    veridis.xyz/cairo-version: "2.11.4"
    veridis.xyz/proving-system: "garaga"
    veridis.xyz/circuit-optimization: "enabled"
    veridis.xyz/parallel-proving: "enabled"

    # External system integration
    veridis.xyz/cache-access: "redis-circuit-cache"
    veridis.xyz/secrets-access: "vault-zk-keys"
    veridis.xyz/storage-access: "circuit-artifacts,proving-keys"
    veridis.xyz/monitoring-access: "gpu-metrics,performance-metrics"

    # Compliance and security
    compliance.veridis.xyz/cryptographic-compliance: "fips-140-2"
    compliance.veridis.xyz/key-management: "hsm-backed"
    compliance.veridis.xyz/audit-scope: "all-cryptographic-operations"
    security.veridis.xyz/key-rotation: "automated"
    security.veridis.xyz/secure-enclave: "preferred"

    # Vault integration for cryptographic secrets
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "veridis-zk-circuits-role"
    vault.hashicorp.com/agent-inject-secret-proving-keys: "secret/data/zk/proving-keys"
    vault.hashicorp.com/agent-inject-secret-verification-keys: "secret/data/zk/verification-keys"
    vault.hashicorp.com/agent-inject-secret-circuit-params: "secret/data/zk/circuit-parameters"

    # GPU and performance monitoring
    nvidia.com/gpu-metrics: "enabled"
    monitoring.veridis.xyz/gpu-utilization: "enabled"
    monitoring.veridis.xyz/memory-usage: "enabled"
    monitoring.veridis.xyz/power-consumption: "enabled"

    veridis.xyz/owner: "zk-engineering@veridis.xyz"
    veridis.xyz/security-contact: "cryptography@veridis.xyz"
    veridis.xyz/performance-contact: "gpu-optimization@veridis.xyz"

automountServiceAccountToken: true
imagePullSecrets:
- name: veridis-registry-credentials
- name: nvidia-gpu-registry
secrets:
- name: veridis-zk-circuits-tls-cert
- name: zk-proving-keys
- name: zk-verification-keys

---
# ==============================================================================
# Database Service Account - PostgreSQL
# ==============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: veridis-database
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: service-account
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    serviceaccount.veridis.xyz/type: infrastructure
    serviceaccount.veridis.xyz/service: database
    serviceaccount.veridis.xyz/tier: critical
    serviceaccount.veridis.xyz/security-level: maximum
    serviceaccount.veridis.xyz/workload-type: stateful

    security.veridis.xyz/access-level: database-admin
    security.veridis.xyz/data-access: all-data
    security.veridis.xyz/network-access: internal
    security.veridis.xyz/persistence-access: required
    security.veridis.xyz/audit-required: "true"

    business.veridis.xyz/criticality: system-critical
    business.veridis.xyz/revenue-impact: direct
    business.veridis.xyz/customer-facing: "false"
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,pci-dss"

    veridis.xyz/environment: production
    veridis.xyz/team: platform
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "critical"
    compliance.veridis.xyz/gdpr: "data-controller"
    compliance.veridis.xyz/iso27001: "critical"
    compliance.veridis.xyz/pci-dss: "conditional"
    governance.veridis.xyz/policy-enforcement: "maximum"

  annotations:
    veridis.xyz/description: "Service account for PostgreSQL database instances managing persistent storage and data operations"
    veridis.xyz/purpose: "Provides secure identity for database operations with full data access and administrative privileges"
    veridis.xyz/scope: "Database administration, backup operations, replication management, performance monitoring"

    # Database-specific access patterns
    veridis.xyz/security-context: "Requires persistent volume access, network connectivity, backup storage access"
    veridis.xyz/data-classification: "confidential,restricted,public"
    veridis.xyz/backup-access: "automated-backup-storage"
    veridis.xyz/replication-access: "cross-region-replicas"
    veridis.xyz/monitoring-access: "database-metrics,query-performance"

    # Data protection and compliance
    compliance.veridis.xyz/data-residency: "eu-us"
    compliance.veridis.xyz/encryption-at-rest: "required"
    compliance.veridis.xyz/encryption-in-transit: "required"
    compliance.veridis.xyz/backup-encryption: "required"
    compliance.veridis.xyz/audit-logging: "all-operations"
    compliance.veridis.xyz/data-retention: "7-years"

    # PostgreSQL specific configurations
    veridis.xyz/postgres-version: "16.1"
    veridis.xyz/connection-pooling: "pgbouncer"
    veridis.xyz/replication-mode: "streaming"
    veridis.xyz/backup-strategy: "continuous-wal"
    veridis.xyz/performance-tuning: "production"

    # Vault integration for database credentials
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "veridis-database-role"
    vault.hashicorp.com/agent-inject-secret-postgres: "database/creds/postgres-admin"
    vault.hashicorp.com/agent-inject-secret-backup: "secret/data/database/backup-credentials"
    vault.hashicorp.com/agent-inject-secret-replication: "secret/data/database/replication-keys"

    # Backup and disaster recovery
    velero.io/backup-schedule: "daily"
    velero.io/snapshot-volumes: "true"
    backup.veridis.xyz/retention-policy: "90d"
    backup.veridis.xyz/cross-region: "enabled"

    veridis.xyz/owner: "database-team@veridis.xyz"
    veridis.xyz/dba-contact: "dba@veridis.xyz"
    veridis.xyz/backup-contact: "backup-team@veridis.xyz"

automountServiceAccountToken: true
imagePullSecrets:
- name: veridis-registry-credentials
secrets:
- name: postgres-tls-cert
- name: postgres-replication-cert
- name: postgres-backup-credentials

---
# ==============================================================================
# Cache Service Account - Redis
# ==============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: veridis-cache
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: service-account
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    serviceaccount.veridis.xyz/type: infrastructure
    serviceaccount.veridis.xyz/service: cache
    serviceaccount.veridis.xyz/tier: high
    serviceaccount.veridis.xyz/security-level: high
    serviceaccount.veridis.xyz/workload-type: memory-intensive

    security.veridis.xyz/access-level: cache-admin
    security.veridis.xyz/data-access: cached-data
    security.veridis.xyz/network-access: internal
    security.veridis.xyz/persistence-access: optional
    security.veridis.xyz/audit-required: "true"

    business.veridis.xyz/criticality: business-critical
    business.veridis.xyz/revenue-impact: indirect
    business.veridis.xyz/customer-facing: "false"
    business.veridis.xyz/compliance-scope: "soc2,gdpr"

    veridis.xyz/environment: production
    veridis.xyz/team: platform
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "high"
    compliance.veridis.xyz/gdpr: "processor"
    governance.veridis.xyz/policy-enforcement: "standard"

  annotations:
    veridis.xyz/description: "Service account for Redis cache instances providing high-performance data caching and session management"
    veridis.xyz/purpose: "Provides secure identity for cache operations with memory-optimized performance and clustering support"
    veridis.xyz/scope: "Cache administration, cluster management, performance monitoring, session storage"

    # Cache-specific configurations
    veridis.xyz/redis-version: "7.2.4"
    veridis.xyz/cluster-mode: "enabled"
    veridis.xyz/persistence-mode: "rdb+aof"
    veridis.xyz/memory-optimization: "enabled"
    veridis.xyz/eviction-policy: "allkeys-lru"

    # Performance and monitoring
    veridis.xyz/performance-monitoring: "latency,throughput,memory"
    veridis.xyz/alerting-thresholds: "memory-80%,latency-10ms,connections-1000"

    # Vault integration
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "veridis-cache-role"
    vault.hashicorp.com/agent-inject-secret-redis: "secret/data/cache/redis-auth"
    vault.hashicorp.com/agent-inject-secret-cluster: "secret/data/cache/cluster-keys"

    veridis.xyz/owner: "platform-engineering@veridis.xyz"
    veridis.xyz/cache-admin: "cache-team@veridis.xyz"

automountServiceAccountToken: true
imagePullSecrets:
- name: veridis-registry-credentials
secrets:
- name: redis-tls-cert
- name: redis-auth-token

---
# ==============================================================================
# Secrets Management Service Account - HashiCorp Vault
# ==============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: veridis-secrets
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: service-account
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    serviceaccount.veridis.xyz/type: security-infrastructure
    serviceaccount.veridis.xyz/service: secrets-management
    serviceaccount.veridis.xyz/tier: critical
    serviceaccount.veridis.xyz/security-level: maximum
    serviceaccount.veridis.xyz/workload-type: security-service

    security.veridis.xyz/access-level: secrets-admin
    security.veridis.xyz/data-access: all-secrets
    security.veridis.xyz/network-access: internal
    security.veridis.xyz/crypto-access: required
    security.veridis.xyz/audit-required: "true"

    business.veridis.xyz/criticality: system-critical
    business.veridis.xyz/revenue-impact: indirect
    business.veridis.xyz/customer-facing: "false"
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,fips-140-2"

    veridis.xyz/environment: production
    veridis.xyz/team: security
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "critical"
    compliance.veridis.xyz/gdpr: "processor"
    compliance.veridis.xyz/iso27001: "critical"
    compliance.veridis.xyz/fips-140-2: "required"
    governance.veridis.xyz/policy-enforcement: "maximum"

  annotations:
    veridis.xyz/description: "Service account for HashiCorp Vault managing secrets, encryption keys, and cryptographic operations"
    veridis.xyz/purpose: "Provides secure identity for centralized secrets management with enterprise-grade security and compliance"
    veridis.xyz/scope: "Secret storage, key management, encryption services, authentication, audit logging"

    # Vault-specific configurations
    veridis.xyz/vault-version: "1.15.6"
    veridis.xyz/storage-backend: "raft"
    veridis.xyz/seal-type: "auto-unseal"
    veridis.xyz/auth-methods: "kubernetes,oidc,userpass"
    veridis.xyz/secret-engines: "kv,database,pki,transit"

    # Security and compliance
    security.veridis.xyz/hsm-integration: "required"
    security.veridis.xyz/key-rotation: "automated"
    security.veridis.xyz/audit-device: "file,syslog"
    compliance.veridis.xyz/cryptographic-compliance: "fips-140-2"
    compliance.veridis.xyz/key-escrow: "enabled"

    # High availability and disaster recovery
    veridis.xyz/ha-mode: "raft-cluster"
    veridis.xyz/backup-frequency: "hourly"
    veridis.xyz/cross-region-replication: "enabled"

    veridis.xyz/owner: "security-team@veridis.xyz"
    veridis.xyz/vault-admin: "vault-admin@veridis.xyz"
    veridis.xyz/crypto-officer: "crypto-officer@veridis.xyz"

automountServiceAccountToken: true
imagePullSecrets:
- name: veridis-registry-credentials
- name: hashicorp-vault-registry
secrets:
- name: vault-tls-cert
- name: vault-unseal-keys
- name: vault-root-token

---
# ==============================================================================
# Blockchain Integration Service Account - StarkNet DevNet
# ==============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: veridis-blockchain
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: service-account
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    serviceaccount.veridis.xyz/type: blockchain-infrastructure
    serviceaccount.veridis.xyz/service: blockchain-node
    serviceaccount.veridis.xyz/tier: high
    serviceaccount.veridis.xyz/security-level: high
    serviceaccount.veridis.xyz/workload-type: blockchain-node

    security.veridis.xyz/access-level: blockchain-admin
    security.veridis.xyz/data-access: blockchain-data
    security.veridis.xyz/network-access: external
    security.veridis.xyz/persistence-access: required
    security.veridis.xyz/audit-required: "true"

    business.veridis.xyz/criticality: business-critical
    business.veridis.xyz/revenue-impact: direct
    business.veridis.xyz/customer-facing: "false"
    business.veridis.xyz/compliance-scope: "soc2,iso27001"

    veridis.xyz/environment: production
    veridis.xyz/team: blockchain
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "high"
    compliance.veridis.xyz/iso27001: "medium"
    governance.veridis.xyz/policy-enforcement: "standard"

  annotations:
    veridis.xyz/description: "Service account for StarkNet DevNet and blockchain integration services"
    veridis.xyz/purpose: "Provides secure identity for blockchain node operations and smart contract interactions"
    veridis.xyz/scope: "Blockchain node management, smart contract deployment, transaction processing, network synchronization"

    # Blockchain-specific configurations
    veridis.xyz/starknet-version: "0.13.4"
    veridis.xyz/cairo-version: "2.11.4"
    veridis.xyz/network-type: "devnet"
    veridis.xyz/consensus-mechanism: "proof-of-stake"
    veridis.xyz/smart-contract-support: "cairo"

    # Network and performance
    veridis.xyz/p2p-networking: "enabled"
    veridis.xyz/rpc-endpoints: "http,websocket"
    veridis.xyz/sync-mode: "full"
    veridis.xyz/pruning-mode: "archive"

    # Vault integration for blockchain keys
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "veridis-blockchain-role"
    vault.hashicorp.com/agent-inject-secret-node-keys: "secret/data/blockchain/node-keys"
    vault.hashicorp.com/agent-inject-secret-smart-contracts: "secret/data/blockchain/contract-keys"

    veridis.xyz/owner: "blockchain-team@veridis.xyz"
    veridis.xyz/node-operator: "starknet-ops@veridis.xyz"

automountServiceAccountToken: true
imagePullSecrets:
- name: veridis-registry-credentials
secrets:
- name: starknet-node-keys
- name: blockchain-tls-cert

---
# ==============================================================================
# Monitoring Service Account - Observability Stack
# ==============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: veridis-monitoring
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: service-account
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    serviceaccount.veridis.xyz/type: monitoring-infrastructure
    serviceaccount.veridis.xyz/service: observability
    serviceaccount.veridis.xyz/tier: medium
    serviceaccount.veridis.xyz/security-level: medium
    serviceaccount.veridis.xyz/workload-type: monitoring

    security.veridis.xyz/access-level: read-only
    security.veridis.xyz/data-access: metrics-logs-traces
    security.veridis.xyz/network-access: cluster-wide
    security.veridis.xyz/api-access: kubernetes-api
    security.veridis.xyz/audit-required: "false"

    business.veridis.xyz/criticality: operational
    business.veridis.xyz/revenue-impact: indirect
    business.veridis.xyz/customer-facing: "false"
    business.veridis.xyz/compliance-scope: "soc2"

    veridis.xyz/environment: production
    veridis.xyz/team: sre
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "medium"
    governance.veridis.xyz/policy-enforcement: "standard"

  annotations:
    veridis.xyz/description: "Service account for monitoring and observability infrastructure including Prometheus, Grafana, and Jaeger"
    veridis.xyz/purpose: "Provides secure identity for metrics collection, alerting, and observability with cluster-wide read access"
    veridis.xyz/scope: "Metrics scraping, log collection, trace aggregation, alerting, dashboard rendering"

    # Monitoring stack configurations
    veridis.xyz/prometheus-access: "cluster-wide-metrics"
    veridis.xyz/grafana-access: "dashboard-rendering"
    veridis.xyz/jaeger-access: "trace-collection"
    veridis.xyz/alertmanager-access: "notification-routing"
    veridis.xyz/fluent-bit-access: "log-collection"

    # Data retention and storage
    veridis.xyz/metrics-retention: "90d"
    veridis.xyz/logs-retention: "365d"
    veridis.xyz/traces-retention: "30d"
    veridis.xyz/storage-backend: "prometheus-tsdb"

    # Vault integration for monitoring credentials
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "veridis-monitoring-role"
    vault.hashicorp.com/agent-inject-secret-grafana: "secret/data/monitoring/grafana-admin"
    vault.hashicorp.com/agent-inject-secret-alertmanager: "secret/data/monitoring/alert-webhooks"

    veridis.xyz/owner: "sre-team@veridis.xyz"
    veridis.xyz/monitoring-lead: "monitoring@veridis.xyz"

automountServiceAccountToken: true
imagePullSecrets:
- name: veridis-registry-credentials
secrets:
- name: monitoring-tls-cert
- name: grafana-admin-credentials

---
# ==============================================================================
# Backup and Maintenance Service Account
# ==============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: veridis-maintenance
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: service-account
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    serviceaccount.veridis.xyz/type: maintenance
    serviceaccount.veridis.xyz/service: backup-maintenance
    serviceaccount.veridis.xyz/tier: low
    serviceaccount.veridis.xyz/security-level: medium
    serviceaccount.veridis.xyz/workload-type: batch-job

    security.veridis.xyz/access-level: backup-admin
    security.veridis.xyz/data-access: backup-data
    security.veridis.xyz/network-access: internal
    security.veridis.xyz/storage-access: backup-storage
    security.veridis.xyz/audit-required: "true"

    business.veridis.xyz/criticality: operational
    business.veridis.xyz/revenue-impact: risk-mitigation
    business.veridis.xyz/customer-facing: "false"
    business.veridis.xyz/compliance-scope: "soc2,gdpr"

    veridis.xyz/environment: production
    veridis.xyz/team: sre
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "medium"
    compliance.veridis.xyz/gdpr: "processor"
    governance.veridis.xyz/policy-enforcement: "standard"

  annotations:
    veridis.xyz/description: "Service account for backup operations, maintenance tasks, and disaster recovery procedures"
    veridis.xyz/purpose: "Provides secure identity for scheduled maintenance tasks with appropriate permissions for backup and recovery operations"
    veridis.xyz/scope: "Database backups, configuration backups, log rotation, cleanup tasks, disaster recovery testing"

    # Backup and maintenance configurations
    veridis.xyz/backup-schedule: "daily,weekly,monthly"
    veridis.xyz/backup-retention: "daily-30d,weekly-12w,monthly-12m"
    veridis.xyz/backup-encryption: "aes-256"
    veridis.xyz/backup-compression: "gzip"
    veridis.xyz/backup-verification: "automated"

    # Disaster recovery
    veridis.xyz/dr-testing: "monthly"
    veridis.xyz/recovery-procedures: "automated"
    veridis.xyz/cross-region-backup: "enabled"

    # Vault integration for backup credentials
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "veridis-maintenance-role"
    vault.hashicorp.com/agent-inject-secret-backup: "secret/data/backup/credentials"
    vault.hashicorp.com/agent-inject-secret-storage: "secret/data/backup/storage-keys"

    veridis.xyz/owner: "sre-team@veridis.xyz"
    veridis.xyz/backup-admin: "backup-team@veridis.xyz"

automountServiceAccountToken: true
imagePullSecrets:
- name: veridis-registry-credentials
secrets:
- name: backup-storage-credentials
- name: maintenance-tls-cert

---
# ==============================================================================
# Frontend and UI Service Account
# ==============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: veridis-frontend
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: service-account
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    serviceaccount.veridis.xyz/type: frontend
    serviceaccount.veridis.xyz/service: ui
    serviceaccount.veridis.xyz/tier: medium
    serviceaccount.veridis.xyz/security-level: standard
    serviceaccount.veridis.xyz/workload-type: web-server

    security.veridis.xyz/access-level: public-facing
    security.veridis.xyz/data-access: public-data
    security.veridis.xyz/network-access: external
    security.veridis.xyz/cdn-access: required
    security.veridis.xyz/audit-required: "false"

    business.veridis.xyz/criticality: business-important
    business.veridis.xyz/revenue-impact: indirect
    business.veridis.xyz/customer-facing: "true"
    business.veridis.xyz/compliance-scope: "gdpr"

    veridis.xyz/environment: production
    veridis.xyz/team: frontend
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/gdpr: "processor"
    governance.veridis.xyz/policy-enforcement: "standard"

  annotations:
    veridis.xyz/description: "Service account for frontend UI applications and web services"
    veridis.xyz/purpose: "Provides secure identity for user-facing web applications with public access and CDN integration"
    veridis.xyz/scope: "Static asset serving, user authentication, session management, API proxy"

    # Frontend-specific configurations
    veridis.xyz/web-framework: "react,nextjs"
    veridis.xyz/static-assets: "cdn-enabled"
    veridis.xyz/session-management: "jwt-based"
    veridis.xyz/authentication: "oidc"
    veridis.xyz/caching-strategy: "edge-cache"

    # CDN and performance
    veridis.xyz/cdn-provider: "cloudflare"
    veridis.xyz/edge-locations: "global"
    veridis.xyz/performance-budget: "lighthouse-90+"

    # Vault integration for frontend secrets
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "veridis-frontend-role"
    vault.hashicorp.com/agent-inject-secret-api-keys: "secret/data/frontend/api-keys"
    vault.hashicorp.com/agent-inject-secret-auth: "secret/data/frontend/auth-config"

    veridis.xyz/owner: "frontend-team@veridis.xyz"
    veridis.xyz/ui-lead: "ui-engineering@veridis.xyz"

automountServiceAccountToken: true
imagePullSecrets:
- name: veridis-registry-credentials
secrets:
- name: frontend-tls-cert
- name: oauth-client-credentials

# ==============================================================================
# Service Account Summary and Security Architecture
# ==============================================================================
#
# SERVICE ACCOUNT HIERARCHY:
# ==========================
# 1. veridis-backend          - Core API service with elevated privileges
# 2. veridis-zk-circuits      - GPU-accelerated cryptographic computation
# 3. veridis-database         - PostgreSQL with full data access
# 4. veridis-cache            - Redis cache with memory optimization
# 5. veridis-secrets          - Vault secrets management (maximum security)
# 6. veridis-blockchain       - StarkNet node operations
# 7. veridis-monitoring       - Observability stack with cluster-wide read access
# 8. veridis-maintenance      - Backup and maintenance operations
# 9. veridis-frontend         - Public-facing web applications
#
# SECURITY LEVELS:
# ================
# Maximum: veridis-secrets, veridis-database
# High: veridis-backend, veridis-cache, veridis-blockchain
# Medium: veridis-monitoring, veridis-maintenance
# Standard: veridis-frontend
# Specialized: veridis-zk-circuits (GPU + cryptographic access)
#
# ACCESS PATTERNS:
# ================
# Database Access: veridis-backend, veridis-database
# External Network: veridis-backend, veridis-blockchain, veridis-frontend
# GPU Resources: veridis-zk-circuits
# Secrets Management: All services (via Vault integration)
# Cluster-wide Read: veridis-monitoring
# Backup Storage: veridis-maintenance
#
# COMPLIANCE INTEGRATION:
# ======================
# SOC 2 Type II: Identity and access management controls
# GDPR: Data processing authorization and audit trails
# ISO 27001: Access control and identity management
# FIPS 140-2: Cryptographic service accounts (Vault, ZK)
#
# VAULT INTEGRATION:
# ==================
# All service accounts integrate with HashiCorp Vault for:
# - Dynamic secret generation and rotation
# - Cryptographic key management
# - Certificate lifecycle management
# - Audit logging and compliance
# - Policy-based access control
#
# TOKEN MANAGEMENT:
# =================
# - Automatic token mounting enabled for all service accounts
# - 24-hour token rotation for high-security services
# - Service mesh integration with workload identity
# - Cross-cluster token validation
# - Emergency token revocation procedures
#
# ==============================================================================
