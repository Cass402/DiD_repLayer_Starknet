# ==============================================================================
# Veridis Decentralized Identity Protocol - Security Contexts
# ==============================================================================
#
# This manifest defines comprehensive security contexts for the Veridis deployment,
# providing:
#
# CONTAINER RUNTIME SECURITY:
#   • Pod-level and container-level security context enforcement with defense-in-depth
#   • User and group ID management with principle of least privilege implementation
#   • Capability management with minimal attack surface and privilege escalation prevention
#   • File system security with read-only root filesystems and secure mount configurations
#   • Process isolation with namespace restrictions, IPC controls, and PID management
#
# KUBERNETES SECURITY HARDENING:
#   • Security context templates for consistent policy enforcement across workloads
#   • SELinux integration with multi-category security labels and type enforcement
#   • AppArmor profile management with workload-specific security profiles
#   • Seccomp filter implementation with system call restriction and monitoring
#   • Supplemental group management with fine-grained access control
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II container security controls and runtime protection verification
#   • GDPR data processing security with container-level privacy and protection measures
#   • ISO 27001 system security controls with access management and audit logging
#   • PCI DSS secure system configuration for cardholder data environment protection
#   • NIST Cybersecurity Framework implementation with container security best practices
#
# ENTERPRISE SECURITY FEATURES:
#   • Multi-tenant security isolation with workload-specific security boundaries
#   • Privileged access management with elevated permission controls and monitoring
#   • Runtime security monitoring with behavioral analysis and threat detection
#   • Supply chain security with container image verification and provenance tracking
#   • Emergency access procedures with break-glass mechanisms and audit trails
#
# OPERATIONAL SECURITY CONTROLS:
#   • Automated security context validation with admission controller integration
#   • Real-time security violation detection with incident response automation
#   • Security audit logging with comprehensive container activity monitoring
#   • Performance optimization with security-aware resource management
#   • Disaster recovery integration with security context consistency and restoration
#
# ==============================================================================

# ==============================================================================
# Default Restricted Security Context - Foundation Security Template
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-default-security-context
  namespace: veridis

  # Core resource identification labels
  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: security-context
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Security context specific classification
    security.veridis.xyz/context-type: security-context-template
    security.veridis.xyz/security-level: restricted
    security.veridis.xyz/scope: default-baseline
    security.veridis.xyz/enforcement-mode: strict
    security.veridis.xyz/compliance-tier: maximum

    # Security classification
    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: critical
    security.veridis.xyz/threat-mitigation: "container-escape,privilege-escalation,host-access"
    security.veridis.xyz/attack-surface: "minimal"
    security.veridis.xyz/hardening-level: "maximum"

    # Business classification
    business.veridis.xyz/criticality: system-critical
    business.veridis.xyz/impact-level: maximum
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,pci-dss,nist"
    business.veridis.xyz/security-investment: "tier-1"
    business.veridis.xyz/risk-tolerance: "minimal"

    # Operational labels
    veridis.xyz/environment: production
    veridis.xyz/team: security
    veridis.xyz/cost-center: security-operations
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "container-security-control"
    compliance.veridis.xyz/gdpr: "data-processing-security"
    compliance.veridis.xyz/iso27001: "system-security-control"
    compliance.veridis.xyz/pci-dss: "secure-system-configuration"
    compliance.veridis.xyz/nist: "container-security-implementation"
    governance.veridis.xyz/policy-enforcement: "mandatory"

  annotations:
    # Security context purpose and implementation
    veridis.xyz/description: "Default restricted security context template implementing maximum security controls for production workloads"
    veridis.xyz/purpose: "Provides foundation security context configuration enforcing least privilege and defense-in-depth principles"
    veridis.xyz/scope: "All production containers requiring maximum security posture with comprehensive threat mitigation"

    # Security architecture and design principles
    security.veridis.xyz/security-model: "Defense in depth with least privilege, container hardening, and runtime protection"
    security.veridis.xyz/threat-landscape: "Container escapes, privilege escalation, host system access, malicious containers, supply chain attacks"
    security.veridis.xyz/control-objectives: "Prevent unauthorized system access, enforce minimal privileges, maintain runtime integrity"

    # Compliance and regulatory alignment
    compliance.veridis.xyz/regulatory-requirement: "SOC 2 CC6.1, GDPR Article 32, ISO 27001 A.12.6.1, PCI DSS 2.2, NIST 800-53 SI-4"
    compliance.veridis.xyz/control-implementation: "Container security controls, runtime protection, access restrictions, audit logging"
    compliance.veridis.xyz/evidence-collection: "Security context enforcement logs, violation reports, compliance validation results"

    # Operational impact and management
    veridis.xyz/operational-impact: "Strict security controls may require application modifications for compliance"
    veridis.xyz/development-guidance: "Applications must run as non-root, use read-only filesystems, avoid privileged operations"
    veridis.xyz/troubleshooting: "Security violations logged with specific context requirements and remediation guidance"

    # Performance and resource considerations
    veridis.xyz/performance-impact: "Minimal runtime overhead from security controls, optimized for production performance"
    veridis.xyz/resource-governance: "Security controls integrated with resource limits and quality of service management"
    veridis.xyz/optimization-notes: "Security contexts optimized for Kubernetes native implementation and OCI compliance"

    # Emergency procedures and exceptions
    veridis.xyz/emergency-override: "Security context exceptions require CISO approval and documented business justification"
    veridis.xyz/exception-process: "Temporary exceptions with time limits, enhanced monitoring, and automatic expiration"
    veridis.xyz/incident-response: "Security violations trigger immediate incident response and forensic analysis"

    # Contact information and ownership
    veridis.xyz/owner: "security-team@veridis.xyz"
    veridis.xyz/security-architect: "security-architecture@veridis.xyz"
    veridis.xyz/compliance-contact: "compliance@veridis.xyz"
    veridis.xyz/escalation: "ciso@veridis.xyz"

    # Documentation and procedures
    veridis.xyz/security-documentation: "https://docs.veridis.xyz/security/security-contexts"
    veridis.xyz/developer-guidance: "https://docs.veridis.xyz/development/security-requirements"
    veridis.xyz/compliance-procedures: "https://docs.veridis.xyz/compliance/container-security"

# Default restricted security context template
data:
  # ==============================================================================
  # Pod Security Context - Pod-Level Security Controls
  # ==============================================================================
  podSecurityContext.yaml: |
    # Run as non-root user - critical security control
    runAsNonRoot: true

    # Specific non-root user ID for consistency
    runAsUser: 10001

    # Specific group ID for file access control
    runAsGroup: 10001

    # File system group for volume permissions
    fsGroup: 10001

    # Ensure consistent group ownership
    fsGroupChangePolicy: "Always"

    # Additional supplemental groups for fine-grained access
    supplementalGroups:
    - 10001  # Application group
    - 65534  # Nobody group for restricted access

    # SELinux security context for enhanced isolation
    seLinuxOptions:
      level: "s0:c123,c456"  # Multi-Category Security labels
      type: "container_t"    # SELinux type for containers
      user: "system_u"       # SELinux user context
      role: "object_r"       # SELinux role context

    # Seccomp profile for system call filtering
    seccompProfile:
      type: RuntimeDefault    # Use runtime default seccomp profile
      # Alternative: Custom profile
      # type: Localhost
      # localhostProfile: "veridis-restricted-profile.json"

    # Windows-specific security (for hybrid environments)
    windowsOptions:
      gmsaCredentialSpecName: ""  # Group Managed Service Account
      gmsaCredentialSpec: ""      # GMSA credential specification
      runAsUserName: ""           # Windows user name

    # System controls and kernel parameters
    sysctls:
    - name: "net.core.somaxconn"
      value: "1024"
    - name: "net.ipv4.ip_local_port_range"
      value: "32768 65535"

  # ==============================================================================
  # Container Security Context - Container-Level Security Controls
  # ==============================================================================
  containerSecurityContext.yaml: |
    # Prevent privilege escalation - critical security control
    allowPrivilegeEscalation: false

    # Run as non-root user (can override pod setting if needed)
    runAsNonRoot: true
    runAsUser: 10001
    runAsGroup: 10001

    # Read-only root filesystem for immutable infrastructure
    readOnlyRootFilesystem: true

    # Linux capabilities management - drop all by default
    capabilities:
      drop:
      - ALL  # Drop all capabilities for maximum security

      # Add only required capabilities (uncomment as needed)
      add: []
      # - NET_BIND_SERVICE  # Bind to privileged ports
      # - CHOWN             # Change file ownership
      # - DAC_OVERRIDE      # Override file permissions
      # - SETGID            # Set group ID
      # - SETUID            # Set user ID
      # - SYS_CHROOT        # Use chroot()
      # - KILL              # Send signals to processes

    # Privileged container prevention
    privileged: false

    # AppArmor security profile
    appArmorProfile:
      type: RuntimeDefault    # Use runtime default AppArmor profile
      # Alternative: Custom profile
      # type: Localhost
      # localhostProfile: "veridis-restricted-profile"

    # Seccomp profile (container-level override)
    seccompProfile:
      type: RuntimeDefault

    # SELinux options (container-level override)
    seLinuxOptions:
      level: "s0:c123,c456"
      type: "container_t"
      user: "system_u"
      role: "object_r"

  # ==============================================================================
  # Development Security Context - Balanced Security for Development
  # ==============================================================================
  developmentSecurityContext.yaml: |
    # Development pod security context - more flexible for debugging
    runAsNonRoot: true
    runAsUser: 1000        # Standard user ID
    runAsGroup: 1000       # Standard group ID
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"

    # Supplemental groups for development tools
    supplementalGroups:
    - 1000   # Developer group
    - 100    # Users group
    - 999    # Docker group (if needed)

    # Relaxed SELinux for development
    seLinuxOptions:
      type: "container_t"

    # Development seccomp profile
    seccompProfile:
      type: RuntimeDefault

---
# ==============================================================================
# Backend Service Security Context - API Service Protection
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-backend-security-context
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: security-context
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    security.veridis.xyz/context-type: service-specific
    security.veridis.xyz/security-level: high
    security.veridis.xyz/scope: backend-service
    security.veridis.xyz/enforcement-mode: strict
    security.veridis.xyz/compliance-tier: high

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: high
    security.veridis.xyz/threat-mitigation: "api-attacks,data-breach,unauthorized-access"
    security.veridis.xyz/data-classification: "confidential,restricted"
    security.veridis.xyz/customer-facing: "true"

    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/revenue-impact: direct
    business.veridis.xyz/customer-facing: "true"
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,pci-dss"
    business.veridis.xyz/sla-tier: "platinum"

    veridis.xyz/environment: production
    veridis.xyz/service: backend
    veridis.xyz/team: backend-engineering
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "api-security-control"
    compliance.veridis.xyz/gdpr: "data-processing-control"
    compliance.veridis.xyz/iso27001: "application-security-control"
    compliance.veridis.xyz/pci-dss: "secure-application-deployment"
    governance.veridis.xyz/policy-enforcement: "strict"

  annotations:
    veridis.xyz/description: "Backend service security context with high-security controls for API protection and customer data processing"
    veridis.xyz/purpose: "Provides specialized security context for backend services handling customer authentication and sensitive data"
    veridis.xyz/scope: "Rust backend services, API endpoints, authentication flows, data processing workflows"

    # Backend-specific security requirements
    security.veridis.xyz/api-security: "Authentication endpoint protection, session management, input validation, output encoding"
    security.veridis.xyz/data-protection: "Customer PII encryption, secure data processing, audit logging, access controls"
    security.veridis.xyz/threat-modeling: "API attacks, injection attacks, authentication bypass, session hijacking, data exfiltration"

    # Performance and scalability considerations
    veridis.xyz/performance-requirements: "Sub-100ms API response times, horizontal scalability, load balancing integration"
    veridis.xyz/resource-optimization: "Memory-efficient Rust runtime, CPU optimization, network performance"
    veridis.xyz/monitoring-integration: "Application metrics, security event logging, performance monitoring"

    veridis.xyz/owner: "backend-team@veridis.xyz"
    veridis.xyz/service-owner: "backend-engineering@veridis.xyz"
    veridis.xyz/security-contact: "security@veridis.xyz"

# Backend service security context configuration
data:
  # ==============================================================================
  # Backend Pod Security Context
  # ==============================================================================
  podSecurityContext.yaml: |
    runAsNonRoot: true
    runAsUser: 10002        # Backend service user
    runAsGroup: 10002       # Backend service group
    fsGroup: 10002
    fsGroupChangePolicy: "Always"

    # Backend-specific supplemental groups
    supplementalGroups:
    - 10002  # Backend service group
    - 10000  # Shared application group

    # Enhanced SELinux for customer-facing service
    seLinuxOptions:
      level: "s0:c100,c200"  # High-security MCS labels
      type: "container_api_t"  # Custom SELinux type for API containers
      user: "system_u"
      role: "object_r"

    # Strict seccomp profile for API security
    seccompProfile:
      type: Localhost
      localhostProfile: "backend-api-profile.json"

    # Backend-specific sysctls for performance
    sysctls:
    - name: "net.core.somaxconn"
      value: "4096"          # Higher connection queue for API traffic
    - name: "net.ipv4.tcp_keepalive_time"
      value: "600"           # TCP keepalive optimization

  # ==============================================================================
  # Backend Container Security Context
  # ==============================================================================
  containerSecurityContext.yaml: |
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 10002
    runAsGroup: 10002
    readOnlyRootFilesystem: true
    privileged: false

    # Backend service capabilities
    capabilities:
      drop:
      - ALL
      add:
      - NET_BIND_SERVICE    # Bind to HTTP/HTTPS ports
      - SETGID              # Group management for service operations
      - SETUID              # User management for service operations

    # Custom AppArmor profile for API security
    appArmorProfile:
      type: Localhost
      localhostProfile: "veridis-backend-profile"

    # Strict seccomp for API protection
    seccompProfile:
      type: Localhost
      localhostProfile: "backend-api-profile.json"

    # Backend SELinux context
    seLinuxOptions:
      level: "s0:c100,c200"
      type: "container_api_t"
      user: "system_u"
      role: "object_r"

---
# ==============================================================================
# Database Service Security Context - Maximum Data Protection
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-database-security-context
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: security-context
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    security.veridis.xyz/context-type: infrastructure-service
    security.veridis.xyz/security-level: maximum
    security.veridis.xyz/scope: database-service
    security.veridis.xyz/enforcement-mode: maximum
    security.veridis.xyz/compliance-tier: maximum

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: critical
    security.veridis.xyz/threat-mitigation: "data-breach,unauthorized-access,data-corruption"
    security.veridis.xyz/data-classification: "confidential,restricted,regulated"
    security.veridis.xyz/encryption-required: "mandatory"

    business.veridis.xyz/criticality: system-critical
    business.veridis.xyz/revenue-impact: direct
    business.veridis.xyz/data-sovereignty: "regulated"
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,pci-dss"
    business.veridis.xyz/disaster-recovery: "tier-1"

    veridis.xyz/environment: production
    veridis.xyz/service: database
    veridis.xyz/team: database-administration
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "data-security-control"
    compliance.veridis.xyz/gdpr: "data-controller-security"
    compliance.veridis.xyz/iso27001: "information-storage-security"
    compliance.veridis.xyz/pci-dss: "cardholder-data-protection"
    governance.veridis.xyz/policy-enforcement: "maximum"

  annotations:
    veridis.xyz/description: "Database service security context with maximum data protection controls for customer PII and regulated information"
    veridis.xyz/purpose: "Provides specialized security context for database services with comprehensive data protection and regulatory compliance"
    veridis.xyz/scope: "PostgreSQL database, backup operations, replication services, data processing workflows"

    # Database-specific security requirements
    security.veridis.xyz/data-protection: "Customer PII encryption, audit trail integrity, access logging, data residency compliance"
    security.veridis.xyz/database-hardening: "Minimal attack surface, encrypted storage, secure communication, access controls"
    security.veridis.xyz/threat-modeling: "Database attacks, privilege escalation, data exfiltration, insider threats, APTs"

    # Regulatory compliance requirements
    compliance.veridis.xyz/data-handling: "GDPR Article 32 technical measures, PCI DSS data protection requirements"
    compliance.veridis.xyz/regulatory-compliance: "Data controller security, processor agreements, cross-border transfers"
    compliance.veridis.xyz/audit-scope: "All database operations, data access, configuration changes, security events"

    # High availability and disaster recovery
    veridis.xyz/ha-requirements: "99.99% availability, automatic failover, zero data loss, cross-region replication"
    veridis.xyz/disaster-recovery: "RTO 15 minutes, RPO 5 minutes, automated backup verification, secure recovery"
    veridis.xyz/business-continuity: "24/7 operations, maintenance windows, emergency procedures, escalation matrix"

    veridis.xyz/owner: "database-team@veridis.xyz"
    veridis.xyz/dba: "dba@veridis.xyz"
    veridis.xyz/security-contact: "data-protection@veridis.xyz"
    veridis.xyz/compliance-contact: "dpo@veridis.xyz"

# Database service security context configuration
data:
  # ==============================================================================
  # Database Pod Security Context - Maximum Protection
  # ==============================================================================
  podSecurityContext.yaml: |
    runAsNonRoot: true
    runAsUser: 999          # PostgreSQL system user
    runAsGroup: 999         # PostgreSQL system group
    fsGroup: 999
    fsGroupChangePolicy: "Always"

    # Database-specific supplemental groups
    supplementalGroups:
    - 999    # PostgreSQL group
    - 10000  # Shared application group
    - 26     # Backup group

    # Maximum security SELinux context
    seLinuxOptions:
      level: "s0:c500,c600"   # Maximum security MCS labels
      type: "container_db_t"   # Custom SELinux type for database containers
      user: "system_u"
      role: "object_r"

    # Database-optimized seccomp profile
    seccompProfile:
      type: Localhost
      localhostProfile: "database-hardened-profile.json"

    # Database performance and security sysctls
    sysctls:
    - name: "kernel.shmmax"
      value: "68719476736"    # 64GB shared memory maximum
    - name: "kernel.shmall"
      value: "4294967296"     # Total shared memory pages
    - name: "kernel.shmmni"
      value: "4096"           # Maximum shared memory segments
    - name: "vm.swappiness"
      value: "1"              # Minimal swapping for database performance

  # ==============================================================================
  # Database Container Security Context
  # ==============================================================================
  containerSecurityContext.yaml: |
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: false  # Database needs write access to data directories
    privileged: false

    # Database-specific capabilities
    capabilities:
      drop:
      - ALL
      add:
      - CHOWN              # File ownership changes for data directories
      - DAC_OVERRIDE       # Override discretionary access controls
      - FOWNER             # File operations regardless of ownership
      - SETGID             # Set group ID for PostgreSQL operations
      - SETUID             # Set user ID for PostgreSQL operations
      - SYS_RESOURCE       # Resource limit modifications

    # Database-hardened AppArmor profile
    appArmorProfile:
      type: Localhost
      localhostProfile: "veridis-database-hardened-profile"

    # Database seccomp profile
    seccompProfile:
      type: Localhost
      localhostProfile: "database-hardened-profile.json"

    # Database SELinux context
    seLinuxOptions:
      level: "s0:c500,c600"
      type: "container_db_t"
      user: "system_u"
      role: "object_r"

---
# ==============================================================================
# ZK Circuits Service Security Context - Cryptographic Workload Protection
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-zk-circuits-security-context
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: security-context
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    security.veridis.xyz/context-type: specialized-workload
    security.veridis.xyz/security-level: cryptographic-enhanced
    security.veridis.xyz/scope: cryptographic-workloads
    security.veridis.xyz/enforcement-mode: maximum
    security.veridis.xyz/compliance-tier: specialized

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: critical
    security.veridis.xyz/threat-mitigation: "crypto-key-exposure,algorithm-theft,side-channel-attacks"
    security.veridis.xyz/data-classification: "cryptographic-material,trade-secrets"
    security.veridis.xyz/fips-compliance: "required"
    security.veridis.xyz/gpu-security: "enhanced"

    business.veridis.xyz/criticality: business-critical
    business.veridis.xyz/revenue-impact: direct
    business.veridis.xyz/ip-classification: "trade-secrets"
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,fips-140-2"
    business.veridis.xyz/competitive-advantage: "core-technology"

    veridis.xyz/environment: production
    veridis.xyz/service: zk-circuits
    veridis.xyz/team: cryptography-engineering
    veridis.xyz/cost-center: research-development

    compliance.veridis.xyz/soc2: "cryptographic-control"
    compliance.veridis.xyz/fips-140-2: "level-2-container-security"
    compliance.veridis.xyz/iso27001: "cryptographic-processing-security"
    governance.veridis.xyz/policy-enforcement: "maximum"
    governance.veridis.xyz/ip-protection: "critical"

  annotations:
    veridis.xyz/description: "Cryptographic workload security context with specialized protection for ZK circuits, GPU resources, and intellectual property"
    veridis.xyz/purpose: "Provides specialized security context for cryptographic operations with FIPS compliance and trade secret protection"
    veridis.xyz/scope: "GPU-accelerated proof generation, cryptographic key operations, algorithm execution, performance optimization"

    # Cryptographic security requirements
    security.veridis.xyz/crypto-isolation: "Hardware-level isolation, secure memory management, side-channel attack prevention"
    security.veridis.xyz/gpu-security: "GPU memory isolation, secure CUDA operations, hardware attestation"
    security.veridis.xyz/algorithm-protection: "Proprietary algorithm confidentiality, performance data protection, trade secret security"

    # FIPS 140-2 compliance requirements
    compliance.veridis.xyz/fips-requirements: "FIPS 140-2 Level 2 cryptographic operations, validated algorithms, secure key handling"
    compliance.veridis.xyz/crypto-module: "Software cryptographic module with role-based authentication"
    compliance.veridis.xyz/key-management: "Secure key generation, storage, and destruction with audit trails"

    # GPU and performance considerations
    veridis.xyz/gpu-requirements: "NVIDIA RTX 4090/A100 access, CUDA programming, parallel processing, memory management"
    veridis.xyz/performance-targets: "Sub-second proof generation, optimal GPU utilization, scalable processing"
    veridis.xyz/resource-optimization: "Cost-effective GPU usage, energy efficiency, performance per dollar"

    veridis.xyz/owner: "zk-engineering@veridis.xyz"
    veridis.xyz/crypto-officer: "cryptography-architect@veridis.xyz"
    veridis.xyz/ip-counsel: "legal@veridis.xyz"
    veridis.xyz/compliance-contact: "fips-compliance@veridis.xyz"

# ZK circuits service security context configuration
data:
  # ==============================================================================
  # ZK Circuits Pod Security Context - Cryptographic Protection
  # ==============================================================================
  podSecurityContext.yaml: |
    runAsNonRoot: true
    runAsUser: 1001         # ZK circuits service user
    runAsGroup: 1001        # ZK circuits service group
    fsGroup: 1001
    fsGroupChangePolicy: "Always"

    # Cryptographic and GPU-specific supplemental groups
    supplementalGroups:
    - 1001   # ZK circuits group
    - 44     # Video group for GPU access
    - 107    # Render group for GPU rendering
    - 10000  # Shared application group

    # High-security SELinux context for cryptographic operations
    seLinuxOptions:
      level: "s0:c700,c800"     # Maximum security MCS labels for crypto
      type: "container_crypto_t" # Custom SELinux type for crypto containers
      user: "system_u"
      role: "object_r"

    # FIPS-compliant seccomp profile
    seccompProfile:
      type: Localhost
      localhostProfile: "fips-crypto-profile.json"

    # Cryptographic and GPU performance sysctls
    sysctls:
    - name: "kernel.shmmax"
      value: "137438953472"    # 128GB for large cryptographic operations
    - name: "kernel.shmall"
      value: "33554432"        # Shared memory pages for GPU operations
    - name: "vm.mlock_limit"
      value: "67108864"        # Memory locking for cryptographic keys
    - name: "kernel.msgmax"
      value: "65536"           # IPC message size for GPU communication

  # ==============================================================================
  # ZK Circuits Container Security Context
  # ==============================================================================
  containerSecurityContext.yaml: |
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    readOnlyRootFilesystem: false  # GPU operations require write access
    privileged: false

    # GPU and cryptographic capabilities
    capabilities:
      drop:
      - ALL
      add:
      - SYS_RAWIO          # Raw I/O operations for GPU access
      - MLOCK              # Memory locking for secure key storage
      - IPC_LOCK           # IPC locking for shared memory operations
      - DAC_OVERRIDE       # Override access controls for GPU devices
      - SETGID             # Group management for GPU access
      - SETUID             # User management for crypto operations

    # FIPS-compliant AppArmor profile
    appArmorProfile:
      type: Localhost
      localhostProfile: "veridis-fips-crypto-profile"

    # FIPS cryptographic seccomp profile
    seccompProfile:
      type: Localhost
      localhostProfile: "fips-crypto-profile.json"

    # Cryptographic SELinux context
    seLinuxOptions:
      level: "s0:c700,c800"
      type: "container_crypto_t"
      user: "system_u"
      role: "object_r"

---
# ==============================================================================
# Frontend UI Service Security Context - Web Application Security
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-ui-security-context
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: security-context
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    security.veridis.xyz/context-type: web-application
    security.veridis.xyz/security-level: high
    security.veridis.xyz/scope: frontend-ui
    security.veridis.xyz/enforcement-mode: high
    security.veridis.xyz/compliance-tier: high

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: medium
    security.veridis.xyz/threat-mitigation: "xss-attacks,csrf-attacks,injection-attacks"
    security.veridis.xyz/data-classification: "public,internal"
    security.veridis.xyz/user-facing: "true"

    business.veridis.xyz/criticality: customer-facing
    business.veridis.xyz/revenue-impact: indirect
    business.veridis.xyz/customer-facing: "true"
    business.veridis.xyz/compliance-scope: "gdpr,accessibility"
    business.veridis.xyz/user-experience: "critical"

    veridis.xyz/environment: production
    veridis.xyz/service: ui
    veridis.xyz/team: frontend-engineering
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/gdpr: "user-interface-security"
    compliance.veridis.xyz/accessibility: "wcag-2.1-aa-compliance"
    governance.veridis.xyz/policy-enforcement: "high"

  annotations:
    veridis.xyz/description: "Frontend UI security context with web application security controls and user experience optimization"
    veridis.xyz/purpose: "Provides specialized security context for frontend services with web security and performance optimization"
    veridis.xyz/scope: "React/Next.js frontend, user authentication flows, dashboard interfaces, mobile responsive design"

    # Web application security requirements
    security.veridis.xyz/web-security: "Content Security Policy, XSS protection, CSRF prevention, secure headers"
    security.veridis.xyz/session-management: "Secure cookies, session timeout, concurrent session limits"
    security.veridis.xyz/authentication-integration: "OIDC integration, MFA support, social login"

    # User experience and performance
    veridis.xyz/performance-requirements: "Sub-2s page load, 99.5% availability, global CDN integration"
    veridis.xyz/scalability: "Auto-scaling based on traffic, edge caching, content optimization"
    veridis.xyz/user-experience: "Responsive design, accessibility compliance, progressive web app features"

    veridis.xyz/owner: "frontend-team@veridis.xyz"
    veridis.xyz/ui-lead: "ui-engineering@veridis.xyz"
    veridis.xyz/ux-contact: "user-experience@veridis.xyz"

# Frontend UI service security context configuration
data:
  # ==============================================================================
  # UI Pod Security Context - Web Application Security
  # ==============================================================================
  podSecurityContext.yaml: |
    runAsNonRoot: true
    runAsUser: 10003        # UI service user
    runAsGroup: 10003       # UI service group
    fsGroup: 10003
    fsGroupChangePolicy: "Always"

    # UI-specific supplemental groups
    supplementalGroups:
    - 10003  # UI service group
    - 10000  # Shared application group
    - 82     # www-data group for web server compatibility

    # Web application SELinux context
    seLinuxOptions:
      level: "s0:c300,c400"     # Medium security MCS labels
      type: "container_web_t"    # Custom SELinux type for web containers
      user: "system_u"
      role: "object_r"

    # Web application seccomp profile
    seccompProfile:
      type: Localhost
      localhostProfile: "web-application-profile.json"

    # Web server performance sysctls
    sysctls:
    - name: "net.core.somaxconn"
      value: "8192"              # High connection queue for web traffic
    - name: "net.ipv4.tcp_max_syn_backlog"
      value: "4096"              # SYN backlog for high concurrency
    - name: "net.core.rmem_max"
      value: "16777216"          # Receive buffer size
    - name: "net.core.wmem_max"
      value: "16777216"          # Send buffer size

  # ==============================================================================
  # UI Container Security Context
  # ==============================================================================
  containerSecurityContext.yaml: |
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 10003
    runAsGroup: 10003
    readOnlyRootFilesystem: true
    privileged: false

    # Web application capabilities
    capabilities:
      drop:
      - ALL
      add:
      - NET_BIND_SERVICE      # Bind to HTTP/HTTPS ports
      - CHOWN                 # File ownership for web assets
      - DAC_OVERRIDE          # File access for web content

    # Web application AppArmor profile
    appArmorProfile:
      type: Localhost
      localhostProfile: "veridis-web-application-profile"

    # Web application seccomp profile
    seccompProfile:
      type: Localhost
      localhostProfile: "web-application-profile.json"

    # Web application SELinux context
    seLinuxOptions:
      level: "s0:c300,c400"
      type: "container_web_t"
      user: "system_u"
      role: "object_r"

---
# ==============================================================================
# Monitoring Services Security Context - Observability Infrastructure
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-monitoring-security-context
  namespace: monitoring

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: security-context
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    security.veridis.xyz/context-type: infrastructure-service
    security.veridis.xyz/security-level: medium
    security.veridis.xyz/scope: monitoring-infrastructure
    security.veridis.xyz/enforcement-mode: medium
    security.veridis.xyz/compliance-tier: operational

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: medium
    security.veridis.xyz/threat-mitigation: "data-exposure,unauthorized-access,system-monitoring"
    security.veridis.xyz/data-classification: "operational,metrics,logs"
    security.veridis.xyz/observability: "comprehensive"

    business.veridis.xyz/criticality: operational-critical
    business.veridis.xyz/revenue-impact: indirect
    business.veridis.xyz/customer-facing: "false"
    business.veridis.xyz/compliance-scope: "soc2,gdpr"
    business.veridis.xyz/operational-visibility: "maximum"

    veridis.xyz/environment: production
    veridis.xyz/service: monitoring
    veridis.xyz/team: sre
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "monitoring-security"
    compliance.veridis.xyz/gdpr: "operational-data-processing"
    governance.veridis.xyz/policy-enforcement: "medium"

  annotations:
    veridis.xyz/description: "Monitoring infrastructure security context with specialized controls for observability and operational data protection"
    veridis.xyz/purpose: "Provides balanced security context for monitoring services with system access and data protection"
    veridis.xyz/scope: "Prometheus, Grafana, Jaeger, logging infrastructure, alerting systems, metrics collection"

    # Monitoring-specific security requirements
    security.veridis.xyz/monitoring-security: "Operational data protection, metric integrity, log security, dashboard access control"
    security.veridis.xyz/system-access: "Host system monitoring, container inspection, performance data collection"
    security.veridis.xyz/data-sensitivity: "System metrics, application logs, performance data, error information"

    # Operational requirements
    veridis.xyz/availability-requirements: "99.9% monitoring uptime, real-time alerting, historical data retention"
    veridis.xyz/performance-requirements: "High-throughput data ingestion, efficient querying, dashboard responsiveness"
    veridis.xyz/retention-policies: "Metrics 90 days, logs 365 days, traces 30 days, alerts 2 years"

    veridis.xyz/owner: "sre-team@veridis.xyz"
    veridis.xyz/monitoring-lead: "monitoring@veridis.xyz"

# Monitoring service security context configuration
data:
  # ==============================================================================
  # Monitoring Pod Security Context - System Access Required
  # ==============================================================================
  podSecurityContext.yaml: |
    runAsNonRoot: true
    runAsUser: 65534        # Nobody user for monitoring
    runAsGroup: 65534       # Nobody group
    fsGroup: 65534
    fsGroupChangePolicy: "OnRootMismatch"

    # Monitoring-specific supplemental groups
    supplementalGroups:
    - 65534  # Nobody group
    - 472    # Grafana group
    - 999    # Prometheus group
    - 10     # Wheel group for system access

    # Monitoring SELinux context
    seLinuxOptions:
      level: "s0:c900,c999"      # Monitoring MCS labels
      type: "container_monitor_t" # Custom SELinux type for monitoring
      user: "system_u"
      role: "object_r"

    # Monitoring seccomp profile
    seccompProfile:
      type: Localhost
      localhostProfile: "monitoring-profile.json"

    # Monitoring sysctls for performance
    sysctls:
    - name: "vm.max_map_count"
      value: "262144"            # For Elasticsearch/monitoring backends
    - name: "kernel.shmmax"
      value: "68719476736"       # Shared memory for time-series data

  # ==============================================================================
  # Monitoring Container Security Context
  # ==============================================================================
  containerSecurityContext.yaml: |
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534
    readOnlyRootFilesystem: false  # Monitoring tools need write access
    privileged: false

    # Monitoring capabilities for system access
    capabilities:
      drop:
      - ALL
      add:
      - NET_BIND_SERVICE      # Bind to monitoring ports
      - DAC_OVERRIDE          # Read system files for monitoring
      - SYS_PTRACE            # Process monitoring
      - CHOWN                 # File ownership for data directories
      - SETGID                # Group management
      - SETUID                # User management

    # Monitoring AppArmor profile
    appArmorProfile:
      type: Localhost
      localhostProfile: "veridis-monitoring-profile"

    # Monitoring seccomp profile
    seccompProfile:
      type: Localhost
      localhostProfile: "monitoring-profile.json"

    # Monitoring SELinux context
    seLinuxOptions:
      level: "s0:c900,c999"
      type: "container_monitor_t"
      user: "system_u"
      role: "object_r"

# ==============================================================================
# Security Context Summary and Implementation Architecture
# ==============================================================================
#
# COMPREHENSIVE CONTAINER SECURITY IMPLEMENTATION:
# ================================================
#
# SECURITY CONTEXT HIERARCHY:
# ---------------------------
# 1. Default Restricted Context:
#    - Foundation security template for maximum protection
#    - Non-root users, minimal capabilities, read-only filesystems
#    - Comprehensive compliance integration (SOC 2, GDPR, ISO 27001)
#    - Defense-in-depth with SELinux, AppArmor, and Seccomp
#
# 2. Service-Specific Contexts:
#    - Backend: API security with customer data protection
#    - Database: Maximum data protection with regulatory compliance
#    - ZK Circuits: Cryptographic workload with FIPS compliance and GPU security
#    - Frontend UI: Web application security with performance optimization
#    - Monitoring: Infrastructure access with operational data protection
#
# 3. Environment-Specific Contexts:
#    - Production: Maximum security with strict enforcement
#    - Development: Balanced security with debugging flexibility
#    - Staging: Cost-optimized security with testing requirements
#
# SECURITY CONTROL IMPLEMENTATION:
# ================================
# User and Group Management:
#   - Non-root user enforcement across all environments
#   - Service-specific user IDs for isolation and accountability
#   - Supplemental groups for fine-grained access control
#   - File system group management for volume permissions
#
# Capability Management:
#   - Default capability dropping with minimal required additions
#   - Service-specific capabilities for operational requirements
#   - Database capabilities for PostgreSQL operations
#   - GPU capabilities for cryptographic workloads
#   - Web server capabilities for frontend services
#
# Mandatory Access Control:
#   - SELinux integration with Multi-Category Security labels
#   - Custom SELinux types for service-specific protection
#   - AppArmor profiles for application-specific security
#   - Seccomp filters for system call restriction
#
# File System Security:
#   - Read-only root filesystems where operationally feasible
#   - Secure volume mounting and permission management
#   - File system group ownership and access control
#   - Temporary storage security and cleanup procedures
#
# COMPLIANCE FRAMEWORK ALIGNMENT:
# ===============================
# SOC 2 Type II:
#   - Container security controls (CC6.1, CC6.7)
#   - Access control implementation and monitoring
#   - System security configuration management
#
# GDPR:
#   - Data processing security (Article 32)
#   - Container-level data protection by design
#   - Technical security measures implementation
#
# ISO 27001:
#   - System security controls (A.12.6.1, A.13.1.1)
#   - Access control policy enforcement
#   - Information processing security
#
# PCI DSS:
#   - Secure system configuration (Requirement 2.2)
#   - Cardholder data environment protection
#   - System security hardening standards
#
# FIPS 140-2:
#   - Cryptographic module security (Level 2)
#   - Secure container runtime for cryptographic operations
#   - Key management and protection controls
#
# OPERATIONAL SECURITY FEATURES:
# ==============================
# Runtime Protection:
#   - Real-time security context enforcement
#   - Automated violation detection and response
#   - Security audit logging and monitoring
#
# Performance Optimization:
#   - Security controls optimized for production performance
#   - Resource-aware security context management
#   - Performance monitoring with security integration
#
# Emergency Procedures:
#   - Break-glass access with comprehensive audit trails
#   - Security context override procedures and controls
#   - Incident response integration with container security
#
# Developer Experience:
#   - Clear security guidance and documentation
#   - Development-friendly contexts with safety boundaries
#   - Security violation feedback and remediation guidance
#
# ==============================================================================
