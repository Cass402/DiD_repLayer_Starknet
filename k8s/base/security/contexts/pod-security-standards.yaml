# ==============================================================================
# Veridis Decentralized Identity Protocol - Pod Security Standards
# ==============================================================================
#
# This manifest defines comprehensive pod security standards for the Veridis deployment,
# providing:
#
# POD SECURITY STANDARDS FRAMEWORK:
#   • Kubernetes Pod Security Standards (PSS) implementation replacing deprecated PSPs
#   • Baseline, Restricted, and Privileged security profiles with granular control
#   • Namespace-level security policy enforcement with admission controller integration
#   • Workload-specific security standards with business requirement alignment
#   • Progressive security hardening with development-to-production lifecycle support
#
# ADMISSION CONTROLLER INTEGRATION:
#   • Pod Security Admission controller configuration with multi-mode enforcement
#   • Security violation detection with real-time alerting and incident response
#   • Policy exemption management with approval workflows and audit trails
#   • Automated compliance validation with continuous monitoring and reporting
#   • Custom security policies with business logic and regulatory requirement integration
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II container security controls with automated evidence collection
#   • GDPR data processing security with privacy-by-design implementation
#   • ISO 27001 system security controls with comprehensive access management
#   • PCI DSS secure system configuration for cardholder data environment protection
#   • NIST Cybersecurity Framework alignment with continuous security improvement
#
# ENTERPRISE SECURITY FEATURES:
#   • Multi-tenant security isolation with namespace-based policy enforcement
#   • Workload identity integration with service mesh and zero-trust architecture
#   • Runtime security monitoring with behavioral analysis and threat detection
#   • Supply chain security with image provenance verification and SBOM integration
#   • Security automation with GitOps workflows and infrastructure-as-code enforcement
#
# OPERATIONAL SECURITY CONTROLS:
#   • Real-time security policy enforcement with minimal performance impact
#   • Automated security violation remediation with incident response integration
#   • Comprehensive security audit logging with regulatory compliance support
#   • Performance-optimized security controls with resource-aware implementation
#   • Business continuity integration with disaster recovery and failover procedures
#
# ==============================================================================

# ==============================================================================
# Production Namespace - Restricted Security Standard
# ==============================================================================
apiVersion: v1
kind: Namespace
metadata:
  name: veridis

  # Core resource identification labels
  labels:
    # Kubernetes standard labels
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: namespace
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Pod Security Standards configuration
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/enforce-version: v1.29
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/audit-version: v1.29
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/warn-version: v1.29

    # Veridis security classification
    security.veridis.xyz/policy-type: pod-security-standard
    security.veridis.xyz/security-level: restricted
    security.veridis.xyz/scope: production-workloads
    security.veridis.xyz/enforcement-mode: strict
    security.veridis.xyz/compliance-tier: maximum

    # Security control classification
    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: critical
    security.veridis.xyz/threat-mitigation: "container-escape,privilege-escalation,host-access"
    security.veridis.xyz/attack-surface: "minimal"
    security.veridis.xyz/hardening-level: "maximum"

    # Business classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/impact-level: maximum
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,pci-dss,nist"
    business.veridis.xyz/security-investment: "tier-1"
    business.veridis.xyz/customer-facing: "true"

    # Operational labels
    veridis.xyz/environment: production
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: engineering
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "container-security-control"
    compliance.veridis.xyz/gdpr: "data-processing-security"
    compliance.veridis.xyz/iso27001: "system-security-control"
    compliance.veridis.xyz/pci-dss: "secure-system-configuration"
    compliance.veridis.xyz/nist: "container-security-framework"
    governance.veridis.xyz/policy-enforcement: "mandatory"

    # Tenant and isolation labels
    veridis.xyz/tenant: production
    veridis.xyz/isolation-level: maximum
    veridis.xyz/network-policy: enabled
    veridis.xyz/resource-quotas: enforced

  annotations:
    # Namespace security purpose and scope
    veridis.xyz/description: "Production namespace with restricted Pod Security Standards enforcing maximum container security"
    veridis.xyz/purpose: "Hosts production workloads with strict security controls, compliance requirements, and zero-trust architecture"
    veridis.xyz/scope: "All production services including backend APIs, database, UI, and cryptographic workloads"

    # Security architecture and design
    security.veridis.xyz/security-architecture: "Zero-trust with defense-in-depth, least privilege access, and comprehensive monitoring"
    security.veridis.xyz/threat-model: "Advanced persistent threats, insider threats, supply chain attacks, container escapes"
    security.veridis.xyz/control-framework: "Layered security controls with prevention, detection, and response capabilities"

    # Pod Security Standards implementation
    security.veridis.xyz/pss-implementation: "Restricted profile with comprehensive security controls and minimal attack surface"
    security.veridis.xyz/admission-control: "Pod Security Admission controller with strict enforcement and audit logging"
    security.veridis.xyz/policy-exemptions: "No exemptions allowed - all workloads must comply with restricted profile"

    # Compliance and regulatory requirements
    compliance.veridis.xyz/regulatory-alignment: "SOC 2 CC6.1, GDPR Article 32, ISO 27001 A.12.6.1, PCI DSS 2.2"
    compliance.veridis.xyz/audit-requirements: "Continuous compliance monitoring with automated evidence collection"
    compliance.veridis.xyz/certification-scope: "All production workloads included in compliance certifications"

    # Business continuity and operational requirements
    business.veridis.xyz/availability-sla: "99.99% uptime with maximum security posture maintained"
    business.veridis.xyz/disaster-recovery: "Security controls consistent across primary and disaster recovery sites"
    business.veridis.xyz/change-management: "All security changes require approval and impact assessment"

    # Monitoring and alerting
    monitoring.veridis.xyz/security-monitoring: "Real-time security violation detection with immediate alerting"
    monitoring.veridis.xyz/compliance-monitoring: "Continuous compliance validation with automated reporting"
    monitoring.veridis.xyz/incident-response: "Automated incident response for security policy violations"

    # Performance and resource management
    performance.veridis.xyz/security-overhead: "Minimal performance impact from security controls with optimization"
    performance.veridis.xyz/resource-allocation: "Security controls integrated with resource quotas and limits"
    performance.veridis.xyz/scaling-considerations: "Auto-scaling compatible with security policy enforcement"

    # Contact information and escalation
    veridis.xyz/owner: "platform-engineering@veridis.xyz"
    veridis.xyz/security-contact: "security@veridis.xyz"
    veridis.xyz/compliance-contact: "compliance@veridis.xyz"
    veridis.xyz/incident-commander: "incident-response@veridis.xyz"
    veridis.xyz/escalation: "ciso@veridis.xyz"

    # Documentation and procedures
    veridis.xyz/security-documentation: "https://docs.veridis.xyz/security/pod-security-standards"
    veridis.xyz/runbook: "https://docs.veridis.xyz/operations/production-security"
    veridis.xyz/incident-procedures: "https://docs.veridis.xyz/incident-response/security-violations"

---
# ==============================================================================
# Database Namespace - Ultra-Restricted Security Standard
# ==============================================================================
apiVersion: v1
kind: Namespace
metadata:
  name: veridis-database

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: namespace
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Ultra-restricted security configuration
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/enforce-version: v1.29
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/audit-version: v1.29
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/warn-version: v1.29

    security.veridis.xyz/policy-type: pod-security-standard
    security.veridis.xyz/security-level: ultra-restricted
    security.veridis.xyz/scope: database-workloads
    security.veridis.xyz/enforcement-mode: maximum
    security.veridis.xyz/compliance-tier: maximum

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: critical
    security.veridis.xyz/threat-mitigation: "data-breach,unauthorized-access,data-corruption"
    security.veridis.xyz/data-classification: "confidential,restricted,regulated"
    security.veridis.xyz/encryption-required: "mandatory"

    business.veridis.xyz/criticality: system-critical
    business.veridis.xyz/impact-level: maximum
    business.veridis.xyz/data-sovereignty: "regulated"
    business.veridis.xyz/compliance-scope: "soc2,gdpr,iso27001,pci-dss"
    business.veridis.xyz/audit-requirements: "comprehensive"

    veridis.xyz/environment: production
    veridis.xyz/service: database
    veridis.xyz/team: database-administration
    veridis.xyz/cost-center: engineering

    compliance.veridis.xyz/soc2: "data-security-control"
    compliance.veridis.xyz/gdpr: "data-controller-security"
    compliance.veridis.xyz/iso27001: "information-storage-security"
    compliance.veridis.xyz/pci-dss: "cardholder-data-protection"
    governance.veridis.xyz/policy-enforcement: "maximum"

    veridis.xyz/tenant: database
    veridis.xyz/isolation-level: maximum
    veridis.xyz/network-policy: strict
    veridis.xyz/resource-quotas: enforced

  annotations:
    veridis.xyz/description: "Ultra-restricted database namespace with maximum data protection controls and comprehensive compliance"
    veridis.xyz/purpose: "Hosts database workloads with maximum security posture for customer PII and regulated data"
    veridis.xyz/scope: "PostgreSQL database, backup operations, replication services, data processing workflows"

    # Database-specific security architecture
    security.veridis.xyz/data-protection: "Encryption at rest and in transit, access logging, audit trails, data residency"
    security.veridis.xyz/database-hardening: "Minimal attack surface, secure configuration, access controls, monitoring"
    security.veridis.xyz/threat-landscape: "Database attacks, privilege escalation, data exfiltration, insider threats"

    # Regulatory compliance for data processing
    compliance.veridis.xyz/data-handling: "GDPR Article 32 technical measures, PCI DSS data protection requirements"
    compliance.veridis.xyz/regulatory-compliance: "Data controller security, processor agreements, cross-border transfers"
    compliance.veridis.xyz/audit-scope: "All database operations, data access, configuration changes, security events"

    # High availability and disaster recovery
    business.veridis.xyz/availability-sla: "99.999% uptime with zero data loss guarantee"
    business.veridis.xyz/disaster-recovery: "RTO 15 minutes, RPO 5 minutes, automated failover, secure recovery"
    business.veridis.xyz/business-continuity: "24/7 operations, maintenance windows, emergency procedures"

    veridis.xyz/owner: "database-team@veridis.xyz"
    veridis.xyz/dba: "dba@veridis.xyz"
    veridis.xyz/security-contact: "data-protection@veridis.xyz"
    veridis.xyz/compliance-contact: "dpo@veridis.xyz"

---
# ==============================================================================
# Development Namespace - Baseline Security Standard
# ==============================================================================
apiVersion: v1
kind: Namespace
metadata:
  name: veridis-development

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-development
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: namespace
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Baseline security for development flexibility
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/enforce-version: v1.29
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/audit-version: v1.29
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/warn-version: v1.29

    security.veridis.xyz/policy-type: pod-security-standard
    security.veridis.xyz/security-level: baseline
    security.veridis.xyz/scope: development-workloads
    security.veridis.xyz/enforcement-mode: balanced
    security.veridis.xyz/compliance-tier: development

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: low
    security.veridis.xyz/threat-mitigation: "basic-security,development-safety"
    security.veridis.xyz/learning-environment: "true"
    security.veridis.xyz/flexibility: "enhanced"

    business.veridis.xyz/criticality: development
    business.veridis.xyz/impact-level: low
    business.veridis.xyz/customer-facing: "false"
    business.veridis.xyz/compliance-scope: "basic"
    business.veridis.xyz/innovation-enablement: "maximum"

    veridis.xyz/environment: development
    veridis.xyz/team: development
    veridis.xyz/cost-center: engineering
    veridis.xyz/learning-environment: "true"

    governance.veridis.xyz/policy-enforcement: "flexible"
    governance.veridis.xyz/exception-process: "team-lead-approval"

    veridis.xyz/tenant: development
    veridis.xyz/isolation-level: basic
    veridis.xyz/network-policy: permissive
    veridis.xyz/resource-quotas: development

  annotations:
    veridis.xyz/description: "Development namespace with baseline Pod Security Standards balancing security and developer productivity"
    veridis.xyz/purpose: "Provides secure development environment with flexibility for experimentation and learning"
    veridis.xyz/scope: "Development workloads, testing environments, learning platforms, prototype development"

    # Development-focused security approach
    security.veridis.xyz/security-philosophy: "Essential security with maximum developer flexibility and productivity"
    security.veridis.xyz/threat-model: "Minimal threats in isolated development environment with basic protections"
    security.veridis.xyz/risk-acceptance: "Higher risk tolerance for development speed and innovation"

    # Developer experience optimization
    veridis.xyz/developer-experience: "Maximum flexibility, minimal friction, comprehensive debugging capabilities"
    veridis.xyz/learning-support: "Educational security controls, clear error messages, development guidance"
    veridis.xyz/innovation-enablement: "Experimental features, prototype development, architectural exploration"

    # Development safety and isolation
    veridis.xyz/isolation-boundaries: "Development environment isolation, no production data access"
    veridis.xyz/safety-measures: "Resource limits, namespace isolation, automated cleanup, data protection"

    veridis.xyz/owner: "development-team@veridis.xyz"
    veridis.xyz/dev-lead: "development-manager@veridis.xyz"
    veridis.xyz/mentor: "senior-developers@veridis.xyz"

---
# ==============================================================================
# Staging Namespace - Restricted Security Standard with Testing Flexibility
# ==============================================================================
apiVersion: v1
kind: Namespace
metadata:
  name: veridis-staging

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-staging
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: namespace
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Restricted security with testing considerations
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/enforce-version: v1.29
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/audit-version: v1.29
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/warn-version: v1.29

    security.veridis.xyz/policy-type: pod-security-standard
    security.veridis.xyz/security-level: restricted
    security.veridis.xyz/scope: staging-workloads
    security.veridis.xyz/enforcement-mode: testing-optimized
    security.veridis.xyz/compliance-tier: pre-production

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: medium
    security.veridis.xyz/threat-mitigation: "security-validation,testing-safety"
    security.veridis.xyz/testing-environment: "true"
    security.veridis.xyz/production-readiness: "validation"

    business.veridis.xyz/criticality: testing-critical
    business.veridis.xyz/impact-level: medium
    business.veridis.xyz/customer-facing: "false"
    business.veridis.xyz/compliance-scope: "pre-production"
    business.veridis.xyz/quality-assurance: "comprehensive"

    veridis.xyz/environment: staging
    veridis.xyz/team: quality-assurance
    veridis.xyz/cost-center: engineering
    veridis.xyz/testing-environment: "true"

    governance.veridis.xyz/policy-enforcement: "testing-aligned"
    governance.veridis.xyz/exception-process: "qa-lead-approval"

    veridis.xyz/tenant: staging
    veridis.xyz/isolation-level: medium
    veridis.xyz/network-policy: testing
    veridis.xyz/resource-quotas: staging

  annotations:
    veridis.xyz/description: "Staging namespace with restricted Pod Security Standards optimized for testing and pre-production validation"
    veridis.xyz/purpose: "Provides production-like security environment for integration testing and deployment validation"
    veridis.xyz/scope: "Integration testing, performance testing, security testing, deployment validation"

    # Testing-focused security implementation
    security.veridis.xyz/testing-security: "Production-equivalent security controls with testing flexibility"
    security.veridis.xyz/validation-scope: "Security policy validation, compliance testing, performance testing"
    security.veridis.xyz/production-readiness: "Security controls validated before production deployment"

    # Quality assurance integration
    veridis.xyz/qa-integration: "Automated security testing, compliance validation, performance benchmarking"
    veridis.xyz/deployment-validation: "Security policy enforcement testing, admission controller validation"
    veridis.xyz/regression-testing: "Security regression tests, compliance verification, policy impact analysis"

    veridis.xyz/owner: "qa-team@veridis.xyz"
    veridis.xyz/qa-lead: "quality-assurance@veridis.xyz"
    veridis.xyz/security-testing: "security-testing@veridis.xyz"

---
# ==============================================================================
# Monitoring Namespace - Baseline Security with System Access
# ==============================================================================
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: namespace
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Baseline security for monitoring system access
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/enforce-version: v1.29
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/audit-version: v1.29
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/warn-version: v1.29

    security.veridis.xyz/policy-type: pod-security-standard
    security.veridis.xyz/security-level: baseline-monitoring
    security.veridis.xyz/scope: monitoring-infrastructure
    security.veridis.xyz/enforcement-mode: system-access
    security.veridis.xyz/compliance-tier: operational

    security.veridis.xyz/control-type: preventive
    security.veridis.xyz/risk-level: medium
    security.veridis.xyz/threat-mitigation: "monitoring-security,system-access-control"
    security.veridis.xyz/system-access: "required"
    security.veridis.xyz/observability: "comprehensive"

    business.veridis.xyz/criticality: operational-critical
    business.veridis.xyz/impact-level: medium
    business.veridis.xyz/customer-facing: "false"
    business.veridis.xyz/compliance-scope: "soc2,operational"
    business.veridis.xyz/observability-requirement: "maximum"

    veridis.xyz/environment: production
    veridis.xyz/service: monitoring
    veridis.xyz/team: sre
    veridis.xyz/cost-center: engineering

    governance.veridis.xyz/policy-enforcement: "monitoring-optimized"
    governance.veridis.xyz/exception-process: "sre-lead-approval"

    veridis.xyz/tenant: monitoring
    veridis.xyz/isolation-level: monitoring
    veridis.xyz/network-policy: monitoring
    veridis.xyz/resource-quotas: monitoring

  annotations:
    veridis.xyz/description: "Monitoring namespace with baseline Pod Security Standards enabling comprehensive system observability"
    veridis.xyz/purpose: "Provides secure monitoring infrastructure with necessary system access for comprehensive observability"
    veridis.xyz/scope: "Prometheus, Grafana, Jaeger, logging infrastructure, alerting systems, metrics collection"

    # Monitoring-specific security requirements
    security.veridis.xyz/monitoring-security: "Operational data protection with system access for comprehensive monitoring"
    security.veridis.xyz/system-access: "Host system monitoring, container inspection, performance data collection"
    security.veridis.xyz/data-sensitivity: "System metrics, application logs, performance data, error information"

    # Observability requirements
    veridis.xyz/observability-scope: "System metrics, application performance, security events, compliance monitoring"
    veridis.xyz/monitoring-coverage: "Infrastructure, applications, security, compliance, business metrics"
    veridis.xyz/alerting-requirements: "Real-time alerting, escalation procedures, incident response integration"

    veridis.xyz/owner: "sre-team@veridis.xyz"
    veridis.xyz/monitoring-lead: "monitoring@veridis.xyz"
    veridis.xyz/ops-contact: "operations@veridis.xyz"

---
# ==============================================================================
# System Components Namespace - Privileged Security Standard
# ==============================================================================
apiVersion: v1
kind: Namespace
metadata:
  name: kube-system

  labels:
    # System namespace with privileged access
    pod-security.kubernetes.io/enforce: privileged
    pod-security.kubernetes.io/enforce-version: v1.29
    pod-security.kubernetes.io/audit: privileged
    pod-security.kubernetes.io/audit-version: v1.29
    pod-security.kubernetes.io/warn: privileged
    pod-security.kubernetes.io/warn-version: v1.29

    security.veridis.xyz/policy-type: pod-security-standard
    security.veridis.xyz/security-level: privileged
    security.veridis.xyz/scope: system-components
    security.veridis.xyz/enforcement-mode: system-required
    security.veridis.xyz/compliance-tier: system

    security.veridis.xyz/control-type: system-access
    security.veridis.xyz/risk-level: high
    security.veridis.xyz/threat-mitigation: "system-component-security"
    security.veridis.xyz/system-access: "full"
    security.veridis.xyz/cluster-administration: "required"

    business.veridis.xyz/criticality: system-critical
    business.veridis.xyz/impact-level: maximum
    business.veridis.xyz/customer-facing: "false"
    business.veridis.xyz/compliance-scope: "infrastructure"
    business.veridis.xyz/system-requirement: "kubernetes"

    veridis.xyz/environment: production
    veridis.xyz/service: kubernetes-system
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: engineering

    governance.veridis.xyz/policy-enforcement: "system-required"
    governance.veridis.xyz/exception-process: "platform-engineering-approval"

  annotations:
    veridis.xyz/description: "System namespace with privileged Pod Security Standards for Kubernetes system components"
    veridis.xyz/purpose: "Hosts Kubernetes system components requiring privileged access for cluster operations"
    veridis.xyz/scope: "kube-proxy, CNI, CSI drivers, cluster autoscaler, system controllers"

    # System component security
    security.veridis.xyz/system-security: "Kubernetes system components with necessary privileged access"
    security.veridis.xyz/access-justification: "System components require privileged access for cluster functionality"
    security.veridis.xyz/monitoring-enhanced: "Enhanced monitoring and auditing for privileged system components"

    veridis.xyz/owner: "platform-engineering@veridis.xyz"
    veridis.xyz/cluster-admin: "cluster-admin@veridis.xyz"
    veridis.xyz/security-contact: "security@veridis.xyz"

---
# ==============================================================================
# Pod Security Standards Admission Configuration
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: pod-security-standards-config
  namespace: kube-system

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: admission-configuration
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    security.veridis.xyz/config-type: admission-configuration
    security.veridis.xyz/security-level: comprehensive
    security.veridis.xyz/scope: cluster-wide
    security.veridis.xyz/enforcement-mode: strict
    security.veridis.xyz/compliance-tier: maximum

  annotations:
    veridis.xyz/description: "Pod Security Standards admission configuration for cluster-wide security policy enforcement"
    veridis.xyz/purpose: "Configures Pod Security Admission controller with comprehensive security policies and exemptions"
    veridis.xyz/scope: "Cluster-wide pod security policy enforcement with namespace-specific configurations"

# Pod Security Standards configuration
data:
  # ==============================================================================
  # Admission Configuration for Pod Security Standards
  # ==============================================================================
  admission-configuration.yaml: |
    apiVersion: apiserver.config.k8s.io/v1
    kind: AdmissionConfiguration
    plugins:
    - name: PodSecurity
      configuration:
        apiVersion: pod-security.admission.config.k8s.io/v1beta1
        kind: PodSecurityConfiguration

        # Default security standards for all namespaces
        defaults:
          enforce: "restricted"
          enforce-version: "v1.29"
          audit: "restricted"
          audit-version: "v1.29"
          warn: "restricted"
          warn-version: "v1.29"

        # Namespace-specific exemptions
        exemptions:
          # System namespaces requiring privileged access
          usernames: []
          runtimeClasses: []
          namespaces:
          - kube-system          # Kubernetes system components
          - kube-public          # Public cluster information
          - kube-node-lease      # Node lease management
          - local-path-storage   # Local path provisioner

        # Violation handling configuration
        violations:
          # Audit violations for compliance reporting
          audit: true

          # Warn on violations for development feedback
          warn: true

          # Enforce violations to prevent deployment
          enforce: true

  # ==============================================================================
  # Pod Security Standards Policy Matrix
  # ==============================================================================
  policy-matrix.yaml: |
    # Veridis Pod Security Standards Policy Matrix
    # =============================================

    # RESTRICTED PROFILE (Production Workloads):
    # ------------------------------------------
    # Namespaces: veridis, veridis-database
    # Security Level: Maximum
    # Compliance: SOC 2, GDPR, ISO 27001, PCI DSS
    #
    # Controls:
    # - runAsNonRoot: true
    # - allowPrivilegeEscalation: false
    # - runAsUser: non-root (>= 1)
    # - seccompProfile: RuntimeDefault or Localhost
    # - capabilities: drop ALL, minimal additions
    # - hostNetwork: false
    # - hostPID: false
    # - hostIPC: false
    # - hostPorts: forbidden
    # - volumes: restricted types only
    # - AppArmor: runtime/default
    # - SELinux: any

    # BASELINE PROFILE (Development/Monitoring):
    # -----------------------------------------
    # Namespaces: veridis-development, monitoring
    # Security Level: Moderate
    # Compliance: Basic security requirements
    #
    # Controls:
    # - privileged: false
    # - hostNetwork: false (exceptions for monitoring)
    # - hostPID: false (exceptions for monitoring)
    # - hostIPC: false
    # - hostPorts: restricted ranges
    # - allowedHostPaths: restricted
    # - volumes: broader set allowed
    # - runAsUser: flexible
    # - capabilities: broader set allowed
    # - seccompProfile: flexible

    # PRIVILEGED PROFILE (System Components):
    # ---------------------------------------
    # Namespaces: kube-system
    # Security Level: System Required
    # Compliance: Infrastructure security
    #
    # Controls:
    # - No restrictions (all capabilities allowed)
    # - Full system access for Kubernetes components
    # - Enhanced monitoring and auditing
    # - Restricted to system service accounts
    # - Administrative approval required

  # ==============================================================================
  # Compliance Mapping Configuration
  # ==============================================================================
  compliance-mapping.yaml: |
    # Pod Security Standards Compliance Mapping
    # =========================================

    # SOC 2 Type II Controls:
    # ----------------------
    # CC6.1 - Logical and Physical Access Controls
    #   - Restricted profile enforcement
    #   - Non-root user requirements
    #   - Capability restrictions
    #   - Host access prevention

    # CC6.7 - System Monitoring
    #   - Audit logging of policy violations
    #   - Real-time violation detection
    #   - Compliance monitoring and reporting

    # GDPR Article 32 - Security of Processing:
    # -----------------------------------------
    # Technical Measures:
    #   - Container security controls
    #   - Data processing isolation
    #   - Access control enforcement
    #   - Audit trail maintenance

    # ISO 27001 Controls:
    # ------------------
    # A.12.6.1 - Management of Technical Vulnerabilities
    #   - Secure container configuration
    #   - Vulnerability prevention controls
    #   - Security baseline enforcement

    # A.13.1.1 - Network Controls
    #   - Host network access restrictions
    #   - Network isolation enforcement
    #   - Port access limitations

    # PCI DSS Requirements:
    # --------------------
    # 2.2 - System Security Configuration
    #   - Secure container defaults
    #   - Unnecessary service prevention
    #   - Security hardening standards

    # 8.1 - User Identification and Authentication
    #   - Non-root user enforcement
    #   - User context validation
    #   - Access control verification

    # NIST Cybersecurity Framework:
    # ----------------------------
    # PR.AC - Identity Management and Access Control
    #   - Principle of least privilege
    #   - Access control enforcement
    #   - User and service authentication

    # PR.DS - Data Security
    #   - Data-in-transit protection
    #   - Data processing security
    #   - Information flow control

---
# ==============================================================================
# Pod Security Standards Monitoring and Alerting
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: pod-security-monitoring-config
  namespace: monitoring

  labels:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: monitoring-configuration
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    security.veridis.xyz/config-type: monitoring-configuration
    security.veridis.xyz/security-level: comprehensive
    security.veridis.xyz/scope: security-monitoring
    security.veridis.xyz/monitoring-type: pod-security-standards

  annotations:
    veridis.xyz/description: "Pod Security Standards monitoring configuration for real-time security violation detection and compliance reporting"
    veridis.xyz/purpose: "Provides comprehensive monitoring and alerting for Pod Security Standards enforcement and compliance"
    veridis.xyz/scope: "Security policy violations, compliance monitoring, audit trail management, incident response"

# Monitoring and alerting configuration
data:
  # ==============================================================================
  # Prometheus Monitoring Rules
  # ==============================================================================
  pod-security-rules.yaml: |
    # Pod Security Standards Monitoring Rules
    groups:
    - name: pod-security-standards
      rules:

      # Pod Security Violation Detection
      - alert: PodSecurityViolation
        expr: increase(pod_security_violations_total[5m]) > 0
        for: 0m
        labels:
          severity: critical
          category: security
          compliance: soc2
        annotations:
          summary: "Pod Security Standards violation detected"
          description: "{{ $labels.namespace }}/{{ $labels.pod }} violated Pod Security Standards policy"
          runbook_url: "https://docs.veridis.xyz/incident-response/pod-security-violations"

      # Compliance Drift Detection
      - alert: ComplianceDrift
        expr: pod_security_compliance_score < 0.95
        for: 5m
        labels:
          severity: warning
          category: compliance
          compliance: all
        annotations:
          summary: "Pod Security Standards compliance drift detected"
          description: "Compliance score dropped to {{ $value }} in namespace {{ $labels.namespace }}"

      # Privileged Container Alert
      - alert: PrivilegedContainerRunning
        expr: kube_pod_container_status_running{container=~".*"} and on(pod, namespace) kube_pod_spec_containers_security_context_privileged == 1
        for: 0m
        labels:
          severity: critical
          category: security
          threat: privilege-escalation
        annotations:
          summary: "Privileged container running in restricted namespace"
          description: "Container {{ $labels.container }} in pod {{ $labels.pod }} is running with privileged access"

      # Non-compliant Root User
      - alert: RootUserContainer
        expr: kube_pod_container_status_running{container=~".*"} and on(pod, namespace) kube_pod_spec_containers_security_context_run_as_user == 0
        for: 0m
        labels:
          severity: high
          category: security
          threat: privilege-escalation
        annotations:
          summary: "Container running as root user"
          description: "Container {{ $labels.container }} in pod {{ $labels.pod }} is running as root user"

  # ==============================================================================
  # Grafana Dashboard Configuration
  # ==============================================================================
  pod-security-dashboard.json: |
    {
      "dashboard": {
        "title": "Pod Security Standards Compliance",
        "tags": ["security", "compliance", "pod-security"],
        "panels": [
          {
            "title": "Security Policy Violations",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(pod_security_violations_total[5m]))"
              }
            ]
          },
          {
            "title": "Compliance Score by Namespace",
            "type": "gauge",
            "targets": [
              {
                "expr": "pod_security_compliance_score",
                "legendFormat": "{{namespace}}"
              }
            ]
          },
          {
            "title": "Security Violations Timeline",
            "type": "graph",
            "targets": [
              {
                "expr": "increase(pod_security_violations_total[1m])",
                "legendFormat": "{{namespace}} - {{violation_type}}"
              }
            ]
          }
        ]
      }
    }

  # ==============================================================================
  # Audit Log Configuration
  # ==============================================================================
  audit-config.yaml: |
    # Pod Security Standards Audit Configuration
    apiVersion: audit.k8s.io/v1
    kind: Policy
    rules:

    # Audit all pod security violations
    - level: Metadata
      namespaces: ["veridis", "veridis-database", "veridis-staging"]
      resources:
      - group: ""
        resources: ["pods"]
      annotations:
        audit.veridis.xyz/category: "pod-security-violation"
        compliance.veridis.xyz/scope: "soc2,gdpr,iso27001"

    # Audit privileged container creation attempts
    - level: RequestResponse
      namespaces: ["veridis", "veridis-database"]
      resources:
      - group: ""
        resources: ["pods"]
      omitStages: ["RequestReceived"]
      annotations:
        audit.veridis.xyz/category: "privileged-container-attempt"
        security.veridis.xyz/threat-level: "high"

    # Audit security context modifications
    - level: Metadata
      namespaces: ["veridis", "veridis-database", "veridis-staging"]
      resources:
      - group: ""
        resources: ["pods", "pods/ephemeralcontainers"]
      annotations:
        audit.veridis.xyz/category: "security-context-change"
        compliance.veridis.xyz/evidence: "security-control-modification"

# ==============================================================================
# Pod Security Standards Summary and Implementation Architecture
# ==============================================================================
#
# COMPREHENSIVE POD SECURITY STANDARDS IMPLEMENTATION:
# ====================================================
#
# NAMESPACE SECURITY HIERARCHY:
# -----------------------------
# 1. Production (veridis) - RESTRICTED:
#    - Maximum security controls with strict enforcement
#    - Customer-facing workloads with compliance requirements
#    - Zero-tolerance policy for security violations
#    - Comprehensive audit logging and monitoring
#
# 2. Database (veridis-database) - ULTRA-RESTRICTED:
#    - Maximum data protection with enhanced controls
#    - Regulatory compliance for customer PII and regulated data
#    - Zero data loss tolerance with disaster recovery
#    - Comprehensive encryption and access controls
#
# 3. Development (veridis-development) - BASELINE:
#    - Balanced security with developer productivity
#    - Learning environment with educational controls
#    - Flexible debugging with safety boundaries
#    - Innovation enablement with security awareness
#
# 4. Staging (veridis-staging) - RESTRICTED:
#    - Production-equivalent security for testing
#    - Deployment validation with security verification
#    - Quality assurance with compliance testing
#    - Performance testing with security integration
#
# 5. Monitoring - BASELINE:
#    - System access for comprehensive observability
#    - Operational data protection with monitoring flexibility
#    - Infrastructure monitoring with security controls
#    - Cost-effective monitoring with security awareness
#
# 6. System (kube-system) - PRIVILEGED:
#    - Kubernetes system components with necessary access
#    - Enhanced monitoring and auditing for privileged access
#    - Restricted to system service accounts
#    - Administrative approval required for changes
#
# SECURITY CONTROL IMPLEMENTATION:
# ================================
# Pod Security Standards Enforcement:
#   - Kubernetes native Pod Security Admission controller
#   - Namespace-specific security policy enforcement
#   - Real-time violation detection and prevention
#   - Comprehensive audit logging and compliance reporting
#
# Container Security Controls:
#   - Non-root user enforcement across production workloads
#   - Privilege escalation prevention with capability restrictions
#   - Host access prevention with namespace isolation
#   - Read-only root filesystems where operationally feasible
#
# Admission Control Integration:
#   - Pod Security Admission controller configuration
#   - Custom admission policies with business logic
#   - Exemption management with approval workflows
#   - Automated compliance validation and reporting
#
# COMPLIANCE FRAMEWORK ALIGNMENT:
# ===============================
# SOC 2 Type II:
#   - Container security controls (CC6.1, CC6.7)
#   - Logical access controls with policy enforcement
#   - System monitoring with violation detection
#   - Audit trail maintenance with compliance reporting
#
# GDPR:
#   - Data processing security (Article 32)
#   - Technical security measures implementation
#   - Privacy by design with container-level protection
#   - Data controller security with access controls
#
# ISO 27001:
#   - System security controls (A.12.6.1, A.13.1.1)
#   - Information processing security with container hardening
#   - Access control policy enforcement
#   - Vulnerability management with secure configuration
#
# PCI DSS:
#   - Secure system configuration (Requirement 2.2)
#   - Cardholder data environment protection
#   - User identification and authentication (8.1)
#   - Access control implementation and monitoring
#
# NIST Cybersecurity Framework:
#   - Identity Management and Access Control (PR.AC)
#   - Data Security with container-level protection (PR.DS)
#   - Protective Technology implementation (PR.PT)
#   - Anomaly detection with security monitoring (DE.AE)
#
# OPERATIONAL SECURITY FEATURES:
# ==============================
# Real-time Monitoring:
#   - Pod Security Standards violation detection
#   - Compliance drift monitoring with alerting
#   - Security metric collection and analysis
#   - Automated incident response integration
#
# Audit and Compliance:
#   - Comprehensive audit logging with retention
#   - Compliance reporting with evidence collection
#   - Regulatory requirement mapping and validation
#   - Automated compliance assessment and scoring
#
# Developer Experience:
#   - Clear security guidance with violation feedback
#   - Development-friendly policies with safety boundaries
#   - Security awareness training integration
#   - Automated security testing and validation
#
# Business Continuity:
#   - Security policy consistency across environments
#   - Disaster recovery with security control preservation
#   - High availability with security integration
#   - Emergency access procedures with audit trails
#
# ==============================================================================
