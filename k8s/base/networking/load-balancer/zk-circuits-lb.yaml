# ==============================================================================
# Veridis Decentralized Identity Protocol - ZK Circuits Load Balancer Configuration
# ==============================================================================
#
# This manifest defines comprehensive ZK Circuits Load Balancer for the
# decentralized identity protocol, providing:
#
# ENTERPRISE VERIDIS ZK CIRCUITS LOAD BALANCER ARCHITECTURE:
#   • Advanced ZK Circuits load balancing with intelligent computational traffic distribution and GPU-aware routing
#   • Multi-tier load balancer architecture with development, testing, staging, and production environments
#   • Comprehensive networking framework with ZK routing, computational optimization, GPU load balancing integration
#   • Advanced lifecycle management with automated load balancer optimization, ZK routing control, and computational enhancement
#   • Enterprise-grade intelligence with comprehensive analytics and ZK Circuits load balancer performance insights
#
# VERIDIS ZK CIRCUITS LOAD BALANCER OPTIMIZATION:
#   • High-performance ZK Circuits load balancing with intelligent routing and computational service optimization
#   • Intelligent computational traffic management with responsive routing and performance-based ZK decisions
#   • Advanced GPU management with business intelligence and GPU-aware load balancer control
#   • Comprehensive networking control with intelligent ZK Circuits load balancer management and computational enhancement
#   • Enterprise acceleration with predictive ZK Circuits load balancer management and computational optimization
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II ZK Circuits load balancer controls with comprehensive audit and computational requirements
#   • GDPR ZK Circuits load balancer compliance with data protection, privacy controls, and computational management
#   • ISO 27001 ZK Circuits load balancer management with comprehensive framework integration
#   • NIST 800-190 container ZK Circuits load balancer security with computational-specific validation and compliance
#   • Zero-knowledge protocol compliance with regulatory frameworks and ZK Circuits load balancer best practices
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent ZK Circuits load balancer lifecycle management with automated provisioning and computational optimization
#   • Predictive computational analytics with capacity planning and ZK Circuits load balancer intelligence
#   • Advanced monitoring integration with ZK Circuits load balancer analytics and computational business intelligence
#   • Comprehensive networking control with ZK Circuits load balancer preservation and computational optimization
#   • Business continuity ZK Circuits load balancer with computational guarantees and ZK optimization
#
# LOAD BALANCER ACCELERATION INTELLIGENCE:
#   • ZK Circuits load balancer usage analytics with computational patterns and optimization recommendations
#   • Computational monitoring with ZK Circuits load balancer latency and routing optimization intelligence
#   • Development efficiency with ZK Circuits load balancer analytics and deployment optimization procedures
#   • Cost optimization with ZK Circuits load balancer utilization analysis and computational capacity planning procedures
#   • Quality assurance with ZK Circuits load balancer metrics and computational validation procedures
#
# ==============================================================================

# ==============================================================================
# Veridis ZK Circuits Load Balancer - Primary Production Configuration
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: veridis-zk-circuits-load-balancer
  namespace: veridis-infrastructure

  # Core Veridis ZK Circuits Load Balancer identification labels
  labels:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-load-balancer
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Load Balancer specific classification
    loadbalancer.veridis.xyz/type: zk-circuits-load-balancer
    loadbalancer.veridis.xyz/category: production-load-balancer
    loadbalancer.veridis.xyz/role: primary-zk-circuits-load-balancer
    loadbalancer.veridis.xyz/performance-class: high-performance-zk-circuits-load-balancer
    loadbalancer.veridis.xyz/security-level: enterprise

    # ZK Circuits Load Balancer classification
    zk-circuits.veridis.xyz/load-balancer-type: intelligent-load-balancer
    zk-circuits.veridis.xyz/service-type: computational-service
    zk-circuits.veridis.xyz/performance-tier: high-performance
    zk-circuits.veridis.xyz/optimization: enabled
    zk-circuits.veridis.xyz/features: full-zk-stack

    # GPU Load Balancer classification
    gpu.veridis.xyz/tier: production
    gpu.veridis.xyz/optimization: intelligent-gpu-routing
    gpu.veridis.xyz/routing: advanced
    gpu.veridis.xyz/load-balancing: gpu-aware
    gpu.veridis.xyz/efficiency: maximum

    # Computational Load Balancer classification
    computational.veridis.xyz/tier: production
    computational.veridis.xyz/optimization: intelligent-computational-routing
    computational.veridis.xyz/routing: advanced
    computational.veridis.xyz/load-balancing: weighted
    computational.veridis.xyz/efficiency: maximum

    # Business Load Balancer classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/impact: high-zk-performance
    business.veridis.xyz/cost-tier: production
    business.veridis.xyz/sla-tier: enterprise
    business.veridis.xyz/availability-requirement: 99.9

    # Operational Load Balancer labels
    veridis.xyz/environment: production
    veridis.xyz/team: zk-engineering
    veridis.xyz/cost-center: computational-infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "zk-circuits-load-balancer-control-framework"
    compliance.veridis.xyz/gdpr: "zk-circuits-load-balancer-data-protection"
    compliance.veridis.xyz/iso27001: "zk-circuits-load-balancer-security-management"
    compliance.veridis.xyz/nist-800-190: "zk-circuits-load-balancer-container-security"
    governance.veridis.xyz/policy-enforcement: "enterprise"

    # ZK Circuits Load Balancer monitoring and analytics
    monitoring.veridis.xyz/zk-circuits-load-balancer-monitoring: "enabled"
    monitoring.veridis.xyz/performance-monitoring: "comprehensive"
    monitoring.veridis.xyz/computational-monitoring: "enabled"
    monitoring.veridis.xyz/business-monitoring: "enabled"
    monitoring.veridis.xyz/compliance-monitoring: "enabled"

    # GPU management labels
    gpu.veridis.xyz/affinity-enabled: "true"
    gpu.veridis.xyz/resource-aware: "enabled"
    gpu.veridis.xyz/scheduling-optimization: "enabled"
    gpu.veridis.xyz/load-balancing-algorithm: "gpu-aware-weighted-round-robin"
    gpu.veridis.xyz/memory-optimization: "enabled"

  annotations:
    # Load Balancer purpose and specifications
    veridis.xyz/description: "Enterprise Veridis ZK Circuits Load Balancer with intelligent computational traffic distribution, GPU-aware routing, and comprehensive ZK service management"
    veridis.xyz/purpose: "Provides comprehensive ZK Circuits load balancing for zero-knowledge proof generation with intelligent computational routing, GPU optimization, and networking guarantees"
    veridis.xyz/scope: "ZK Circuits load balancer including computational routing, GPU management, proof scheduling, and comprehensive ZK intelligence"

    # Load Balancer architecture and design
    loadbalancer.veridis.xyz/architecture: "Enterprise ZK Circuits load balancer with intelligent computational routing, GPU-aware distribution, and proof generation optimization"
    loadbalancer.veridis.xyz/design-pattern: "Multi-tier ZK Circuits load balancer with computational optimization, cost efficiency, and business intelligence"
    loadbalancer.veridis.xyz/optimization-model: "Intelligent ZK Circuits load balancer with predictive analytics, computational optimization, and GPU efficiency"
    loadbalancer.veridis.xyz/performance-model: "High-performance ZK Circuits load balancer with computational optimization and intelligent GPU management"

    # ZK Circuits Load Balancer specifications
    zk-circuits.veridis.xyz/load-balancer-specification: "ZK Circuits load balancer with computational optimization and intelligent ZK service management"
    zk-circuits.veridis.xyz/routing-specification: "Advanced ZK routing configuration with computational optimization and GPU enhancement"
    zk-circuits.veridis.xyz/computational-specification: "ZK computational management optimization with intelligent routing and enhancement"
    zk-circuits.veridis.xyz/performance-specification: "ZK performance routing with computational acceleration and GPU efficiency"
    zk-circuits.veridis.xyz/business-specification: "ZK business load balancer with cost optimization and strategic computational intelligence"

    # GPU Load Balancer specifications
    gpu.veridis.xyz/load-balancer-specification: "GPU-aware ZK Circuits load balancer with resource optimization and computational intelligence"
    gpu.veridis.xyz/routing-specification: "GPU routing management optimization with intelligent ZK and computational enhancement"
    gpu.veridis.xyz/balancing-specification: "GPU balancing with cost optimization and intelligent ZK management"
    gpu.veridis.xyz/resource-specification: "GPU resource management with auto-optimization and ZK management"
    gpu.veridis.xyz/monitoring-specification: "GPU monitoring with ZK Circuits load balancer analytics and computational intelligence"

    # Computational Load Balancer specifications
    computational.veridis.xyz/load-balancer-specification: "Computational-aware ZK Circuits load balancer with proof optimization and computational intelligence"
    computational.veridis.xyz/routing-specification: "Computational routing management optimization with intelligent ZK and GPU enhancement"
    computational.veridis.xyz/balancing-specification: "Computational balancing with cost optimization and intelligent ZK management"
    computational.veridis.xyz/proof-specification: "Computational proof management with auto-optimization and ZK management"
    computational.veridis.xyz/monitoring-specification: "Computational monitoring with ZK Circuits load balancer analytics and GPU intelligence"

    # Business Load Balancer specifications
    business.veridis.xyz/sla-specification: "SLA-compliant ZK Circuits load balancer with business continuity and computational guarantees"
    business.veridis.xyz/intelligence-specification: "Business intelligence with operational analytics and strategic insights"
    business.veridis.xyz/cost-specification: "Cost-optimized ZK Circuits load balancer with efficiency analysis and budget management"
    business.veridis.xyz/efficiency-specification: "Business efficiency with ZK Circuits load balancer optimization and computational intelligence"

    # Operational Load Balancer specifications
    operations.veridis.xyz/automation-specification: "Full automation with intelligent management and developer-friendly interfaces"
    operations.veridis.xyz/monitoring-specification: "Comprehensive monitoring with ZK Circuits load balancer analytics and computational intelligence"
    operations.veridis.xyz/management-specification: "Automated management with ZK Circuits load balancer preservation and optimization procedures"
    operations.veridis.xyz/scaling-specification: "Intelligent scaling with ZK Circuits load balancer management and computational optimization"

    # ZK Circuits Load Balancer lifecycle specifications
    lifecycle.veridis.xyz/zk-circuits-load-balancer-specification: "Dynamic ZK Circuits load balancer with automated computational management and GPU optimization"
    lifecycle.veridis.xyz/scaling-specification: "Intelligent ZK Circuits load balancer scaling with machine learning and computational forecasting"
    lifecycle.veridis.xyz/optimization-specification: "ZK Circuits load balancer optimization with intelligent computational management and GPU enhancement"
    lifecycle.veridis.xyz/evolution-specification: "ZK Circuits load balancer evolution with intelligent adaptation and computational optimization"

    # Cloud Provider Load Balancer annotations
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-internal: "false"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "HTTP"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "4000"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "15"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-unhealthy-threshold: "3"

    # Advanced ZK Circuits Load Balancer configuration
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "600"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "300"
    service.beta.kubernetes.io/aws-load-balancer-ssl-negotiation-policy: "ELBSecurityPolicy-TLS-1-2-2017-01"
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
    service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "veridis-zk-lb-access-logs"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-prefix: "zk-circuits-lb"

    # GPU-aware Session Affinity and Computational Stickiness
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: |
      stickiness.enabled=true,
      stickiness.type=source_ip,
      stickiness.source_ip.duration_seconds=7200,
      deregistration_delay.timeout_seconds=600,
      preserve_client_ip.enabled=true,
      load_balancing.algorithm.type=weighted_round_robin,
      target_group_health.dns_failover.minimum_healthy_targets.count=1,
      target_group_health.dns_failover.minimum_healthy_targets.percentage=50,
      target_group_health.unhealthy_state_routing.minimum_healthy_targets.count=1,
      target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage=25

    # Security and Compliance annotations for ZK Circuits
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-west-2:123456789012:certificate/veridis-zk-circuits-cert"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/aws-load-balancer-ssl-policy: "ELBSecurityPolicy-TLS13-1-2-2021-06"
    service.beta.kubernetes.io/aws-load-balancer-security-groups: "sg-zk-circuits-lb-security"

    # ZK Circuits performance optimization annotations
    zk-loadbalancer.veridis.xyz/performance-optimization: "enabled"
    zk-loadbalancer.veridis.xyz/gpu-awareness: "enabled"
    zk-loadbalancer.veridis.xyz/computational-pooling: "enabled"
    zk-loadbalancer.veridis.xyz/proof-caching: "enabled"
    zk-loadbalancer.veridis.xyz/batching: "intelligent"

    # GPU and computational monitoring annotations
    monitoring.veridis.xyz/prometheus-scrape: "true"
    monitoring.veridis.xyz/prometheus-port: "9091"
    monitoring.veridis.xyz/prometheus-path: "/metrics"
    monitoring.veridis.xyz/grafana-dashboard: "zk-circuits-load-balancer"
    monitoring.veridis.xyz/alerting-enabled: "true"
    monitoring.veridis.xyz/gpu-monitoring: "enabled"
    monitoring.veridis.xyz/computational-monitoring: "enabled"

    # ZK Circuits traffic management annotations
    zk-traffic.veridis.xyz/load-balancing-algorithm: "gpu-aware-weighted-round-robin"
    zk-traffic.veridis.xyz/session-affinity: "computational-affinity"
    zk-traffic.veridis.xyz/health-check-enabled: "true"
    zk-traffic.veridis.xyz/failover-enabled: "true"
    zk-traffic.veridis.xyz/circuit-breaker: "enabled"
    zk-traffic.veridis.xyz/proof-scheduling: "intelligent"

    # Documentation and procedures
    veridis.xyz/owner: "zk-team@veridis.xyz"
    veridis.xyz/load-balancer-admin: "zk-admin@veridis.xyz"
    veridis.xyz/escalation: "zk-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "zk-oncall@veridis.xyz"

    # Documentation references
    veridis.xyz/documentation: "https://docs.veridis.xyz/zk-circuits/load-balancer"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/zk-circuits/load-balancer-management"
    veridis.xyz/load-balancer-docs: "https://zk-circuits.veridis.xyz/load-balancer-guide"
    veridis.xyz/networking-docs: "https://networking.veridis.xyz/zk-circuits-load-balancer"

spec:
  # ==============================================================================
  # Service Type Configuration
  # ==============================================================================
  type: LoadBalancer

  # ==============================================================================
  # Load Balancer IP Configuration
  # ==============================================================================
  loadBalancerIP: "52.25.123.50"  # Static IP for ZK Circuits production
  loadBalancerSourceRanges:
    - "0.0.0.0/0"  # Allow from all sources for public ZK proof generation

  # ==============================================================================
  # Session Affinity Configuration for ZK Circuits
  # ==============================================================================
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 7200  # Extended timeout for ZK proof generation

  # ==============================================================================
  # Port Configuration
  # ==============================================================================
  ports:
    # ==============================================================================
    # HTTPS ZK Circuits Traffic Port
    # ==============================================================================
    - name: https
      port: 443
      targetPort: 4000
      protocol: TCP
      nodePort: 30443

    # ==============================================================================
    # HTTP ZK Circuits Traffic Port (redirect to HTTPS)
    # ==============================================================================
    - name: http
      port: 80
      targetPort: 4000
      protocol: TCP
      nodePort: 30080

    # ==============================================================================
    # ZK Circuits API Port
    # ==============================================================================
    - name: zk-circuits-api
      port: 4000
      targetPort: 4000
      protocol: TCP
      nodePort: 30400

    # ==============================================================================
    # ZK Proof Generation Port
    # ==============================================================================
    - name: proof-generation
      port: 4001
      targetPort: 4001
      protocol: TCP
      nodePort: 30401

    # ==============================================================================
    # ZK Verification Port
    # ==============================================================================
    - name: proof-verification
      port: 4002
      targetPort: 4002
      protocol: TCP
      nodePort: 30402

    # ==============================================================================
    # GPU Monitoring Port
    # ==============================================================================
    - name: gpu-metrics
      port: 9091
      targetPort: 9091
      protocol: TCP
      nodePort: 30909

    # ==============================================================================
    # ZK Health Check Port
    # ==============================================================================
    - name: zk-health
      port: 4888
      targetPort: 4888
      protocol: TCP
      nodePort: 30489

    # ==============================================================================
    # Computational Status Port
    # ==============================================================================
    - name: computational-status
      port: 4999
      targetPort: 4999
      protocol: TCP
      nodePort: 30499

  # ==============================================================================
  # Service Selector
  # ==============================================================================
  selector:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/component: zk-circuits-service

---
# ==============================================================================
# Veridis ZK Circuits Load Balancer - Internal Service Configuration
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: veridis-zk-circuits-internal-lb
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-internal-load-balancer
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    loadbalancer.veridis.xyz/type: zk-circuits-internal-load-balancer
    loadbalancer.veridis.xyz/category: internal-load-balancer
    loadbalancer.veridis.xyz/role: internal-zk-circuits-load-balancer
    loadbalancer.veridis.xyz/scope: internal-communication

    zk-circuits.veridis.xyz/load-balancer-type: internal-load-balancer
    zk-circuits.veridis.xyz/internal-communication: enabled
    zk-circuits.veridis.xyz/service-mesh: enabled
    zk-circuits.veridis.xyz/secure-communication: enabled

    internal.veridis.xyz/zk-circuits-access: restricted
    internal.veridis.xyz/authentication: required
    internal.veridis.xyz/authorization: rbac
    internal.veridis.xyz/load-balancer-security: maximum

    veridis.xyz/environment: production
    veridis.xyz/team: zk-engineering

  annotations:
    veridis.xyz/description: "Internal ZK Circuits load balancer for Veridis with restricted access and secure computational communication"
    veridis.xyz/purpose: "Provides internal ZK Circuits load balancing for service-to-service communication with authentication and secure computational distribution"

    loadbalancer.veridis.xyz/internal-specification: "Internal ZK Circuits load balancer with restricted access and secure communication"
    zk-circuits.veridis.xyz/internal-specification: "ZK Circuits internal load balancer with authentication and secure computational distribution"

    # Internal Load Balancer configuration
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internal"
    service.beta.kubernetes.io/aws-load-balancer-subnets: "subnet-internal-1,subnet-internal-2,subnet-internal-3"
    service.beta.kubernetes.io/aws-load-balancer-security-groups: "sg-internal-zk-circuits-lb"

    # Internal ZK traffic management
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: |
      stickiness.enabled=true,
      stickiness.type=app_cookie,
      stickiness.app_cookie.cookie_name=VERIDIS_ZK_INTERNAL_SESSION,
      stickiness.app_cookie.duration_seconds=7200,
      deregistration_delay.timeout_seconds=300,
      preserve_client_ip.enabled=true,
      load_balancing.algorithm.type=least_outstanding_requests

    # Internal security annotations
    internal.veridis.xyz/access-control: "restricted"
    internal.veridis.xyz/service-mesh-integration: "enabled"
    internal.veridis.xyz/mutual-tls: "enabled"
    internal.veridis.xyz/rbac-enforcement: "enabled"
    internal.veridis.xyz/computational-encryption: "maximum"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "internal-zk-circuits-load-balancer-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/zk-circuits/internal-load-balancer"

spec:
  type: LoadBalancer

  # Internal load balancer configuration
  loadBalancerSourceRanges:
    - "10.0.0.0/8"
    - "172.16.0.0/12"
    - "192.168.0.0/16"

  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 7200

  ports:
    - name: zk-circuits-internal
      port: 4000
      targetPort: 4000
      protocol: TCP

    - name: proof-internal
      port: 4001
      targetPort: 4001
      protocol: TCP

    - name: verification-internal
      port: 4002
      targetPort: 4002
      protocol: TCP

    - name: gpu-metrics-internal
      port: 9091
      targetPort: 9091
      protocol: TCP

  selector:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/component: zk-circuits-service

---
# ==============================================================================
# Veridis ZK Circuits Load Balancer - High-Performance GPU Configuration
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: veridis-zk-circuits-gpu-lb
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-gpu-load-balancer
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    loadbalancer.veridis.xyz/type: zk-circuits-gpu-load-balancer
    loadbalancer.veridis.xyz/category: gpu-load-balancer
    loadbalancer.veridis.xyz/role: high-performance-gpu-load-balancer
    loadbalancer.veridis.xyz/scope: gpu-optimization

    zk-circuits.veridis.xyz/load-balancer-type: gpu-load-balancer
    zk-circuits.veridis.xyz/gpu-optimization: enabled
    zk-circuits.veridis.xyz/cuda-acceleration: enabled
    zk-circuits.veridis.xyz/computational-optimization: enabled

    gpu.veridis.xyz/optimization: enabled
    gpu.veridis.xyz/monitoring: comprehensive
    gpu.veridis.xyz/load-balancing: advanced
    gpu.veridis.xyz/memory-management: optimized

    veridis.xyz/environment: production
    veridis.xyz/team: zk-engineering

  annotations:
    veridis.xyz/description: "High-performance GPU ZK Circuits load balancer for Veridis with CUDA acceleration and computational optimization"
    veridis.xyz/purpose: "Provides GPU-focused ZK Circuits load balancing for maximum computational performance and GPU efficiency"

    loadbalancer.veridis.xyz/gpu-specification: "GPU optimization load balancer with CUDA acceleration and computational optimization"
    zk-circuits.veridis.xyz/gpu-specification: "ZK Circuits GPU load balancer with optimization and monitoring"

    # GPU-specific Load Balancer configuration
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb-ip"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "600"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "300"

    # High-performance GPU configuration
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: |
      stickiness.enabled=true,
      stickiness.type=source_ip,
      stickiness.source_ip.duration_seconds=14400,
      deregistration_delay.timeout_seconds=300,
      preserve_client_ip.enabled=true,
      load_balancing.algorithm.type=least_outstanding_requests,
      target_group_health.dns_failover.minimum_healthy_targets.count=1,
      target_group_health.dns_failover.minimum_healthy_targets.percentage=33,
      target_group_health.unhealthy_state_routing.minimum_healthy_targets.count=1,
      target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage=25

    # GPU performance monitoring annotations
    gpu-loadbalancer.veridis.xyz/gpu-utilization: "monitored"
    gpu-loadbalancer.veridis.xyz/cuda-optimization: "enabled"
    gpu-loadbalancer.veridis.xyz/memory-optimization: "enabled"
    gpu-loadbalancer.veridis.xyz/computational-pooling: "optimized"
    gpu-loadbalancer.veridis.xyz/proof-batching: "intelligent"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "zk-circuits-gpu-load-balancer-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/zk-circuits/gpu-load-balancer"

spec:
  type: LoadBalancer

  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 14400  # Extended for long-running GPU computations

  ports:
    - name: zk-circuits-gpu
      port: 4000
      targetPort: 4000
      protocol: TCP

    - name: cuda-proof-generation
      port: 4003
      targetPort: 4003
      protocol: TCP

    - name: gpu-batch-processing
      port: 4004
      targetPort: 4004
      protocol: TCP

    - name: gpu-metrics
      port: 9092
      targetPort: 9092
      protocol: TCP

  selector:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/component: zk-circuits-service
    gpu.veridis.xyz/tier: high-performance

---
# ==============================================================================
# Veridis ZK Circuits Load Balancer - Development and Testing Configuration
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: veridis-zk-circuits-dev-lb
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-dev-load-balancer
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    loadbalancer.veridis.xyz/type: zk-circuits-dev-load-balancer
    loadbalancer.veridis.xyz/category: development-load-balancer
    loadbalancer.veridis.xyz/role: testing-load-balancer
    loadbalancer.veridis.xyz/scope: development-testing

    zk-circuits.veridis.xyz/load-balancer-type: development-load-balancer
    zk-circuits.veridis.xyz/testing-enabled: "true"
    zk-circuits.veridis.xyz/debugging-enabled: "true"
    zk-circuits.veridis.xyz/computational-monitoring: "detailed"

    development.veridis.xyz/environment: "production"
    development.veridis.xyz/testing-framework: "enabled"
    development.veridis.xyz/debugging: "enabled"
    development.veridis.xyz/zk-circuits-testing: "enabled"

    veridis.xyz/environment: production
    veridis.xyz/team: zk-engineering

  annotations:
    veridis.xyz/description: "Development and testing ZK Circuits load balancer for Veridis with debugging and computational monitoring"
    veridis.xyz/purpose: "Provides development-friendly ZK Circuits load balancing for testing workflows and computational development simulation"

    loadbalancer.veridis.xyz/dev-specification: "Development ZK Circuits load balancer with testing integration and debugging support"
    zk-circuits.veridis.xyz/dev-specification: "ZK Circuits development load balancer with testing framework and debugging integration"

    # Development Load Balancer configuration
    service.beta.kubernetes.io/aws-load-balancer-type: "clb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "7200"

    # Development annotations
    development.veridis.xyz/flexible-routing: "enabled"
    development.veridis.xyz/testing-support: "enabled"
    development.veridis.xyz/debugging-support: "enabled"
    development.veridis.xyz/zk-circuits-development-workflow: "enabled"
    development.veridis.xyz/computational-debugging: "enabled"

    # Debug configuration
    service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "veridis-zk-dev-lb-logs"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-prefix: "zk-circuits-dev-lb"

    # Development-specific configuration
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: |
      stickiness.enabled=false,
      deregistration_delay.timeout_seconds=30,
      preserve_client_ip.enabled=true,
      load_balancing.algorithm.type=round_robin

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "zk-circuits-development-load-balancer-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/zk-circuits/dev-load-balancer"

spec:
  type: LoadBalancer

  sessionAffinity: None

  ports:
    - name: zk-circuits-dev
      port: 4000
      targetPort: 4000
      protocol: TCP

    - name: debug-port
      port: 4888
      targetPort: 4888
      protocol: TCP

    - name: test-proof-api
      port: 5000
      targetPort: 5000
      protocol: TCP

    - name: computational-debug
      port: 5001
      targetPort: 5001
      protocol: TCP

  selector:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/component: zk-circuits-service
    development.veridis.xyz/environment: development

---
# ==============================================================================
# Veridis ZK Circuits Load Balancer - Regional Multi-Zone Configuration
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: veridis-zk-circuits-regional-lb
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-regional-load-balancer
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    loadbalancer.veridis.xyz/type: zk-circuits-regional-load-balancer
    loadbalancer.veridis.xyz/category: regional-load-balancer
    loadbalancer.veridis.xyz/role: multi-zone-zk-circuits-load-balancer
    loadbalancer.veridis.xyz/scope: regional-deployment

    zk-circuits.veridis.xyz/load-balancer-type: regional-load-balancer
    zk-circuits.veridis.xyz/multi-zone: enabled
    zk-circuits.veridis.xyz/regional-optimization: enabled
    zk-circuits.veridis.xyz/failover-enabled: "true"

    regional.veridis.xyz/deployment: multi-zone
    regional.veridis.xyz/availability: high-availability
    regional.veridis.xyz/disaster-recovery: enabled
    regional.veridis.xyz/cross-zone-balancing: enabled

    veridis.xyz/environment: production
    veridis.xyz/team: zk-engineering

  annotations:
    veridis.xyz/description: "Regional multi-zone ZK Circuits load balancer for Veridis with high availability and computational disaster recovery"
    veridis.xyz/purpose: "Provides regional ZK Circuits load balancing across multiple availability zones with failover and computational disaster recovery"

    loadbalancer.veridis.xyz/regional-specification: "Regional ZK Circuits load balancer with multi-zone deployment and high availability"
    zk-circuits.veridis.xyz/regional-specification: "ZK Circuits regional load balancer with failover and computational disaster recovery"

    # Regional Load Balancer configuration
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-subnets: "subnet-us-west-2a,subnet-us-west-2b,subnet-us-west-2c"
    service.beta.kubernetes.io/aws-load-balancer-availability-zone-affinity: "any"

    # Multi-zone GPU configuration
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: |
      stickiness.enabled=true,
      stickiness.type=source_ip,
      stickiness.source_ip.duration_seconds=3600,
      deregistration_delay.timeout_seconds=600,
      preserve_client_ip.enabled=true,
      load_balancing.cross_zone.enabled=true,
      target_group_health.dns_failover.minimum_healthy_targets.count=1,
      target_group_health.dns_failover.minimum_healthy_targets.percentage=33,
      target_group_health.unhealthy_state_routing.minimum_healthy_targets.count=1,
      target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage=25

    # Regional annotations
    regional.veridis.xyz/multi-zone-deployment: "enabled"
    regional.veridis.xyz/cross-zone-balancing: "enabled"
    regional.veridis.xyz/computational-disaster-recovery: "enabled"
    regional.veridis.xyz/gpu-high-availability: "enabled"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "regional-zk-circuits-load-balancer-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/zk-circuits/regional-load-balancer"

spec:
  type: LoadBalancer

  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600

  ports:
    - name: zk-circuits-regional
      port: 4000
      targetPort: 4000
      protocol: TCP

    - name: regional-proof-generation
      port: 4001
      targetPort: 4001
      protocol: TCP

    - name: failover-health
      port: 4888
      targetPort: 4888
      protocol: TCP

    - name: regional-gpu-metrics
      port: 9091
      targetPort: 9091
      protocol: TCP

  selector:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/component: zk-circuits-service

---
# ==============================================================================
# Veridis ZK Circuits Load Balancer - Computational Batch Processing Configuration
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: veridis-zk-circuits-batch-lb
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-batch-load-balancer
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    loadbalancer.veridis.xyz/type: zk-circuits-batch-load-balancer
    loadbalancer.veridis.xyz/category: batch-load-balancer
    loadbalancer.veridis.xyz/role: computational-batch-load-balancer
    loadbalancer.veridis.xyz/scope: batch-processing

    zk-circuits.veridis.xyz/load-balancer-type: batch-load-balancer
    zk-circuits.veridis.xyz/batch-processing: enabled
    zk-circuits.veridis.xyz/computational-optimization: enabled
    zk-circuits.veridis.xyz/proof-batching: enabled

    batch.veridis.xyz/deployment: computational
    batch.veridis.xyz/optimization: enabled
    batch.veridis.xyz/scheduling: intelligent
    batch.veridis.xyz/throughput-optimization: enabled

    veridis.xyz/environment: production
    veridis.xyz/team: zk-engineering

  annotations:
    veridis.xyz/description: "Computational batch processing ZK Circuits load balancer for Veridis with intelligent proof batching and throughput optimization"
    veridis.xyz/purpose: "Provides batch-focused ZK Circuits load balancing for high-throughput proof generation with computational optimization"

    loadbalancer.veridis.xyz/batch-specification: "Batch processing ZK Circuits load balancer with computational optimization and intelligent scheduling"
    zk-circuits.veridis.xyz/batch-specification: "ZK Circuits batch load balancer with proof batching and throughput optimization"

    # Batch Processing Load Balancer configuration
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "1800"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "900"

    # Batch processing configuration
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: |
      stickiness.enabled=true,
      stickiness.type=app_cookie,
      stickiness.app_cookie.cookie_name=VERIDIS_ZK_BATCH_SESSION,
      stickiness.app_cookie.duration_seconds=21600,
      deregistration_delay.timeout_seconds=900,
      preserve_client_ip.enabled=false,
      load_balancing.algorithm.type=weighted_round_robin,
      target_group_health.dns_failover.minimum_healthy_targets.count=1,
      target_group_health.dns_failover.minimum_healthy_targets.percentage=50,
      target_group_health.unhealthy_state_routing.minimum_healthy_targets.count=1,
      target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage=25

    # Batch processing annotations
    batch.veridis.xyz/batch-processing: "enabled"
    batch.veridis.xyz/proof-batching: "intelligent"
    batch.veridis.xyz/throughput-optimization: "enabled"
    batch.veridis.xyz/computational-scheduling: "optimized"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "zk-circuits-batch-load-balancer-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/zk-circuits/batch-load-balancer"

spec:
  type: LoadBalancer

  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 21600  # Extended for batch processing

  ports:
    - name: batch-processing
      port: 443
      targetPort: 4000
      protocol: TCP

    - name: batch-api
      port: 4000
      targetPort: 4000
      protocol: TCP

    - name: batch-queue
      port: 4005
      targetPort: 4005
      protocol: TCP

    - name: batch-status
      port: 4006
      targetPort: 4006
      protocol: TCP

    - name: batch-metrics
      port: 9093
      targetPort: 9093
      protocol: TCP

  selector:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/component: zk-circuits-service

# ==============================================================================
# Veridis ZK Circuits Load Balancer Summary and Enterprise Computational Architecture
# ==============================================================================
#
# COMPREHENSIVE VERIDIS ZK CIRCUITS LOAD BALANCER STRATEGY:
# =========================================================
#
# VERIDIS ZK CIRCUITS LOAD BALANCER ARCHITECTURE OVERVIEW:
# --------------------------------------------------------
# 1. Primary ZK Circuits Load Balancer (veridis-zk-circuits-load-balancer):
#    - Comprehensive ZK computational traffic distribution with multiple ports and GPU-specific endpoints for production traffic
#    - Advanced AWS NLB configuration with SSL termination, health checking, session affinity, and comprehensive computational management
#    - Multi-port routing with HTTPS, HTTP, ZK circuits API, proof generation, verification, GPU metrics, and health check endpoints
#    - Enterprise security with SSL certificates, security groups, proxy protocol, and comprehensive computational security controls
#    - Performance optimization with connection pooling, cross-zone load balancing, and GPU-aware routing algorithms
#
# 2. Internal Service Load Balancer (veridis-zk-circuits-internal-lb):
#    - Internal ZK computational traffic distribution with private subnet restrictions and secure service-to-service communication
#    - Service mesh integration with mutual TLS, RBAC enforcement, and secure internal computational traffic management
#    - Internal session management with application cookie stickiness and secure computational communication protocols
#    - Conditional deployment with internal ZK circuits load balancer enablement and secure computational distribution
#    - Advanced internal networking with service mesh integration and comprehensive internal computational security controls
#
# 3. High-Performance GPU Load Balancer (veridis-zk-circuits-gpu-lb):
#    - GPU-optimized ZK computational traffic distribution with CUDA acceleration and computational optimization
#    - Advanced algorithms with least outstanding requests and minimum healthy targets for maximum GPU performance
#    - Extended session management with 14400-second timeout for long-running GPU computations and proof generation
#    - Conditional deployment with ZK circuits GPU load balancer enablement and computational optimization
#    - Advanced GPU monitoring with computational utilization tracking and CUDA optimization intelligence
#
# 4. Development Environment Load Balancer (veridis-zk-circuits-dev-lb):
#    - Development-friendly ZK computational traffic distribution with flexible routing and comprehensive debugging
#    - Classic Load Balancer configuration with simplified routing and development-specific computational settings
#    - Testing framework integration with ZK circuits development workflow and computational debugging capabilities
#    - Round-robin algorithm with no session stickiness for development testing and flexible computational distribution
#    - Conditional deployment with ZK circuits development load balancer enablement and computational testing support
#
# 5. Regional Multi-Zone Load Balancer (veridis-zk-circuits-regional-lb):
#    - Regional ZK computational traffic distribution with multi-zone deployment and high availability
#    - Cross-zone load balancing with availability zone affinity and computational disaster recovery capabilities
#    - Regional failover with minimum healthy targets and comprehensive computational disaster recovery protocols
#    - Multi-zone deployment with subnet distribution across us-west-2a, us-west-2b, us-west-2c availability zones
#    - Conditional deployment with regional ZK circuits load balancer enablement and computational high availability management
#
# 6. Computational Batch Processing Load Balancer (veridis-zk-circuits-batch-lb):
#    - Batch processing ZK computational traffic distribution with intelligent proof batching and throughput optimization
#    - Extended timeouts with 1800-second idle timeout and 900-second draining for long-running batch computations
#    - Batch session management with 21600-second timeout and application cookie stickiness for batch consistency
#    - Computational batch optimization with intelligent scheduling and throughput maximization
#    - Conditional deployment with ZK circuits batch load balancer enablement and batch processing optimization
#
# ENTERPRISE ZK CIRCUITS LOAD BALANCER FEATURES:
# ==============================================
# Advanced AWS Load Balancer Configuration and Security:
#   - SSL termination with ACM certificate integration and comprehensive TLS configuration for ZK computational traffic
#   - Network Load Balancer (NLB) with TCP backend protocol and IP target type for high-performance computational distribution
#   - Security group integration with ZK circuits-specific security controls and network-level computational protection
#   - Proxy protocol support with connection preservation and client IP maintenance for ZK applications
#   - Access logging with S3 bucket integration for comprehensive computational audit and ZK performance analysis
#
# Comprehensive ZK Circuits Traffic Management and Health Checking:
#   - Multi-port configuration with HTTPS (443), HTTP (80), ZK circuits API (4000), proof generation (4001), verification (4002), GPU metrics (9091), health (4888), computational status (4999)
#   - Health check configuration with HTTP protocol, /health endpoint, 15-second interval, and 10-second timeout for computational health monitoring
#   - Extended session affinity with ClientIP and configurable timeout (7200-21600 seconds) for ZK computational session consistency
#   - Connection draining with 300-900 second timeout and graceful ZK service rotation for zero-downtime computational deployments
#   - Cross-zone load balancing with availability zone distribution for ZK service high availability and computational resilience
#
# Enterprise ZK Circuits Performance and GPU Optimization:
#   - Target group attributes with stickiness configuration, deregistration delay, and client IP preservation for computational consistency
#   - Load balancing algorithms including weighted round robin, least outstanding requests, and GPU-aware routing for computational optimization
#   - Connection management with idle timeout configuration (300-1800 seconds) and computational connection pooling optimization
#   - GPU session management with source IP stickiness, application cookie stickiness, and configurable duration for computational consistency
#   - Performance monitoring with GPU utilization tracking and ZK computational service performance optimization
#
# Advanced ZK Circuits Security and Compliance Integration:
#   - SSL policy configuration with TLS 1.3 support and modern cipher suites for ZK computational traffic encryption
#   - Security group integration with ZK circuits-specific rules and network-level computational access control
#   - Internal load balancer configuration with private subnet restrictions and secure internal computational communication
#   - Access control with source IP ranges and ZK computational service authentication integration
#   - Compliance logging with comprehensive audit trails and ZK computational traffic security monitoring
#
# OPERATIONAL EXCELLENCE:
# ======================
# ZK Circuits Load Balancer Lifecycle Management:
#   - Multi-load balancer architecture with primary, internal, GPU, development, regional, and batch processing configurations
#   - Intelligent ZK computational traffic management with predictive analytics and GPU utilization correlation
#   - Advanced monitoring with comprehensive ZK circuits load balancer analytics and computational business intelligence
#   - Configuration validation with ZK circuits load balancer schema enforcement and computational deployment safety checks
#   - Automated optimization with ZK computational traffic pattern analysis and load balancer routing recommendation engine
#
# Security Integration and Compliance:
#   - SOC 2 Type II ZK circuits load balancer controls with comprehensive audit requirements and computational traffic logging
#   - GDPR ZK circuits load balancer compliance with data protection and privacy-preserving computational traffic management
#   - ISO 27001 ZK circuits load balancer security management with information security and computational compliance integration
#   - NIST 800-190 container ZK circuits load balancer security with computational validation and compliance
#   - Zero-trust ZK circuits load balancer architecture with comprehensive encryption and computational authentication requirements
#
# Business Intelligence Integration:
#   - ZK computational traffic analytics with load balancer cost correlation and computational resource utilization optimization
#   - Performance analytics with ZK computational user experience optimization and traffic business intelligence
#   - Routing intelligence with ZK computational traffic pattern monitoring and load balancer optimization recommendations
#   - Strategic planning with ZK computational capacity management and traffic forecasting
#   - Business impact assessment with ZK computational traffic performance correlation and load balancer availability tracking
#
# Developer Experience Excellence:
#   - Development ZK circuits load balancer with flexible routing and computational debugging workflow integration
#   - Comprehensive documentation with ZK circuits load balancer guides and computational troubleshooting procedures
#   - Environment-specific ZK circuits load balancer with production, internal, GPU, development, regional, and batch processing support
#   - Testing integration with ZK circuits development workflow and computational debugging capabilities
#   - ZK circuits load balancer monitoring with comprehensive tracking and computational correlation
#
# ==============================================================================
