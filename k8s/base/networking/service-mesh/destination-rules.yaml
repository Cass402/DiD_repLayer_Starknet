# ==============================================================================
# Veridis Decentralized Identity Protocol - Service Mesh Destination Rules Configuration
# ==============================================================================
#
# This manifest defines comprehensive Service Mesh Destination Rules for the
# decentralized identity protocol, providing:
#
# ENTERPRISE VERIDIS SERVICE MESH DESTINATION RULES ARCHITECTURE:
#   • Advanced Service mesh destination rules with intelligent traffic policies and destination-based service mesh routing
#   • Multi-tier destination rules architecture with development, testing, staging, and production environments
#   • Comprehensive networking framework with service mesh policies, traffic optimization, destination rule integration
#   • Advanced lifecycle management with automated destination rule optimization, service mesh policy control, and traffic enhancement
#   • Enterprise-grade intelligence with comprehensive analytics and service mesh destination rule performance insights
#
# VERIDIS SERVICE MESH DESTINATION RULES OPTIMIZATION:
#   • High-performance service mesh policies with intelligent load balancing and destination rule optimization
#   • Intelligent service mesh traffic management with responsive policies and performance-based destination decisions
#   • Advanced connection management with business intelligence and connection pool-based destination rule control
#   • Comprehensive networking control with intelligent service mesh destination rule management and traffic enhancement
#   • Enterprise acceleration with predictive service mesh destination rule management and traffic optimization
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II service mesh destination rule controls with comprehensive audit and traffic requirements
#   • GDPR service mesh destination rule compliance with data protection, privacy controls, and traffic management
#   • ISO 27001 service mesh destination rule management with comprehensive framework integration
#   • NIST 800-190 container service mesh destination rule security with traffic-specific validation and compliance
#   • Zero-knowledge protocol compliance with regulatory frameworks and service mesh destination rule best practices
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent service mesh destination rule lifecycle management with automated provisioning and traffic optimization
#   • Predictive traffic analytics with capacity planning and service mesh destination rule intelligence
#   • Advanced monitoring integration with service mesh destination rule analytics and traffic business intelligence
#   • Comprehensive networking control with service mesh destination rule preservation and traffic optimization
#   • Business continuity service mesh destination rule with traffic guarantees and service mesh optimization
#
# DESTINATION RULE ACCELERATION INTELLIGENCE:
#   • Service mesh destination rule usage analytics with traffic patterns and optimization recommendations
#   • Traffic monitoring with service mesh destination rule latency and policy optimization intelligence
#   • Development efficiency with service mesh destination rule analytics and deployment optimization procedures
#   • Cost optimization with service mesh destination rule utilization analysis and traffic capacity planning procedures
#   • Quality assurance with service mesh destination rule metrics and traffic validation procedures
#
# ==============================================================================

# ==============================================================================
# Veridis Backend Destination Rule - Primary Production Configuration
# ==============================================================================
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: veridis-backend-destination-rule
  namespace: veridis-infrastructure

  # Core Veridis Backend Destination Rule identification labels
  labels:
    app.kubernetes.io/name: veridis-backend
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: backend-destination-rule
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Destination Rule specific classification
    destinationrule.veridis.xyz/type: backend-destination-rule
    destinationrule.veridis.xyz/category: production-destination-rule
    destinationrule.veridis.xyz/role: primary-backend-destination-rule
    destinationrule.veridis.xyz/performance-class: high-performance-backend-destination-rule
    destinationrule.veridis.xyz/security-level: enterprise

    # Backend Destination Rule classification
    backend.veridis.xyz/destination-rule-type: intelligent-destination-rule
    backend.veridis.xyz/service-type: backend-service
    backend.veridis.xyz/performance-tier: high-performance
    backend.veridis.xyz/optimization: enabled
    backend.veridis.xyz/features: full-backend-stack

    # Service Mesh Destination Rule classification
    servicemesh.veridis.xyz/tier: production
    servicemesh.veridis.xyz/optimization: intelligent-backend-policies
    servicemesh.veridis.xyz/load-balancing: advanced
    servicemesh.veridis.xyz/connection-pooling: optimized
    servicemesh.veridis.xyz/efficiency: maximum

    # Business Destination Rule classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/impact: high-backend-performance
    business.veridis.xyz/cost-tier: production
    business.veridis.xyz/sla-tier: enterprise
    business.veridis.xyz/availability-requirement: 99.9

    # Operational Destination Rule labels
    veridis.xyz/environment: production
    veridis.xyz/team: backend-engineering
    veridis.xyz/cost-center: backend-infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "backend-destination-rule-control-framework"
    compliance.veridis.xyz/gdpr: "backend-destination-rule-data-protection"
    compliance.veridis.xyz/iso27001: "backend-destination-rule-security-management"
    compliance.veridis.xyz/nist-800-190: "backend-destination-rule-container-security"
    governance.veridis.xyz/policy-enforcement: "enterprise"

    # Backend Destination Rule monitoring and analytics
    monitoring.veridis.xyz/backend-destination-rule-monitoring: "enabled"
    monitoring.veridis.xyz/performance-monitoring: "comprehensive"
    monitoring.veridis.xyz/traffic-monitoring: "enabled"
    monitoring.veridis.xyz/business-monitoring: "enabled"
    monitoring.veridis.xyz/compliance-monitoring: "enabled"

    # Connection pooling labels
    connectionpool.veridis.xyz/tcp-enabled: "true"
    connectionpool.veridis.xyz/http-enabled: "true"
    connectionpool.veridis.xyz/optimization: "maximum"
    connectionpool.veridis.xyz/keepalive: "enabled"
    connectionpool.veridis.xyz/circuit-breaker: "enabled"

  annotations:
    # Destination Rule purpose and specifications
    veridis.xyz/description: "Enterprise Veridis Backend Destination Rule with intelligent connection pooling, advanced load balancing, and comprehensive backend service policies"
    veridis.xyz/purpose: "Provides comprehensive backend destination rule for decentralized identity management with intelligent traffic policies, backend optimization, and networking guarantees"
    veridis.xyz/scope: "Backend destination rule including connection pooling, load balancing, circuit breaking, and comprehensive backend intelligence"

    # Destination Rule architecture and design
    destinationrule.veridis.xyz/architecture: "Enterprise backend destination rule with intelligent connection pooling, advanced load balancing, and circuit breaker optimization"
    destinationrule.veridis.xyz/design-pattern: "Multi-tier backend destination rule with traffic optimization, cost efficiency, and business intelligence"
    destinationrule.veridis.xyz/optimization-model: "Intelligent backend destination rule with predictive analytics, traffic optimization, and connection efficiency"
    destinationrule.veridis.xyz/performance-model: "High-performance backend destination rule with traffic optimization and intelligent connection management"

    # Backend Destination Rule specifications
    backend.veridis.xyz/destination-rule-specification: "Backend destination rule with traffic optimization and intelligent backend service management"
    backend.veridis.xyz/policy-specification: "Advanced backend policy configuration with traffic optimization and connection enhancement"
    backend.veridis.xyz/traffic-specification: "Backend traffic management optimization with intelligent policies and enhancement"
    backend.veridis.xyz/performance-specification: "Backend performance policies with traffic acceleration and connection efficiency"
    backend.veridis.xyz/business-specification: "Backend business destination rule with cost optimization and strategic traffic intelligence"

    # Service Mesh Destination Rule specifications
    servicemesh.veridis.xyz/destination-rule-specification: "Service mesh-aware backend destination rule with connection optimization and traffic intelligence"
    servicemesh.veridis.xyz/policy-specification: "Service mesh policy management optimization with intelligent backend and connection enhancement"
    servicemesh.veridis.xyz/mesh-specification: "Service mesh integration with cost optimization and intelligent backend management"
    servicemesh.veridis.xyz/connection-specification: "Service mesh connection pooling with auto-optimization and backend management"
    servicemesh.veridis.xyz/monitoring-specification: "Service mesh monitoring with backend destination rule analytics and connection intelligence"

    # Business Destination Rule specifications
    business.veridis.xyz/sla-specification: "SLA-compliant backend destination rule with business continuity and traffic guarantees"
    business.veridis.xyz/intelligence-specification: "Business intelligence with operational analytics and strategic insights"
    business.veridis.xyz/cost-specification: "Cost-optimized backend destination rule with efficiency analysis and budget management"
    business.veridis.xyz/efficiency-specification: "Business efficiency with backend destination rule optimization and traffic intelligence"

    # Operational Destination Rule specifications
    operations.veridis.xyz/automation-specification: "Full automation with intelligent management and developer-friendly interfaces"
    operations.veridis.xyz/monitoring-specification: "Comprehensive monitoring with backend destination rule analytics and traffic intelligence"
    operations.veridis.xyz/management-specification: "Automated management with backend destination rule preservation and optimization procedures"
    operations.veridis.xyz/scaling-specification: "Intelligent scaling with backend destination rule management and traffic optimization"

    # Backend Destination Rule lifecycle specifications
    lifecycle.veridis.xyz/backend-destination-rule-specification: "Dynamic backend destination rule with automated traffic management and connection optimization"
    lifecycle.veridis.xyz/scaling-specification: "Intelligent backend destination rule scaling with machine learning and traffic forecasting"
    lifecycle.veridis.xyz/optimization-specification: "Backend destination rule optimization with intelligent traffic management and connection enhancement"
    lifecycle.veridis.xyz/evolution-specification: "Backend destination rule evolution with intelligent adaptation and traffic optimization"

    # Istio Destination Rule annotations
    istio.veridis.xyz/destination-rule-type: "backend-service"
    istio.veridis.xyz/load-balancer-policy: "least-request"
    istio.veridis.xyz/connection-pooling: "optimized"
    istio.veridis.xyz/circuit-breaker: "enabled"
    istio.veridis.xyz/outlier-detection: "enabled"

    # Traffic policy annotations
    trafficpolicy.veridis.xyz/load-balancer: "least-request"
    trafficpolicy.veridis.xyz/connection-pool-size: "100"
    trafficpolicy.veridis.xyz/max-requests-per-connection: "10"
    trafficpolicy.veridis.xyz/circuit-breaker-threshold: "50"
    trafficpolicy.veridis.xyz/outlier-detection-threshold: "5"

    # Performance optimization annotations
    performance.veridis.xyz/connection-optimization: "enabled"
    performance.veridis.xyz/keep-alive: "enabled"
    performance.veridis.xyz/tcp-no-delay: "enabled"
    performance.veridis.xyz/http2-max-requests: "1000"
    performance.veridis.xyz/connection-timeout: "30s"

    # Monitoring and observability annotations
    monitoring.veridis.xyz/prometheus-scrape: "true"
    monitoring.veridis.xyz/jaeger-tracing: "enabled"
    monitoring.veridis.xyz/kiali-visualization: "enabled"
    monitoring.veridis.xyz/grafana-dashboard: "backend-destination-rule"
    monitoring.veridis.xyz/alerting-enabled: "true"

    # Documentation and procedures
    veridis.xyz/owner: "backend-team@veridis.xyz"
    veridis.xyz/destination-rule-admin: "backend-admin@veridis.xyz"
    veridis.xyz/escalation: "backend-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "backend-oncall@veridis.xyz"

    # Documentation references
    veridis.xyz/documentation: "https://docs.veridis.xyz/backend/destination-rule"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/backend/destination-rule-management"
    veridis.xyz/destination-rule-docs: "https://backend.veridis.xyz/destination-rule-guide"
    veridis.xyz/service-mesh-docs: "https://servicemesh.veridis.xyz/backend-destination-rule"

spec:
  # ==============================================================================
  # Host Configuration
  # ==============================================================================
  host: veridis-backend.veridis-infrastructure.svc.cluster.local

  # ==============================================================================
  # Traffic Policy Configuration
  # ==============================================================================
  trafficPolicy:
    # ==============================================================================
    # Load Balancer Configuration
    # ==============================================================================
    loadBalancer:
      simple: LEAST_REQUEST
      consistentHash:
        httpHeaderName: "x-user-id"
        minimumRingSize: 1024
        httpCookie:
          name: "veridis-session"
          ttl: 3600s

    # ==============================================================================
    # Connection Pool Configuration
    # ==============================================================================
    connectionPool:
      # TCP Connection Pool Settings
      tcp:
        maxConnections: 100
        connectTimeout: 30s
        tcpKeepalive:
          time: 7200s
          interval: 60s
          probes: 3
        keepAlive:
          time: 7200s
          timeout: 60s
          interval: 60s

      # HTTP Connection Pool Settings
      http:
        http1MaxPendingRequests: 64
        http2MaxRequests: 1000
        maxRequestsPerConnection: 10
        maxRetries: 3
        idleTimeout: 300s
        h2UpgradePolicy: UPGRADE

    # ==============================================================================
    # Circuit Breaker Configuration
    # ==============================================================================
    outlierDetection:
      consecutiveGatewayErrors: 5
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
      minHealthPercent: 30
      splitExternalLocalOriginErrors: true

    # ==============================================================================
    # Port-Specific Traffic Policies
    # ==============================================================================
    portLevelSettings:
      # Main API Port Configuration
      - port:
          number: 8080
        loadBalancer:
          simple: LEAST_REQUEST
        connectionPool:
          tcp:
            maxConnections: 100
            connectTimeout: 30s
          http:
            http2MaxRequests: 1000
            maxRequestsPerConnection: 10
            idleTimeout: 300s

      # WebSocket Port Configuration
      - port:
          number: 8081
        loadBalancer:
          simple: PASSTHROUGH
        connectionPool:
          tcp:
            maxConnections: 200
            connectTimeout: 10s
            tcpKeepalive:
              time: 3600s
              interval: 30s
              probes: 3
          http:
            http1MaxPendingRequests: 128
            idleTimeout: 3600s

      # Metrics Port Configuration
      - port:
          number: 9090
        loadBalancer:
          simple: ROUND_ROBIN
        connectionPool:
          tcp:
            maxConnections: 20
            connectTimeout: 10s
          http:
            http1MaxPendingRequests: 10
            maxRequestsPerConnection: 1
            idleTimeout: 60s

      # Health Check Port Configuration
      - port:
          number: 8888
        loadBalancer:
          simple: ROUND_ROBIN
        connectionPool:
          tcp:
            maxConnections: 10
            connectTimeout: 5s
          http:
            http1MaxPendingRequests: 5
            maxRequestsPerConnection: 1
            idleTimeout: 30s

  # ==============================================================================
  # Subset Configuration for Canary Deployment
  # ==============================================================================
  subsets:
    # ==============================================================================
    # Production Stable Version Subset
    # ==============================================================================
    - name: v3-2-1
      labels:
        version: v3.2.1
        deployment: stable
      trafficPolicy:
        loadBalancer:
          simple: LEAST_REQUEST
        connectionPool:
          tcp:
            maxConnections: 100
            connectTimeout: 30s
          http:
            http2MaxRequests: 1000
            maxRequestsPerConnection: 10
        outlierDetection:
          consecutiveGatewayErrors: 5
          consecutive5xxErrors: 5
          interval: 30s
          baseEjectionTime: 30s

    # ==============================================================================
    # Canary Version Subset
    # ==============================================================================
    - name: canary
      labels:
        version: canary
        deployment: canary
      trafficPolicy:
        loadBalancer:
          simple: LEAST_REQUEST
        connectionPool:
          tcp:
            maxConnections: 50
            connectTimeout: 30s
          http:
            http2MaxRequests: 500
            maxRequestsPerConnection: 5
        outlierDetection:
          consecutiveGatewayErrors: 3
          consecutive5xxErrors: 3
          interval: 15s
          baseEjectionTime: 15s
          maxEjectionPercent: 100

    # ==============================================================================
    # Health Check Subset
    # ==============================================================================
    - name: health
      labels:
        component: health-check
      trafficPolicy:
        loadBalancer:
          simple: ROUND_ROBIN
        connectionPool:
          tcp:
            maxConnections: 10
            connectTimeout: 5s
          http:
            http1MaxPendingRequests: 5
            maxRequestsPerConnection: 1
            idleTimeout: 30s

    # ==============================================================================
    # Metrics Subset
    # ==============================================================================
    - name: metrics
      labels:
        component: metrics
      trafficPolicy:
        loadBalancer:
          simple: ROUND_ROBIN
        connectionPool:
          tcp:
            maxConnections: 20
            connectTimeout: 10s
          http:
            http1MaxPendingRequests: 10
            maxRequestsPerConnection: 1
            idleTimeout: 60s

    # ==============================================================================
    # WebSocket Subset
    # ==============================================================================
    - name: websocket
      labels:
        component: websocket
      trafficPolicy:
        loadBalancer:
          simple: PASSTHROUGH
        connectionPool:
          tcp:
            maxConnections: 200
            connectTimeout: 10s
            tcpKeepalive:
              time: 3600s
              interval: 30s
              probes: 3
          http:
            http1MaxPendingRequests: 128
            idleTimeout: 3600s

    # ==============================================================================
    # Internal Communication Subset
    # ==============================================================================
    - name: internal
      labels:
        component: internal
        communication: internal
      trafficPolicy:
        loadBalancer:
          simple: LEAST_REQUEST
        connectionPool:
          tcp:
            maxConnections: 50
            connectTimeout: 10s
          http:
            http2MaxRequests: 500
            maxRequestsPerConnection: 20
            idleTimeout: 600s

---
# ==============================================================================
# Veridis ZK Circuits Destination Rule - GPU-Optimized Configuration
# ==============================================================================
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: veridis-zk-circuits-destination-rule
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-destination-rule
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    destinationrule.veridis.xyz/type: zk-circuits-destination-rule
    destinationrule.veridis.xyz/category: production-destination-rule
    destinationrule.veridis.xyz/role: zk-circuits-destination-rule
    destinationrule.veridis.xyz/performance-class: gpu-optimized-destination-rule

    zkCircuits.veridis.xyz/destination-rule-type: gpu-accelerated-destination-rule
    zkCircuits.veridis.xyz/performance-tier: high-performance
    zkCircuits.veridis.xyz/gpu-enabled: "true"
    zkCircuits.veridis.xyz/optimization: enabled

    servicemesh.veridis.xyz/tier: production
    servicemesh.veridis.xyz/optimization: intelligent-zk-policies
    servicemesh.veridis.xyz/load-balancing: resource-aware
    servicemesh.veridis.xyz/connection-pooling: optimized

    veridis.xyz/environment: production
    veridis.xyz/team: zk-engineering

  annotations:
    veridis.xyz/description: "Enterprise Veridis ZK Circuits Destination Rule with GPU-optimized connection pooling and extended timeout policies"
    veridis.xyz/purpose: "Provides comprehensive ZK circuits destination rule for zero-knowledge proof generation with GPU optimization and intelligent traffic policies"

    destinationrule.veridis.xyz/architecture: "Enterprise ZK circuits destination rule with GPU acceleration, proof generation optimization, and intelligent connection management"
    zkCircuits.veridis.xyz/destination-rule-specification: "ZK circuits destination rule with GPU optimization and intelligent proof generation management"

    # ZK-specific annotations
    zkCircuits.veridis.xyz/proof-generation: "gpu-accelerated"
    zkCircuits.veridis.xyz/circuit-optimization: "enabled"
    zkCircuits.veridis.xyz/batch-processing: "enabled"
    zkCircuits.veridis.xyz/extended-timeouts: "enabled"

    # GPU annotations
    gpu.veridis.xyz/acceleration: "enabled"
    gpu.veridis.xyz/memory-optimization: "enabled"
    gpu.veridis.xyz/cuda-support: "enabled"
    gpu.veridis.xyz/connection-affinity: "enabled"

    # Performance optimization annotations
    performance.veridis.xyz/extended-timeout: "enabled"
    performance.veridis.xyz/resource-aware-balancing: "enabled"
    performance.veridis.xyz/gpu-affinity: "enabled"
    performance.veridis.xyz/batch-optimization: "enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/zk-circuits/destination-rule"

spec:
  host: veridis-zk-circuits.veridis-infrastructure.svc.cluster.local

  trafficPolicy:
    # Resource-aware load balancing for GPU optimization
    loadBalancer:
      simple: LEAST_REQUEST
      localityLbSetting:
        enabled: true
        distribute:
          - from: "region1/zone1/*"
            to:
              "region1/zone1/*": 80
              "region1/zone2/*": 20
        failover:
          - from: region1
            to: region2

    # Extended connection pool for ZK operations
    connectionPool:
      tcp:
        maxConnections: 50  # Lower due to resource-intensive operations
        connectTimeout: 60s  # Extended for GPU initialization
        tcpKeepalive:
          time: 7200s
          interval: 60s
          probes: 3
        keepAlive:
          time: 7200s
          timeout: 300s
          interval: 60s

      http:
        http1MaxPendingRequests: 32
        http2MaxRequests: 100
        maxRequestsPerConnection: 5  # Lower for resource management
        maxRetries: 2  # Limited retries for expensive operations
        idleTimeout: 1800s  # Extended for long-running operations
        h2UpgradePolicy: DO_NOT_UPGRADE  # HTTP/1.1 for stability

    # Conservative outlier detection for GPU resources
    outlierDetection:
      consecutiveGatewayErrors: 3
      consecutive5xxErrors: 3
      interval: 60s  # Extended interval
      baseEjectionTime: 300s  # Extended ejection time
      maxEjectionPercent: 25  # Conservative ejection
      minHealthPercent: 50
      splitExternalLocalOriginErrors: true

    # Port-specific policies for ZK operations
    portLevelSettings:
      # Main ZK Circuits API Port
      - port:
          number: 4000
        loadBalancer:
          simple: LEAST_REQUEST
        connectionPool:
          tcp:
            maxConnections: 50
            connectTimeout: 60s
          http:
            http1MaxPendingRequests: 32
            maxRequestsPerConnection: 5
            idleTimeout: 1800s

  subsets:
    # ==============================================================================
    # GPU-Enabled Subset
    # ==============================================================================
    - name: gpu-enabled
      labels:
        gpu: enabled
        cuda: enabled
      trafficPolicy:
        loadBalancer:
          simple: LEAST_REQUEST
        connectionPool:
          tcp:
            maxConnections: 50
            connectTimeout: 60s
          http:
            http1MaxPendingRequests: 32
            maxRequestsPerConnection: 5
            idleTimeout: 1800s
        outlierDetection:
          consecutiveGatewayErrors: 3
          consecutive5xxErrors: 3
          interval: 60s
          baseEjectionTime: 300s

    # ==============================================================================
    # Canary Subset for ZK Circuits
    # ==============================================================================
    - name: canary
      labels:
        version: canary
        deployment: canary
        gpu: enabled
      trafficPolicy:
        loadBalancer:
          simple: LEAST_REQUEST
        connectionPool:
          tcp:
            maxConnections: 25
            connectTimeout: 60s
          http:
            http1MaxPendingRequests: 16
            maxRequestsPerConnection: 3
            idleTimeout: 1800s
        outlierDetection:
          consecutiveGatewayErrors: 2
          consecutive5xxErrors: 2
          interval: 30s
          baseEjectionTime: 180s
          maxEjectionPercent: 50

    # ==============================================================================
    # Health Check Subset
    # ==============================================================================
    - name: health
      labels:
        component: health-check
      trafficPolicy:
        loadBalancer:
          simple: ROUND_ROBIN
        connectionPool:
          tcp:
            maxConnections: 10
            connectTimeout: 10s
          http:
            http1MaxPendingRequests: 5
            maxRequestsPerConnection: 1
            idleTimeout: 60s

    # ==============================================================================
    # Internal Communication Subset
    # ==============================================================================
    - name: internal
      labels:
        component: internal
        communication: internal
      trafficPolicy:
        loadBalancer:
          simple: LEAST_REQUEST
        connectionPool:
          tcp:
            maxConnections: 30
            connectTimeout: 30s
          http:
            http1MaxPendingRequests: 20
            maxRequestsPerConnection: 10
            idleTimeout: 900s

---
# ==============================================================================
# Veridis UI Destination Rule - Frontend Optimization Configuration
# ==============================================================================
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: veridis-ui-destination-rule
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-ui
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: ui-destination-rule
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    destinationrule.veridis.xyz/type: ui-destination-rule
    destinationrule.veridis.xyz/category: frontend-destination-rule
    destinationrule.veridis.xyz/role: ui-destination-rule
    destinationrule.veridis.xyz/performance-class: frontend-optimized-destination-rule

    frontend.veridis.xyz/destination-rule-type: spa-optimized-destination-rule
    frontend.veridis.xyz/framework: react
    frontend.veridis.xyz/optimization: enabled
    frontend.veridis.xyz/caching: aggressive

    servicemesh.veridis.xyz/tier: production
    servicemesh.veridis.xyz/optimization: intelligent-ui-policies
    servicemesh.veridis.xyz/load-balancing: round-robin
    servicemesh.veridis.xyz/connection-pooling: lightweight

    veridis.xyz/environment: production
    veridis.xyz/team: frontend-engineering

  annotations:
    veridis.xyz/description: "Enterprise Veridis UI Destination Rule with frontend-optimized connection pooling and static asset delivery policies"
    veridis.xyz/purpose: "Provides comprehensive UI destination rule for frontend application with SPA optimization and intelligent traffic policies"

    destinationrule.veridis.xyz/architecture: "Enterprise UI destination rule with SPA routing, static asset optimization, and intelligent frontend management"
    frontend.veridis.xyz/destination-rule-specification: "UI destination rule with SPA optimization and intelligent frontend management"

    # Frontend-specific annotations
    frontend.veridis.xyz/spa-routing: "enabled"
    frontend.veridis.xyz/static-assets: "optimized"
    frontend.veridis.xyz/compression: "enabled"
    frontend.veridis.xyz/cdn-integration: "enabled"

    # Caching annotations
    caching.veridis.xyz/static-assets: "aggressive"
    caching.veridis.xyz/dynamic-content: "conditional"
    caching.veridis.xyz/compression: "gzip-brotli"

    veridis.xyz/documentation: "https://docs.veridis.xyz/ui/destination-rule"

spec:
  host: veridis-ui.veridis-infrastructure.svc.cluster.local

  trafficPolicy:
    # Round-robin for frontend load distribution
    loadBalancer:
      simple: ROUND_ROBIN

    # Lightweight connection pool for frontend
    connectionPool:
      tcp:
        maxConnections: 200  # Higher for concurrent users
        connectTimeout: 10s  # Fast frontend connections
        tcpKeepalive:
          time: 600s
          interval: 30s
          probes: 3

      http:
        http1MaxPendingRequests: 100
        http2MaxRequests: 1000
        maxRequestsPerConnection: 100  # Higher for static assets
        maxRetries: 3
        idleTimeout: 60s  # Shorter for frontend
        h2UpgradePolicy: UPGRADE

    # Relaxed outlier detection for frontend
    outlierDetection:
      consecutiveGatewayErrors: 10
      consecutive5xxErrors: 10
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 20
      minHealthPercent: 70

  subsets:
    # ==============================================================================
    # Static Assets Subset
    # ==============================================================================
    - name: static
      labels:
        component: static-assets
      trafficPolicy:
        loadBalancer:
          simple: ROUND_ROBIN
        connectionPool:
          tcp:
            maxConnections: 300
            connectTimeout: 5s
          http:
            http2MaxRequests: 2000
            maxRequestsPerConnection: 200
            idleTimeout: 300s

    # ==============================================================================
    # SPA Subset
    # ==============================================================================
    - name: spa
      labels:
        component: spa
      trafficPolicy:
        loadBalancer:
          simple: ROUND_ROBIN
        connectionPool:
          tcp:
            maxConnections: 200
            connectTimeout: 10s
          http:
            http2MaxRequests: 1000
            maxRequestsPerConnection: 50
            idleTimeout: 60s

    # ==============================================================================
    # Health Check Subset
    # ==============================================================================
    - name: health
      labels:
        component: health-check
      trafficPolicy:
        loadBalancer:
          simple: ROUND_ROBIN
        connectionPool:
          tcp:
            maxConnections: 10
            connectTimeout: 5s
          http:
            http1MaxPendingRequests: 5
            maxRequestsPerConnection: 1
            idleTimeout: 30s

---
# ==============================================================================
# Veridis Infrastructure Services Destination Rule - Database and Cache Configuration
# ==============================================================================
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: veridis-infrastructure-destination-rule
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-infrastructure
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: infrastructure-destination-rule
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    destinationrule.veridis.xyz/type: infrastructure-destination-rule
    destinationrule.veridis.xyz/category: infrastructure-destination-rule
    destinationrule.veridis.xyz/role: database-cache-destination-rule
    destinationrule.veridis.xyz/scope: infrastructure-services

    infrastructure.veridis.xyz/destination-rule-type: database-cache-destination-rule
    infrastructure.veridis.xyz/services: database-cache-vault
    infrastructure.veridis.xyz/optimization: enabled
    infrastructure.veridis.xyz/persistence: enabled

    servicemesh.veridis.xyz/tier: production
    servicemesh.veridis.xyz/optimization: infrastructure-policies
    servicemesh.veridis.xyz/load-balancing: consistent-hash
    servicemesh.veridis.xyz/connection-pooling: persistent

    veridis.xyz/environment: production
    veridis.xyz/team: infrastructure-engineering

  annotations:
    veridis.xyz/description: "Enterprise Veridis Infrastructure Destination Rule with database, cache, and vault connection optimization"
    veridis.xyz/purpose: "Provides comprehensive infrastructure destination rule for database, cache, and vault services with persistent connections"

    destinationrule.veridis.xyz/infrastructure-specification: "Infrastructure destination rule with database and cache optimization"
    infrastructure.veridis.xyz/destination-rule-specification: "Database and cache destination rule with persistent connections"

    # Infrastructure-specific annotations
    infrastructure.veridis.xyz/database-optimization: "enabled"
    infrastructure.veridis.xyz/cache-optimization: "enabled"
    infrastructure.veridis.xyz/vault-optimization: "enabled"
    infrastructure.veridis.xyz/persistent-connections: "enabled"

    # Database annotations
    database.veridis.xyz/connection-pooling: "enabled"
    database.veridis.xyz/persistent-connections: "enabled"
    database.veridis.xyz/transaction-optimization: "enabled"

    # Cache annotations
    cache.veridis.xyz/connection-pooling: "enabled"
    cache.veridis.xyz/pipeline-optimization: "enabled"
    cache.veridis.xyz/persistent-connections: "enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/destination-rule"

spec:
  # This is a multi-host destination rule for infrastructure services
  exportTo:
    - "."
    - "istio-system"

---
# ==============================================================================
# PostgreSQL Database Destination Rule - Database Optimization Configuration
# ==============================================================================
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: postgres-destination-rule
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/component: postgres-destination-rule
    app.kubernetes.io/part-of: veridis-protocol

    destinationrule.veridis.xyz/type: database-destination-rule
    database.veridis.xyz/type: postgresql
    database.veridis.xyz/optimization: enabled

    veridis.xyz/environment: production
    veridis.xyz/team: infrastructure-engineering

  annotations:
    veridis.xyz/description: "PostgreSQL database destination rule with connection pooling and transaction optimization"
    database.veridis.xyz/connection-optimization: "enabled"
    database.veridis.xyz/transaction-pooling: "enabled"

spec:
  host: postgres.veridis-infrastructure.svc.cluster.local

  trafficPolicy:
    loadBalancer:
      consistentHash:
        httpHeaderName: "x-database-shard"
        minimumRingSize: 1024

    connectionPool:
      tcp:
        maxConnections: 100
        connectTimeout: 30s
        tcpKeepalive:
          time: 7200s
          interval: 60s
          probes: 3
        keepAlive:
          time: 7200s
          timeout: 300s
          interval: 60s

    # Conservative outlier detection for database
    outlierDetection:
      consecutiveGatewayErrors: 3
      consecutive5xxErrors: 3
      interval: 60s
      baseEjectionTime: 300s
      maxEjectionPercent: 25
      minHealthPercent: 50

  subsets:
    - name: primary
      labels:
        role: primary
      trafficPolicy:
        connectionPool:
          tcp:
            maxConnections: 100
            connectTimeout: 30s

    - name: replica
      labels:
        role: replica
      trafficPolicy:
        connectionPool:
          tcp:
            maxConnections: 50
            connectTimeout: 30s

    - name: internal
      labels:
        component: internal
      trafficPolicy:
        connectionPool:
          tcp:
            maxConnections: 50
            connectTimeout: 15s

---
# ==============================================================================
# Redis Cache Destination Rule - Cache Optimization Configuration
# ==============================================================================
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: redis-destination-rule
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/component: redis-destination-rule
    app.kubernetes.io/part-of: veridis-protocol

    destinationrule.veridis.xyz/type: cache-destination-rule
    cache.veridis.xyz/type: redis
    cache.veridis.xyz/optimization: enabled

    veridis.xyz/environment: production
    veridis.xyz/team: infrastructure-engineering

  annotations:
    veridis.xyz/description: "Redis cache destination rule with connection pooling and pipeline optimization"
    cache.veridis.xyz/connection-optimization: "enabled"
    cache.veridis.xyz/pipeline-optimization: "enabled"

spec:
  host: redis.veridis-infrastructure.svc.cluster.local

  trafficPolicy:
    loadBalancer:
      consistentHash:
        httpHeaderName: "x-cache-key"
        minimumRingSize: 512

    connectionPool:
      tcp:
        maxConnections: 200
        connectTimeout: 10s
        tcpKeepalive:
          time: 3600s
          interval: 30s
          probes: 3
        keepAlive:
          time: 3600s
          timeout: 60s
          interval: 30s

    # Relaxed outlier detection for cache
    outlierDetection:
      consecutiveGatewayErrors: 5
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 60s
      maxEjectionPercent: 30
      minHealthPercent: 60

  subsets:
    - name: primary
      labels:
        role: primary
      trafficPolicy:
        connectionPool:
          tcp:
            maxConnections: 200
            connectTimeout: 10s

    - name: replica
      labels:
        role: replica
      trafficPolicy:
        connectionPool:
          tcp:
            maxConnections: 100
            connectTimeout: 10s

    - name: internal
      labels:
        component: internal
      trafficPolicy:
        connectionPool:
          tcp:
            maxConnections: 100
            connectTimeout: 5s

---
# ==============================================================================
# HashiCorp Vault Destination Rule - Secrets Management Configuration
# ==============================================================================
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: vault-destination-rule
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/component: vault-destination-rule
    app.kubernetes.io/part-of: veridis-protocol

    destinationrule.veridis.xyz/type: vault-destination-rule
    vault.veridis.xyz/type: hashicorp-vault
    vault.veridis.xyz/optimization: enabled

    veridis.xyz/environment: production
    veridis.xyz/team: security-engineering

  annotations:
    veridis.xyz/description: "HashiCorp Vault destination rule with secure connection management and high availability"
    vault.veridis.xyz/security-optimization: "enabled"
    vault.veridis.xyz/ha-enabled: "enabled"

spec:
  host: vault.veridis-infrastructure.svc.cluster.local

  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN

    connectionPool:
      tcp:
        maxConnections: 50
        connectTimeout: 15s
        tcpKeepalive:
          time: 1800s
          interval: 30s
          probes: 3
        keepAlive:
          time: 1800s
          timeout: 60s
          interval: 30s

      http:
        http1MaxPendingRequests: 32
        http2MaxRequests: 100
        maxRequestsPerConnection: 20
        maxRetries: 3
        idleTimeout: 300s
        h2UpgradePolicy: DO_NOT_UPGRADE

    # Strict outlier detection for vault
    outlierDetection:
      consecutiveGatewayErrors: 2
      consecutive5xxErrors: 2
      interval: 30s
      baseEjectionTime: 120s
      maxEjectionPercent: 33
      minHealthPercent: 67

  subsets:
    - name: active
      labels:
        vault-active: "true"
      trafficPolicy:
        connectionPool:
          tcp:
            maxConnections: 50
            connectTimeout: 15s

    - name: standby
      labels:
        vault-standby: "true"
      trafficPolicy:
        connectionPool:
          tcp:
            maxConnections: 25
            connectTimeout: 15s

    - name: internal
      labels:
        component: internal
      trafficPolicy:
        connectionPool:
          tcp:
            maxConnections: 30
            connectTimeout: 10s

---
# ==============================================================================
# StarkNet DevNet Destination Rule - Blockchain Network Configuration
# ==============================================================================
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: starknet-devnet-destination-rule
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: starknet-devnet
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/component: starknet-destination-rule
    app.kubernetes.io/part-of: veridis-protocol

    destinationrule.veridis.xyz/type: blockchain-destination-rule
    blockchain.veridis.xyz/network: starknet
    blockchain.veridis.xyz/optimization: enabled

    veridis.xyz/environment: production
    veridis.xyz/team: blockchain-engineering

  annotations:
    veridis.xyz/description: "StarkNet DevNet destination rule with blockchain-optimized connection management"
    blockchain.veridis.xyz/rpc-optimization: "enabled"
    blockchain.veridis.xyz/connection-persistence: "enabled"

spec:
  host: starknet-devnet.veridis-infrastructure.svc.cluster.local

  trafficPolicy:
    loadBalancer:
      simple: LEAST_REQUEST

    connectionPool:
      tcp:
        maxConnections: 100
        connectTimeout: 30s
        tcpKeepalive:
          time: 3600s
          interval: 60s
          probes: 3
        keepAlive:
          time: 3600s
          timeout: 120s
          interval: 60s

      http:
        http1MaxPendingRequests: 64
        http2MaxRequests: 200
        maxRequestsPerConnection: 50
        maxRetries: 2
        idleTimeout: 600s
        h2UpgradePolicy: DO_NOT_UPGRADE

    # Moderate outlier detection for blockchain
    outlierDetection:
      consecutiveGatewayErrors: 5
      consecutive5xxErrors: 5
      interval: 60s
      baseEjectionTime: 120s
      maxEjectionPercent: 25
      minHealthPercent: 50

  subsets:
    - name: rpc
      labels:
        component: rpc
      trafficPolicy:
        connectionPool:
          tcp:
            maxConnections: 100
            connectTimeout: 30s

    - name: internal
      labels:
        component: internal
      trafficPolicy:
        connectionPool:
          tcp:
            maxConnections: 50
            connectTimeout: 15s

# ==============================================================================
# Veridis Service Mesh Destination Rules Summary and Enterprise Architecture
# ==============================================================================
#
# COMPREHENSIVE VERIDIS SERVICE MESH DESTINATION RULES STRATEGY:
# ==============================================================
#
# VERIDIS SERVICE MESH DESTINATION RULES ARCHITECTURE OVERVIEW:
# ------------------------------------------------------------
# 1. Backend Destination Rule (veridis-backend-destination-rule):
#    - Comprehensive backend traffic policies with intelligent connection pooling and advanced load balancing for production traffic
#    - Advanced Istio configuration with least request load balancing, consistent hash routing, and comprehensive connection management
#    - Multi-subset routing with stable, canary, health, metrics, WebSocket, and internal subsets for complete service segmentation
#    - Enterprise traffic policies with circuit breaking, outlier detection, port-specific settings, and comprehensive traffic optimization
#    - Performance optimization with HTTP/2 support, connection keep-alive, TCP optimization, and intelligent connection pooling
#
# 2. ZK Circuits Destination Rule (veridis-zk-circuits-destination-rule):
#    - GPU-optimized destination rule with extended timeouts and resource-aware load balancing for complex computations
#    - Performance-specific configuration with conservative connection limits, extended idle timeouts, and GPU resource management
#    - Extended timeout configuration with 1800-second idle timeout and conservative outlier detection for expensive operations
#    - Conditional deployment with ZK circuits optimization enablement and GPU acceleration management
#    - Advanced resource monitoring with GPU utilization tracking and proof generation optimization intelligence
#
# 3. UI Destination Rule (veridis-ui-destination-rule):
#    - Frontend-optimized destination rule with static asset optimization and lightweight connection pooling for SPA applications
#    - Static asset optimization with aggressive connection pooling, round-robin load balancing, and frontend-specific policies
#    - SPA routing with component-based subsets including static assets, SPA content, and health check routing
#    - HTTP/2 upgrade support with high connection limits and optimized timeout policies for frontend performance
#    - Conditional deployment with frontend optimization enablement and static asset management
#
# 4. Infrastructure Destination Rules (postgres, redis, vault, starknet):
#    - Database-optimized destination rule with persistent connections, transaction pooling, and database-specific policies
#    - Cache optimization with Redis-specific connection pooling, pipeline optimization, and consistent hash load balancing
#    - Vault security with secure connection management, high availability support, and strict outlier detection
#    - Blockchain optimization with StarkNet RPC connection management and blockchain-specific timeout policies
#    - Service-specific optimization with role-based subsets (primary, replica, internal) and component isolation
#
# ENTERPRISE SERVICE MESH DESTINATION RULES FEATURES:
# ===================================================
# Advanced Istio Destination Rule Configuration and Traffic Policies:
#   - Load balancer policies with LEAST_REQUEST, ROUND_ROBIN, PASSTHROUGH, and consistent hash strategies for optimal traffic distribution
#   - Connection pooling with TCP and HTTP settings including max connections, timeouts, keep-alive, and HTTP/2 configuration
#   - Circuit breaking with outlier detection, consecutive error thresholds, ejection policies, and health percentage requirements
#   - Port-specific policies with service-specific connection limits, timeout policies, and protocol optimization
#   - Subset configuration with version-based routing, component isolation, and environment-specific traffic management
#
# Comprehensive Service Mesh Connection Management and Optimization:
#   - TCP connection pooling with max connections (10-300), connect timeout (5-60s), and TCP keep-alive configuration
#   - HTTP connection pooling with pending requests, max requests per connection, retry policies, and idle timeout management
#   - Keep-alive optimization with time (600-7200s), timeout (60-300s), and interval (30-60s) for persistent connections
#   - HTTP/2 configuration with max requests (100-2000), upgrade policies, and protocol-specific optimization
#   - Connection affinity with consistent hash routing, cookie-based routing, and session persistence management
#
# Enterprise Service Mesh Performance and Resource Optimization:
#   - Service-specific optimization with backend (100 connections), ZK circuits (50 connections), UI (200-300 connections)
#   - Extended timeouts for ZK operations (1800s idle), frontend optimization (60s idle), and database persistence (300s timeout)
#   - Resource-aware load balancing with GPU affinity, locality preferences, and failover configuration
#   - Batch processing optimization with extended timeouts, conservative connection limits, and resource management
#   - Performance monitoring with connection utilization tracking and service-specific performance optimization
#
# Advanced Service Mesh Security and Compliance Integration:
#   - Outlier detection with consecutive error thresholds (2-10), ejection policies, and health percentage requirements
#   - Security-optimized policies with Vault strict detection, database conservative policies, and frontend relaxed settings
#   - Subset isolation with version-based routing, component separation, and environment-specific traffic management
#   - Internal communication security with restricted access, secure connection policies, and service mesh enforcement
#   - Compliance integration with SOC 2, GDPR, ISO 27001, NIST compliance and comprehensive audit support
#
# OPERATIONAL EXCELLENCE:
# ======================
# Service Mesh Destination Rule Lifecycle Management:
#   - Multi-destination rule architecture with backend, ZK circuits, UI, database, cache, vault, and blockchain configurations
#   - Intelligent service mesh traffic management with predictive analytics and connection utilization correlation
#   - Advanced monitoring with comprehensive destination rule analytics and traffic business intelligence
#   - Configuration validation with destination rule schema enforcement and traffic deployment safety checks
#   - Automated optimization with traffic pattern analysis and destination rule policy recommendation engine
#
# Security Integration and Compliance:
#   - SOC 2 Type II destination rule controls with comprehensive audit requirements and traffic logging
#   - GDPR destination rule compliance with data protection and privacy-preserving traffic management
#   - ISO 27001 destination rule security management with information security and traffic compliance integration
#   - NIST 800-190 container destination rule security with traffic validation and compliance
#   - Zero-trust destination rule architecture with comprehensive encryption and traffic authentication requirements
#
# Business Intelligence Integration:
#   - Service mesh traffic analytics with destination rule cost correlation and connection resource utilization optimization
#   - Performance analytics with destination rule user experience optimization and traffic business intelligence
#   - Policy intelligence with destination rule traffic pattern monitoring and service mesh optimization recommendations
#   - Strategic planning with destination rule capacity management and traffic forecasting
#   - Business impact assessment with destination rule traffic performance correlation and service mesh availability tracking
#
# Developer Experience Excellence:
#   - Service-specific destination rules with backend, ZK circuits, UI, and infrastructure optimization
#   - Comprehensive documentation with destination rule guides and traffic troubleshooting procedures
#   - Environment-specific destination rules with production, canary, and internal support
#   - Testing integration with destination rule development workflow and traffic debugging capabilities
#   - Destination rule monitoring with comprehensive tracking and traffic correlation
#
# ==============================================================================
