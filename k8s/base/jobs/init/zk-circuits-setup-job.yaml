# ==============================================================================
# Veridis Decentralized Identity Protocol - ZK Circuits Setup Job Configuration
# ==============================================================================
#
# This manifest defines comprehensive ZK Circuits Setup Job for the
# decentralized identity protocol, providing:
#
# ENTERPRISE VERIDIS ZK CIRCUITS SETUP JOB ARCHITECTURE:
#   • Advanced ZK Circuits Setup Job with intelligent circuit management and performance-based optimization
#   • Multi-tier ZK Circuits Setup architecture with development, testing, staging, and production environments
#   • Comprehensive circuit framework with Setup policies, data optimization, GPU integration
#   • Advanced lifecycle management with automated Setup optimization, circuit control, and data enhancement
#   • Enterprise-grade intelligence with comprehensive analytics and ZK Circuits Setup Job performance insights
#
# VERIDIS ZK CIRCUITS SETUP JOB OPTIMIZATION:
#   • High-performance Job with intelligent circuit setup and GPU circuit optimization
#   • Intelligent Job circuit setup with responsive policies and performance-based setup decisions
#   • Advanced Job management with business intelligence and circuit-based GPU control
#   • Comprehensive circuit setup control with intelligent GPU Job management and data enhancement
#   • Enterprise acceleration with predictive GPU Job management and circuit setup optimization
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II ZK Circuits Setup Job controls with comprehensive audit and setup requirements
#   • GDPR ZK Circuits Setup Job compliance with data protection, privacy controls, and setup management
#   • ISO 27001 ZK Circuits Setup Job management with comprehensive framework integration
#   • NIST 800-190 container ZK Circuits Setup Job security with setup-specific validation and compliance
#   • Zero-knowledge protocol compliance with regulatory frameworks and ZK Circuits Setup Job best practices
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent ZK Circuits Setup Job lifecycle management with automated provisioning and setup optimization
#   • Predictive setup analytics with capacity planning and ZK Circuits Setup Job intelligence
#   • Advanced Job integration with GPU setup analytics and performance business intelligence
#   • Comprehensive circuit setup control with ZK Circuits Setup Job preservation and data optimization
#   • Business continuity ZK Circuits Setup Job with setup guarantees and performance optimization
#
# ZK CIRCUITS SETUP JOB ACCELERATION INTELLIGENCE:
#   • ZK Circuits Setup Job usage analytics with setup patterns and optimization recommendations
#   • Job monitoring with GPU setup latency and management optimization intelligence
#   • Development efficiency with ZK Circuits Setup Job analytics and deployment optimization procedures
#   • Cost optimization with ZK Circuits Setup Job utilization analysis and setup capacity planning procedures
#   • Quality assurance with ZK Circuits Setup Job metrics and setup validation procedures
#
# ==============================================================================

# ==============================================================================
# Veridis Production ZK Circuits Setup Job - Comprehensive Circuit Initialization
# ==============================================================================
apiVersion: batch/v1
kind: Job
metadata:
  name: veridis-zk-circuits-setup-job
  namespace: veridis

  # Core Veridis ZK Circuits Setup Job identification labels
  labels:
    app.kubernetes.io/name: veridis-zk-circuits-setup
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-setup-job
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # ZK Circuits Setup Job specific classification
    job.veridis.xyz/type: production-zk-circuits-setup-job
    job.veridis.xyz/category: comprehensive-setup-job
    job.veridis.xyz/role: primary-setup-job
    job.veridis.xyz/setup-class: high-performance-setup-job
    job.veridis.xyz/security-level: enterprise

    # Setup Job ZK Circuits Setup Job classification
    setup.veridis.xyz/zk-circuits-setup-job-type: intelligent-setup-job
    setup.veridis.xyz/setup-type: zk-circuits-setup
    setup.veridis.xyz/performance-tier: high-throughput
    setup.veridis.xyz/optimization: enabled
    setup.veridis.xyz/features: full-setup-job-stack

    # ZK Circuits Setup Job classification
    zk.veridis.xyz/tier: production
    zk.veridis.xyz/optimization: intelligent-setup-job-management
    zk.veridis.xyz/data-management: advanced
    zk.veridis.xyz/performance-optimization: enabled
    zk.veridis.xyz/efficiency: maximum

    # Business Setup Job classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/impact: high-setup-job-performance
    business.veridis.xyz/cost-tier: production
    business.veridis.xyz/sla-tier: enterprise
    business.veridis.xyz/availability-requirement: 99.9

    # Operational Setup Job labels
    veridis.xyz/environment: production
    veridis.xyz/team: zk-engineering
    veridis.xyz/cost-center: zk-infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "setup-job-control-framework"
    compliance.veridis.xyz/gdpr: "setup-job-data-protection"
    compliance.veridis.xyz/iso27001: "setup-job-security-management"
    compliance.veridis.xyz/nist-800-190: "setup-job-container-security"
    governance.veridis.xyz/policy-enforcement: "enterprise"

    # Setup Job analytics and intelligence
    monitoring.veridis.xyz/setup-job-monitoring: "enabled"
    monitoring.veridis.xyz/performance-monitoring: "comprehensive"
    monitoring.veridis.xyz/setup-monitoring: "enabled"
    monitoring.veridis.xyz/business-monitoring: "enabled"
    monitoring.veridis.xyz/compliance-monitoring: "enabled"

    # ZK circuits specific labels
    zk.veridis.xyz/provider: "garaga"
    zk.veridis.xyz/cairo-version: "2.11.4"
    zk.veridis.xyz/starknet-version: "0.13.4"
    zk.veridis.xyz/garaga-version: "0.18.1"
    zk.veridis.xyz/gpu-enabled: "true"
    zk.veridis.xyz/cuda-enabled: "true"
    zk.veridis.xyz/optimization-level: "3"

    # Performance labels
    performance.veridis.xyz/setup-speed: "high"
    performance.veridis.xyz/gpu-acceleration: "enabled"
    performance.veridis.xyz/parallel-setup: "enabled"
    performance.veridis.xyz/optimization-enabled: "true"
    performance.veridis.xyz/memory-efficient: "enabled"

  annotations:
    # Setup Job purpose and specifications
    veridis.xyz/description: "Enterprise Veridis ZK Circuits Setup Job with intelligent circuit management, advanced performance optimization, and comprehensive setup optimization"
    veridis.xyz/purpose: "Provides comprehensive ZK Circuits Setup Job for decentralized identity management with intelligent setup management, performance optimization, and setup guarantees"
    veridis.xyz/scope: "ZK Circuits Setup Job including setup management, performance optimization, job configuration, and comprehensive monitoring intelligence"

    # Setup Job architecture and design
    zk.veridis.xyz/architecture: "Enterprise ZK Circuits Setup Job with intelligent setup management, advanced performance optimization, and job integration optimization"
    zk.veridis.xyz/design-pattern: "Multi-tier Setup Job with performance optimization, cost efficiency, and business intelligence"
    zk.veridis.xyz/optimization-model: "Intelligent Setup Job with predictive analytics, performance optimization, and setup efficiency"
    zk.veridis.xyz/performance-model: "High-performance Setup Job with setup optimization and intelligent job management"

    # Setup Job specifications
    setup.veridis.xyz/setup-job-specification: "Setup Job with performance optimization and intelligent zk circuits setup management"
    setup.veridis.xyz/setup-specification: "Advanced setup management with setup optimization and job enhancement"
    setup.veridis.xyz/gpu-specification: "Setup Job GPU management optimization with intelligent setup and enhancement"
    setup.veridis.xyz/performance-specification: "Setup performance job with setup acceleration and efficiency"
    setup.veridis.xyz/business-specification: "Setup business job with cost optimization and strategic setup intelligence"

    # ZK circuits configuration annotations
    zk.veridis.xyz/cairo-version: "2.11.4"
    zk.veridis.xyz/starknet-version: "0.13.4"
    zk.veridis.xyz/garaga-version: "0.18.1"
    zk.veridis.xyz/nodejs-version: "22.14.0"
    zk.veridis.xyz/rust-version: "1.87.0"

    # GPU configuration annotations
    gpu.veridis.xyz/cuda-enabled: "true"
    gpu.veridis.xyz/cuda-version: "12.6"
    gpu.veridis.xyz/gpu-memory-required: "8Gi"
    gpu.veridis.xyz/gpu-compute-capability: "7.0"
    gpu.veridis.xyz/optimization-level: "3"

    # Performance annotations
    performance.veridis.xyz/setup-timeout: "60m"
    performance.veridis.xyz/parallel-workers: "4"
    performance.veridis.xyz/batch-processing: "enabled"
    performance.veridis.xyz/memory-optimization: "enabled"
    performance.veridis.xyz/progress-tracking: "enabled"

    # Circuit setup annotations
    circuit.veridis.xyz/identity-circuits: "enabled"
    circuit.veridis.xyz/attestation-circuits: "enabled"
    circuit.veridis.xyz/verification-circuits: "enabled"
    circuit.veridis.xyz/bridge-circuits: "enabled"
    circuit.veridis.xyz/compliance-circuits: "enabled"

    # Security annotations
    security.veridis.xyz/encryption-at-rest: "enabled"
    security.veridis.xyz/encryption-in-transit: "enabled"
    security.veridis.xyz/key-management: "enabled"
    security.veridis.xyz/access-control: "enabled"
    security.veridis.xyz/audit-logging: "enabled"

    # Monitoring annotations
    monitoring.veridis.xyz/setup-monitoring: "enabled"
    monitoring.veridis.xyz/performance-tracking: "enabled"
    monitoring.veridis.xyz/error-tracking: "enabled"
    monitoring.veridis.xyz/success-notification: "enabled"
    monitoring.veridis.xyz/failure-alerting: "enabled"

    # Compliance annotations
    compliance.veridis.xyz/data-classification: "confidential"
    compliance.veridis.xyz/audit-logging: "enabled"
    compliance.veridis.xyz/compliance-validation: "enabled"
    compliance.veridis.xyz/regulatory-compliance: "gdpr,soc2,iso27001"
    compliance.veridis.xyz/setup-policy: "production-zk-setup-policy-v1"

    # Business annotations
    business.veridis.xyz/cost-center: "zk-infrastructure"
    business.veridis.xyz/budget-allocation: "production-zk-setup"
    business.veridis.xyz/cost-optimization: "enabled"
    business.veridis.xyz/usage-tracking: "comprehensive"
    business.veridis.xyz/performance-tier: "production"

    # Documentation and procedures
    veridis.xyz/owner: "zk-team@veridis.xyz"
    veridis.xyz/setup-job-admin: "zk-admin@veridis.xyz"
    veridis.xyz/escalation: "zk-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "zk-oncall@veridis.xyz"

    # Documentation references
    veridis.xyz/documentation: "https://docs.veridis.xyz/zk-circuits/setup"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/zk-circuits/setup-management"
    veridis.xyz/setup-docs: "https://zk.veridis.xyz/circuit-setup-guide"
    veridis.xyz/monitoring-docs: "https://zk.veridis.xyz/setup-monitoring"

# ==============================================================================
# ZK Circuits Setup Job Specification
# ==============================================================================
spec:
  # ==============================================================================
  # Job Completion and Parallelism
  # ==============================================================================
  completions: 1
  parallelism: 1

  # ==============================================================================
  # Job Deadline and Backoff
  # ==============================================================================
  activeDeadlineSeconds: 3600  # 1 hour
  backoffLimit: 3

  # ==============================================================================
  # TTL After Finished
  # ==============================================================================
  ttlSecondsAfterFinished: 86400  # 24 hours

  # ==============================================================================
  # Completion Mode
  # ==============================================================================
  completionMode: NonIndexed

  # ==============================================================================
  # Pod Template Specification
  # ==============================================================================
  template:
    metadata:
      labels:
        job.veridis.xyz/type: zk-circuits-setup
        job.veridis.xyz/component: setup-worker
        veridis.xyz/zk-circuits-setup: "true"
        veridis.xyz/monitoring: "enabled"
        veridis.xyz/gpu-required: "true"

      annotations:
        job.veridis.xyz/setup-job: "zk-circuits-setup"
        job.veridis.xyz/performance-optimized: "true"
        job.veridis.xyz/gpu-enabled: "true"
        job.veridis.xyz/monitoring-enabled: "true"

        # Prometheus annotations
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"

    spec:
      # ==============================================================================
      # Pod Restart Policy
      # ==============================================================================
      restartPolicy: OnFailure

      # ==============================================================================
      # Service Account
      # ==============================================================================
      serviceAccountName: veridis-zk-circuits-setup-sa

      # ==============================================================================
      # Security Context
      # ==============================================================================
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534  # nobody
        runAsGroup: 65534  # nobody
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: []

      # ==============================================================================
      # DNS Configuration
      # ==============================================================================
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "2"
          - name: edns0

      # ==============================================================================
      # Priority and Scheduling
      # ==============================================================================
      priorityClassName: veridis-zk-setup-priority

      # ==============================================================================
      # Node Selection and Affinity
      # ==============================================================================
      nodeSelector:
        accelerator: nvidia-tesla-v100
        veridis.xyz/node-type: "gpu"
        kubernetes.io/arch: "amd64"

      affinity:
        # Node affinity for GPU nodes
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: accelerator
                    operator: In
                    values: ["nvidia-tesla-v100", "nvidia-tesla-a100", "nvidia-rtx-4090"]
                  - key: veridis.xyz/gpu-enabled
                    operator: In
                    values: ["true"]

          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: veridis.xyz/workload-type
                    operator: In
                    values: ["zk-circuits", "gpu-compute"]
            - weight: 80
              preference:
                matchExpressions:
                  - key: node.kubernetes.io/instance-type
                    operator: In
                    values: ["p3.2xlarge", "p3.8xlarge", "g4dn.xlarge"]

        # Pod anti-affinity to spread across nodes
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 50
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: job.veridis.xyz/type
                      operator: In
                      values: ["zk-circuits-setup"]
                topologyKey: kubernetes.io/hostname

      # ==============================================================================
      # Tolerations
      # ==============================================================================
      tolerations:
        - key: nvidia.com/gpu
          operator: Exists
          effect: NoSchedule
        - key: veridis.xyz/gpu-node
          operator: Equal
          value: "true"
          effect: NoSchedule
        - key: node.kubernetes.io/not-ready
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 300
        - key: node.kubernetes.io/unreachable
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 300

      # ==============================================================================
      # Init Containers
      # ==============================================================================
      initContainers:
        # ==============================================================================
        # GPU Availability Checker
        # ==============================================================================
        - name: gpu-availability-check
          image: nvidia/cuda:12.6-runtime-ubuntu22.04
          imagePullPolicy: IfNotPresent

          command:
            - /bin/bash
            - -c
            - |
              echo "Checking GPU availability..."
              nvidia-smi
              if [ $? -eq 0 ]; then
                echo "GPU detected and accessible"
                nvidia-smi --query-gpu=name,memory.total,memory.free --format=csv
              else
                echo "GPU not available or not accessible"
                exit 1
              fi

              echo "Checking CUDA version..."
              nvcc --version || echo "NVCC not available, using runtime"

              echo "GPU availability check completed successfully"

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            capabilities:
              drop:
                - ALL

          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
              nvidia.com/gpu: 1
            limits:
              cpu: "200m"
              memory: "256Mi"
              nvidia.com/gpu: 1

        # ==============================================================================
        # Dependencies Validator
        # ==============================================================================
        - name: dependencies-validator
          image: veridis/zk-circuits-setup:v3.2.1
          imagePullPolicy: IfNotPresent

          command:
            - /bin/bash
            - -c
            - |
              echo "Validating ZK circuits dependencies..."

              # Check Node.js version
              node --version
              if [ $? -ne 0 ]; then
                echo "Node.js not available"
                exit 1
              fi

              # Check npm packages
              echo "Checking npm packages..."
              npm list --depth=0 || echo "Warning: Some npm packages may be missing"

              # Check Cairo installation
              echo "Checking Cairo installation..."
              cairo-compile --version || echo "Warning: Cairo compiler not found"

              # Check Starknet CLI
              echo "Checking Starknet CLI..."
              starknet --version || echo "Warning: Starknet CLI not found"

              # Check Garaga availability
              echo "Checking Garaga availability..."
              python3 -c "import garaga; print(f'Garaga version: {garaga.__version__}')" || echo "Warning: Garaga not available"

              # Validate workspace directory
              echo "Validating workspace..."
              mkdir -p /workspace/circuits
              mkdir -p /workspace/keys
              mkdir -p /workspace/compiled
              mkdir -p /workspace/artifacts

              echo "Dependencies validation completed"

          volumeMounts:
            - name: setup-workspace
              mountPath: /workspace
            - name: zk-config
              mountPath: /etc/zk-config
              readOnly: true

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            capabilities:
              drop:
                - ALL

          resources:
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"

        # ==============================================================================
        # Circuit Source Downloader
        # ==============================================================================
        - name: circuit-source-downloader
          image: veridis/zk-circuits-setup:v3.2.1
          imagePullPolicy: IfNotPresent

          command:
            - /bin/bash
            - -c
            - |
              echo "Downloading ZK circuit sources..."

              # Download circuit definitions
              echo "Downloading circuit definitions from repository..."
              git clone --depth 1 --branch ${CIRCUIT_BRANCH:-main} \
                https://github.com/veridis/zk-circuits.git /workspace/source

              if [ $? -ne 0 ]; then
                echo "Failed to download circuit sources"
                exit 1
              fi

              # Verify circuit integrity
              echo "Verifying circuit integrity..."
              cd /workspace/source

              # Check circuit checksums if available
              if [ -f checksums.txt ]; then
                sha256sum -c checksums.txt
                if [ $? -ne 0 ]; then
                  echo "Circuit integrity verification failed"
                  exit 1
                fi
              fi

              # Copy circuits to workspace
              echo "Copying circuits to workspace..."
              cp -r circuits/* /workspace/circuits/
              cp -r keys/* /workspace/keys/ 2>/dev/null || echo "No pre-generated keys found"

              # Set permissions
              chmod -R 755 /workspace/circuits
              chmod -R 755 /workspace/keys

              echo "Circuit source download completed"

          env:
            - name: CIRCUIT_BRANCH
              value: "main"
            - name: GIT_SSL_NO_VERIFY
              value: "false"

          volumeMounts:
            - name: setup-workspace
              mountPath: /workspace
            - name: git-credentials
              mountPath: /etc/git-credentials
              readOnly: true

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            capabilities:
              drop:
                - ALL

          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"

      # ==============================================================================
      # Main Container - ZK Circuits Setup Worker
      # ==============================================================================
      containers:
        - name: zk-circuits-setup-worker
          image: veridis/zk-circuits-setup:v3.2.1
          imagePullPolicy: IfNotPresent

          # ==============================================================================
          # Container Command and Arguments
          # ==============================================================================
          command:
            - /usr/local/bin/zk-circuits-setup

          args:
            - --config=/etc/zk-config/setup-config.yaml
            - --workspace=/workspace
            - --log-level=info
            - --metrics-port=8080
            - --health-port=8081
            - --gpu-enabled=true
            - --cuda-enabled=true
            - --optimization-level=3
            - --parallel-workers=4
            - --performance-optimized=true
            - --audit-logging=true
            - --setup-all-circuits=true

          # ==============================================================================
          # Environment Variables
          # ==============================================================================
          env:
            # ZK Circuits Configuration
            - name: ZK_CIRCUITS_VERSION
              value: "3.2.1"
            - name: CAIRO_VERSION
              value: "2.11.4"
            - name: STARKNET_VERSION
              value: "0.13.4"
            - name: GARAGA_VERSION
              value: "0.18.1"
            - name: NODEJS_VERSION
              value: "22.14.0"
            - name: RUST_VERSION
              value: "1.87.0"

            # GPU Configuration
            - name: CUDA_ENABLED
              value: "true"
            - name: CUDA_VERSION
              value: "12.6"
            - name: GPU_MEMORY_LIMIT
              value: "8Gi"
            - name: GPU_COMPUTE_CAPABILITY
              value: "7.0"
            - name: GARAGA_CUDA_ENABLED
              value: "true"
            - name: GARAGA_GPU_ACCELERATION
              value: "true"

            # Performance Configuration
            - name: OPTIMIZATION_LEVEL
              value: "3"
            - name: PARALLEL_WORKERS
              value: "4"
            - name: BATCH_SIZE
              value: "10"
            - name: MEMORY_OPTIMIZATION
              value: "true"
            - name: PERFORMANCE_TUNING
              value: "enabled"
            - name: ZK_PROOF_SECURITY_LEVEL
              value: "128"

            # Circuit Configuration
            - name: IDENTITY_CIRCUITS_ENABLED
              value: "true"
            - name: ATTESTATION_CIRCUITS_ENABLED
              value: "true"
            - name: VERIFICATION_CIRCUITS_ENABLED
              value: "true"
            - name: BRIDGE_CIRCUITS_ENABLED
              value: "true"
            - name: COMPLIANCE_CIRCUITS_ENABLED
              value: "true"

            # Setup Configuration
            - name: SETUP_WORKSPACE
              value: "/workspace"
            - name: CIRCUITS_PATH
              value: "/workspace/circuits"
            - name: KEYS_PATH
              value: "/workspace/keys"
            - name: COMPILED_PATH
              value: "/workspace/compiled"
            - name: ARTIFACTS_PATH
              value: "/workspace/artifacts"

            # Logging Configuration
            - name: LOG_LEVEL
              value: "info"
            - name: LOG_FORMAT
              value: "json"
            - name: STRUCTURED_LOGGING
              value: "true"
            - name: AUDIT_LOGGING_ENABLED
              value: "true"

            # Security Configuration
            - name: ENCRYPTION_AT_REST
              value: "true"
            - name: ENCRYPTION_IN_TRANSIT
              value: "true"
            - name: KEY_MANAGEMENT_ENABLED
              value: "true"
            - name: ACCESS_CONTROL_ENABLED
              value: "true"
            - name: DATA_CLASSIFICATION
              value: "confidential"

            # Monitoring Configuration
            - name: MONITORING_ENABLED
              value: "true"
            - name: METRICS_ENABLED
              value: "true"
            - name: METRICS_PORT
              value: "8080"
            - name: HEALTH_CHECK_PORT
              value: "8081"
            - name: PROMETHEUS_METRICS_ENABLED
              value: "true"

            # Notification Configuration
            - name: SUCCESS_NOTIFICATION_ENABLED
              value: "true"
            - name: FAILURE_ALERTING_ENABLED
              value: "true"
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: veridis-notification-secrets
                  key: slack-webhook-url
                  optional: true

            # Environment and Deployment
            - name: ENVIRONMENT
              value: "production"
            - name: DEPLOYMENT_VERSION
              value: "3.2.1"
            - name: CLUSTER_NAME
              value: "veridis-production"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName

            # Job Metadata
            - name: JOB_START_TIME
              value: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            - name: JOB_TYPE
              value: "zk-circuits-setup"
            - name: JOB_CRITICALITY
              value: "high"
            - name: JOB_OWNER
              value: "zk-engineering"

            # Vault Integration
            - name: VAULT_ENABLED
              value: "true"
            - name: VAULT_ADDRESS
              value: "https://veridis-vault-service.veridis.svc.cluster.local:8200"
            - name: VAULT_AUTH_METHOD
              value: "kubernetes"
            - name: VAULT_ROLE
              value: "zk-circuits-setup"
            - name: VAULT_SECRET_PATH
              value: "secret/zk-circuits"

          # ==============================================================================
          # Volume Mounts
          # ==============================================================================
          volumeMounts:
            # Configuration
            - name: zk-config
              mountPath: /etc/zk-config
              readOnly: true

            # Workspace for circuits and artifacts
            - name: setup-workspace
              mountPath: /workspace

            # GPU device access
            - name: nvidia-driver
              mountPath: /usr/local/nvidia
              readOnly: true

            # Secrets and keys
            - name: zk-secrets
              mountPath: /etc/zk-secrets
              readOnly: true

            # Vault authentication
            - name: vault-token
              mountPath: /var/run/secrets/vault
              readOnly: true

            # Audit logs
            - name: audit-logs
              mountPath: /var/log/audit

            # Git credentials
            - name: git-credentials
              mountPath: /etc/git-credentials
              readOnly: true

          # ==============================================================================
          # Security Context
          # ==============================================================================
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL

          # ==============================================================================
          # Resource Management
          # ==============================================================================
          resources:
            requests:
              cpu: "2000m"
              memory: "8Gi"
              ephemeral-storage: "10Gi"
              nvidia.com/gpu: 1
            limits:
              cpu: "8000m"
              memory: "32Gi"
              ephemeral-storage: "20Gi"
              nvidia.com/gpu: 1

          # ==============================================================================
          # Health Checks
          # ==============================================================================
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3

          # ==============================================================================
          # Startup Probe
          # ==============================================================================
          startupProbe:
            httpGet:
              path: /health/startup
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 18  # Allow up to 3 minutes for startup

          # ==============================================================================
          # Container Ports
          # ==============================================================================
          ports:
            - name: metrics
              containerPort: 8080
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP

          # ==============================================================================
          # Lifecycle Hooks
          # ==============================================================================
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - |
                    echo "Gracefully shutting down ZK circuits setup..."
                    # Save current progress
                    if [ -f /workspace/setup-progress.json ]; then
                      cp /workspace/setup-progress.json /workspace/setup-progress-final.json
                    fi
                    # Send graceful shutdown signal
                    kill -TERM 1
                    # Wait for setup to complete current circuit
                    sleep 60
                    echo "ZK circuits setup shutdown completed"

      # ==============================================================================
      # Volumes Configuration
      # ==============================================================================
      volumes:
        # ==============================================================================
        # Configuration Volume
        # ==============================================================================
        - name: zk-config
          configMap:
            name: veridis-zk-circuits-setup-config
            defaultMode: 0644
            items:
              - key: setup-config.yaml
                path: setup-config.yaml
              - key: circuit-definitions.yaml
                path: circuit-definitions.yaml
              - key: gpu-config.yaml
                path: gpu-config.yaml
              - key: performance-config.yaml
                path: performance-config.yaml

        # ==============================================================================
        # Workspace Volume (Persistent)
        # ==============================================================================
        - name: setup-workspace
          persistentVolumeClaim:
            claimName: veridis-zk-circuits-setup-pvc

        # ==============================================================================
        # NVIDIA Driver Volume
        # ==============================================================================
        - name: nvidia-driver
          hostPath:
            path: /usr/local/nvidia
            type: Directory

        # ==============================================================================
        # Secrets Volume
        # ==============================================================================
        - name: zk-secrets
          secret:
            secretName: veridis-zk-circuits-secrets
            defaultMode: 0600
            items:
              - key: circuit-signing-key
                path: circuit-signing-key
              - key: setup-encryption-key
                path: setup-encryption-key
              - key: verification-key
                path: verification-key

        # ==============================================================================
        # Vault Token Volume
        # ==============================================================================
        - name: vault-token
          projected:
            sources:
              - serviceAccountToken:
                  path: token
                  expirationSeconds: 3600
                  audience: vault

        # ==============================================================================
        # Audit Logs Volume
        # ==============================================================================
        - name: audit-logs
          emptyDir:
            sizeLimit: "1Gi"
            medium: ""

        # ==============================================================================
        # Git Credentials Volume
        # ==============================================================================
        - name: git-credentials
          secret:
            secretName: veridis-git-credentials
            defaultMode: 0600
            optional: true

---
# ==============================================================================
# Veridis ZK Circuits Setup PersistentVolumeClaim - Workspace Storage
# ==============================================================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: veridis-zk-circuits-setup-pvc
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis-zk-circuits-setup
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-setup-storage
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    storage.veridis.xyz/type: zk-circuits-workspace
    storage.veridis.xyz/performance: high-iops
    storage.veridis.xyz/encryption: enabled
    veridis.xyz/environment: production
    veridis.xyz/team: zk-engineering

  annotations:
    veridis.xyz/description: "High-performance storage for ZK circuits setup workspace"
    storage.veridis.xyz/backup-policy: "daily"
    storage.veridis.xyz/retention-policy: "30d"

spec:
  accessModes:
    - ReadWriteOnce

  storageClassName: veridis-high-iops-ssd

  resources:
    requests:
      storage: 100Gi

  volumeMode: Filesystem

---
# ==============================================================================
# Veridis ZK Circuits Development Setup Job - Development Environment
# ==============================================================================
apiVersion: batch/v1
kind: Job
metadata:
  name: veridis-zk-circuits-dev-setup-job
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis-zk-circuits-dev-setup
    app.kubernetes.io/instance: veridis-development
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-dev-setup-job
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    job.veridis.xyz/type: development-zk-circuits-setup-job
    job.veridis.xyz/category: development-setup
    job.veridis.xyz/environment: development
    job.veridis.xyz/priority: medium

    # Development labels
    development.veridis.xyz/type: "dev-setup"
    development.veridis.xyz/gpu-required: "false"
    development.veridis.xyz/cost-optimized: "true"
    development.veridis.xyz/testing: "enabled"

    veridis.xyz/environment: development
    veridis.xyz/team: zk-engineering
    veridis.xyz/cost-center: development-infrastructure

  annotations:
    veridis.xyz/description: "Development environment ZK circuits setup without GPU acceleration"
    veridis.xyz/purpose: "Provides ZK circuits setup for development environment with CPU-only processing"

    # Development specific annotations
    development.veridis.xyz/gpu-acceleration: "false"
    development.veridis.xyz/cpu-only: "true"
    development.veridis.xyz/cost-optimized: "true"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "development-environment-enabled"

# ==============================================================================
# Development Setup Job Specification
# ==============================================================================
spec:
  completions: 1
  parallelism: 1
  activeDeadlineSeconds: 1800  # 30 minutes
  backoffLimit: 2
  ttlSecondsAfterFinished: 3600  # 1 hour

  template:
    metadata:
      labels:
        job.veridis.xyz/type: zk-circuits-dev-setup
        job.veridis.xyz/component: dev-setup-worker

    spec:
      restartPolicy: OnFailure
      serviceAccountName: veridis-zk-circuits-setup-sa

      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault

      # No GPU node selector for development
      nodeSelector:
        veridis.xyz/node-type: "development"
        kubernetes.io/arch: "amd64"

      containers:
        - name: zk-circuits-dev-setup
          image: veridis/zk-circuits-setup:v3.2.1
          imagePullPolicy: IfNotPresent

          command:
            - /usr/local/bin/zk-circuits-setup

          args:
            - --config=/etc/zk-config/dev-setup-config.yaml
            - --workspace=/workspace
            - --log-level=debug
            - --gpu-enabled=false
            - --cuda-enabled=false
            - --cpu-only=true
            - --optimization-level=1
            - --parallel-workers=2
            - --development-mode=true
            - --setup-basic-circuits=true

          env:
            - name: ENVIRONMENT
              value: "development"
            - name: GPU_ENABLED
              value: "false"
            - name: CUDA_ENABLED
              value: "false"
            - name: CPU_ONLY_MODE
              value: "true"
            - name: DEVELOPMENT_MODE
              value: "true"
            - name: OPTIMIZATION_LEVEL
              value: "1"
            - name: PARALLEL_WORKERS
              value: "2"

          volumeMounts:
            - name: dev-zk-config
              mountPath: /etc/zk-config
              readOnly: true
            - name: dev-workspace
              mountPath: /workspace

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            capabilities:
              drop:
                - ALL

          resources:
            requests:
              cpu: "500m"
              memory: "2Gi"
            limits:
              cpu: "2000m"
              memory: "8Gi"

      volumes:
        - name: dev-zk-config
          configMap:
            name: veridis-zk-circuits-dev-config
        - name: dev-workspace
          emptyDir:
            sizeLimit: "10Gi"

---
# ==============================================================================
# Veridis ZK Circuits Staging Setup Job - Pre-Production Environment
# ==============================================================================
apiVersion: batch/v1
kind: Job
metadata:
  name: veridis-zk-circuits-staging-setup-job
  namespace: veridis

  labels:
    app.kubernetes.io/name: veridis-zk-circuits-staging-setup
    app.kubernetes.io/instance: veridis-staging
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-staging-setup-job
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    job.veridis.xyz/type: staging-zk-circuits-setup-job
    job.veridis.xyz/category: staging-setup
    job.veridis.xyz/environment: staging
    job.veridis.xyz/priority: high

    # Staging labels
    staging.veridis.xyz/type: "staging-setup"
    staging.veridis.xyz/gpu-enabled: "true"
    staging.veridis.xyz/production-like: "true"
    staging.veridis.xyz/validation: "enabled"

    veridis.xyz/environment: staging
    veridis.xyz/team: zk-engineering
    veridis.xyz/cost-center: staging-infrastructure

  annotations:
    veridis.xyz/description: "Staging environment ZK circuits setup with GPU acceleration"
    veridis.xyz/purpose: "Provides production-like ZK circuits setup for staging validation"

    # Staging specific annotations
    staging.veridis.xyz/production-like: "true"
    staging.veridis.xyz/gpu-acceleration: "true"
    staging.veridis.xyz/validation-target: "true"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "staging-environment-enabled"

# ==============================================================================
# Staging Setup Job Specification
# ==============================================================================
spec:
  completions: 1
  parallelism: 1
  activeDeadlineSeconds: 2700  # 45 minutes
  backoffLimit: 2
  ttlSecondsAfterFinished: 7200  # 2 hours

  template:
    metadata:
      labels:
        job.veridis.xyz/type: zk-circuits-staging-setup
        job.veridis.xyz/component: staging-setup-worker

    spec:
      restartPolicy: OnFailure
      serviceAccountName: veridis-zk-circuits-setup-sa

      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault

      # GPU node selector for staging
      nodeSelector:
        accelerator: nvidia-tesla-v100
        veridis.xyz/node-type: "staging"
        kubernetes.io/arch: "amd64"

      tolerations:
        - key: nvidia.com/gpu
          operator: Exists
          effect: NoSchedule
        - key: veridis.xyz/staging-node
          operator: Equal
          value: "true"
          effect: NoSchedule

      containers:
        - name: zk-circuits-staging-setup
          image: veridis/zk-circuits-setup:v3.2.1
          imagePullPolicy: IfNotPresent

          command:
            - /usr/local/bin/zk-circuits-setup

          args:
            - --config=/etc/zk-config/staging-setup-config.yaml
            - --workspace=/workspace
            - --log-level=info
            - --gpu-enabled=true
            - --cuda-enabled=true
            - --optimization-level=2
            - --parallel-workers=3
            - --staging-mode=true
            - --setup-production-circuits=true
            - --validation-enabled=true

          env:
            - name: ENVIRONMENT
              value: "staging"
            - name: GPU_ENABLED
              value: "true"
            - name: CUDA_ENABLED
              value: "true"
            - name: STAGING_MODE
              value: "true"
            - name: OPTIMIZATION_LEVEL
              value: "2"
            - name: PARALLEL_WORKERS
              value: "3"
            - name: VALIDATION_ENABLED
              value: "true"

          volumeMounts:
            - name: staging-zk-config
              mountPath: /etc/zk-config
              readOnly: true
            - name: staging-workspace
              mountPath: /workspace
            - name: nvidia-driver
              mountPath: /usr/local/nvidia
              readOnly: true

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            capabilities:
              drop:
                - ALL

          resources:
            requests:
              cpu: "1000m"
              memory: "4Gi"
              nvidia.com/gpu: 1
            limits:
              cpu: "4000m"
              memory: "16Gi"
              nvidia.com/gpu: 1

      volumes:
        - name: staging-zk-config
          configMap:
            name: veridis-zk-circuits-staging-config
        - name: staging-workspace
          persistentVolumeClaim:
            claimName: veridis-zk-circuits-staging-pvc
        - name: nvidia-driver
          hostPath:
            path: /usr/local/nvidia
            type: Directory

# ==============================================================================
# Veridis ZK Circuits Setup Job Summary and Enterprise Architecture
# ==============================================================================
#
# COMPREHENSIVE VERIDIS ZK CIRCUITS SETUP JOB STRATEGY:
# =====================================================
#
# VERIDIS ZK CIRCUITS SETUP JOB ARCHITECTURE OVERVIEW:
# ----------------------------------------------------
# 1. Production ZK Circuits Setup Job (veridis-zk-circuits-setup-job):
#    - Comprehensive enterprise-grade setup job with intelligent circuit management and advanced performance optimization for production environments
#    - Advanced setup configuration with comprehensive GPU integration, circuit compilation, key generation, and comprehensive operational excellence
#    - Multi-tier setup architecture with GPU acceleration, CUDA optimization, parallel processing, and comprehensive setup intelligence
#    - Enterprise setup policies with security enforcement, compliance controls, audit logging, and comprehensive disaster recovery procedures
#    - Performance optimization with intelligent GPU utilization, memory optimization, parallel workers, and efficiency for maximum setup performance
#
# 2. Development Setup Job (veridis-zk-circuits-dev-setup-job):
#    - Cost-optimized development setup with CPU-only processing and comprehensive development coordination
#    - Advanced dev configuration with development settings, basic circuits, cost optimization, and comprehensive development intelligence
#    - Flexible setup optimization with development workflow, CPU processing, and comprehensive development intelligence
#    - Development intelligence with setup procedures, CPU support, development automation, and comprehensive development coordination
#    - Cost excellence with development setup, CPU workflows, development automation, and comprehensive development environment management
#
# 3. Staging Setup Job (veridis-zk-circuits-staging-setup-job):
#    - Production-like staging setup with GPU acceleration and comprehensive staging coordination
#    - Advanced staging configuration with GPU support, production circuits, validation features, and comprehensive staging intelligence
#    - Flexible setup optimization with staging workflow, GPU acceleration, and comprehensive staging intelligence
#    - Staging intelligence with setup procedures, GPU support, validation automation, and comprehensive staging coordination
#    - Validation excellence with staging setup, GPU workflows, staging automation, and comprehensive staging environment management
#
# ENTERPRISE ZK CIRCUITS SETUP JOB FEATURES:
# ==========================================
# Advanced Circuit Management and GPU Integration:
#   - Multi-tier setup architecture with production setup, development setup, staging setup, and comprehensive setup configurations
#   - Intelligent setup management with GPU acceleration, CUDA optimization, circuit compilation, and comprehensive setup decisions
#   - Setup discovery with GPU optimization, memory management, setup policies, and comprehensive setup analytics
#   - Performance management with parallel workers, batch processing, memory optimization, and comprehensive performance intelligence
#   - Setup processing tuning with GPU management, circuit optimization, performance algorithms, and intelligent setup optimization
#
# Comprehensive Security and Encryption Integration:
#   - Multi-tier security with circuit encryption, key management, access controls, and comprehensive security coordination
#   - Security optimization with encryption enforcement, key protection, audit logging, and comprehensive security intelligence
#   - Access management with circuit authentication, secure storage, permission validation, and comprehensive access coordination
#   - Business intelligence with security analytics, access correlation, setup optimization, and comprehensive strategic insights
#   - Security management with access policies, encryption optimization, security integration, and comprehensive security analytics
#
# Enterprise Performance and GPU Optimization:
#   - Multi-tier performance with GPU acceleration, CUDA optimization, memory management, and comprehensive performance coordination
#   - Performance optimization with intelligent GPU utilization, memory efficiency, parallel processing, and comprehensive performance intelligence
#   - Resource management with GPU limits, memory limits, CPU optimization, and comprehensive resource coordination
#   - Business intelligence with performance analytics, resource correlation, efficiency optimization, and comprehensive strategic insights
#   - Optimization management with performance tuning, resource allocation, efficiency monitoring, and comprehensive optimization analytics
#
# Advanced Circuit Compilation and Key Management:
#   - Multi-tier compilation with circuit compilation, key generation, artifact management, and comprehensive compilation coordination
#   - Compilation optimization with Cairo integration, Starknet support, Garaga acceleration, and comprehensive compilation intelligence
#   - Key management with secure generation, encrypted storage, access control, and comprehensive key coordination
#   - Business intelligence with compilation analytics, key correlation, circuit optimization, and comprehensive strategic insights
#   - Circuit management with compilation policies, key optimization, circuit integration, and comprehensive circuit analytics
#
# OPERATIONAL EXCELLENCE:
# ======================
# ZK Circuits Setup Job Lifecycle Management:
#   - Multi-Job deployment with production setup, development setup, staging setup, and comprehensive job coordination
#   - Intelligent job management with predictive analytics and setup utilization correlation
#   - Advanced monitoring with comprehensive job analytics and setup business intelligence
#   - Job validation with setup schema enforcement and job deployment safety checks
#   - Automated optimization with job pattern analysis and setup optimization recommendation engine
#
# Security Integration and Compliance:
#   - SOC 2 Type II setup controls with comprehensive audit requirements and setup logging
#   - GDPR setup compliance with data protection and privacy-preserving setup management
#   - ISO 27001 setup security management with information security and setup compliance integration
#   - NIST 800-190 container setup security with setup validation and compliance
#   - Zero-trust setup architecture with comprehensive encryption and setup authentication requirements
#
# Business Intelligence Integration:
#   - Setup analytics with cost correlation and job resource utilization optimization
#   - Performance analytics with setup experience optimization and job business intelligence
#   - Setup intelligence with processing pattern monitoring and job optimization recommendations
#   - Strategic planning with capacity management and job forecasting
#   - Business impact assessment with job performance correlation and setup tracking
#
# Developer Experience Excellence:
#   - Multi-environment job support with production setup, development setup, staging setup, and comprehensive job coordination
#   - Comprehensive documentation with job guides and setup troubleshooting procedures
#   - Environment-specific jobs with production, development, and staging support
#   - Testing integration with job development workflow and setup debugging capabilities
#   - Job monitoring with comprehensive tracking and setup correlation
#
# ==============================================================================
