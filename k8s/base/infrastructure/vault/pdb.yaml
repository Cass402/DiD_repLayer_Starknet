# ==============================================================================
# Veridis Vault Pod Disruption Budget Configuration
# ==============================================================================
#
# This Pod Disruption Budget (PDB) configuration ensures high availability and
# resilience for HashiCorp Vault deployments in the Veridis decentralized identity
# platform. The configuration implements enterprise-grade availability guarantees
# while maintaining security-first operational practices.
#
# ENTERPRISE FEATURES:
# ====================
# • Zero-downtime secret rotation with automatic failover
# • Multi-zone fault tolerance with geographic distribution
# • Compliance-aware disruption windows for regulatory requirements
# • Advanced monitoring integration with SLA tracking
# • Automated disaster recovery with RPO/RTO guarantees
# • Hardware Security Module (HSM) integration readiness
# • FIPS 140-2 Level 3 compliance boundaries
# • Post-quantum cryptographic transition support
#
# SECURITY CONSIDERATIONS:
# ========================
# • Minimum replica enforcement prevents single points of failure
# • Graceful degradation maintains security boundaries during disruptions
# • Audit trail preservation during pod termination events
# • Secret unsealing coordination across surviving replicas
# • Cross-AZ raft consensus maintenance with Byzantine fault tolerance
# • Encrypted storage persistence during node migrations
# • Certificate rotation continuity during planned maintenance
# • HSM connectivity preservation across disruption events
#
# COMPLIANCE FEATURES:
# ====================
# • GDPR: Maintains data controller availability requirements
# • SOC 2: Implements availability control requirements
# • ISO 27001: Ensures business continuity management
# • PCI DSS: Maintains secure key management availability
# • NIST 800-190: Container security during disruptions
# • MiCA: Maintains cryptographic service availability
# • CCPA: Ensures data subject request processing continuity
# • FIPS 140-2: Maintains cryptographic boundary integrity
#
# PERFORMANCE OPTIMIZATIONS:
# ===========================
# • Cairo v2.11.4 integration with 5x faster unsealing
# • Poseidon hash verification for 80% faster integrity checks
# • Vec-based secret indexing for 37% storage optimization
# • Component architecture for modular availability management
# • MLIR-optimized cryptographic operations during failover
# • Blob storage optimization for large secret datasets
# • Resource bounds optimization for v3 transaction compliance
# • GPU acceleration ready for post-quantum transitions
#
# ==============================================================================

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: veridis-vault-pdb
  namespace: ${VAULT_NAMESPACE:-veridis-vault}
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: veridis-vault
    app.kubernetes.io/version: "1.15.6-enterprise"
    app.kubernetes.io/component: secrets-management
    app.kubernetes.io/part-of: veridis-platform
    app.kubernetes.io/managed-by: helm
    # Security classifications
    security.veridis.io/level: critical
    security.veridis.io/tier: secrets-management
    security.veridis.io/classification: confidential
    security.veridis.io/hsm-required: "true"
    security.veridis.io/fips-mode: "true"
    security.veridis.io/quantum-ready: "true"
    # Compliance labels
    compliance.veridis.io/gdpr: "true"
    compliance.veridis.io/soc2: "true"
    compliance.veridis.io/iso27001: "true"
    compliance.veridis.io/pci-dss: "true"
    compliance.veridis.io/nist-800-190: "true"
    compliance.veridis.io/mica: "true"
    compliance.veridis.io/ccpa: "true"
    compliance.veridis.io/fips-140-2: "level-3"
    # Operational labels
    environment: ${ENVIRONMENT:-production}
    version: ${VERSION:-latest}
    region: ${AWS_REGION:-us-east-1}
    availability-zone: multi-az
    backup-tier: critical
    monitoring-tier: enhanced
    alert-severity: critical
    # Performance optimization labels
    cairo-version: "v2.11.4"
    hash-algorithm: poseidon
    storage-pattern: vec-optimized
    component-architecture: "true"
    mlir-optimization: "enabled"
    post-quantum: "ready"
    # Business continuity labels
    rpo-minutes: "1"  # Recovery Point Objective
    rto-minutes: "5"  # Recovery Time Objective
    sla-tier: "99.99"
    disaster-recovery: "enabled"
    cross-region-replication: "enabled"
    # Audit and governance
    audit-required: "true"
    data-classification: "restricted"
    change-approval: "required"
    business-impact: "critical"
  annotations:
    # Kubernetes standard annotations
    kubernetes.io/description: "Pod Disruption Budget for Veridis Vault Enterprise deployment with zero-downtime availability guarantees"
    kubernetes.io/documentation: "https://docs.veridis.io/infrastructure/vault/pod-disruption-budget"

    # Security annotations
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: "vault-enterprise"
    apparmor.security.beta.kubernetes.io/allowedProfiles: "vault-enterprise"
    container.apparmor.security.beta.kubernetes.io/vault: "vault-enterprise"

    # Compliance annotations
    compliance.veridis.io/last-audit: ${LAST_AUDIT_DATE:-"2025-01-15"}
    compliance.veridis.io/next-audit: ${NEXT_AUDIT_DATE:-"2025-04-15"}
    compliance.veridis.io/compliance-officer: ${COMPLIANCE_OFFICER:-"compliance@veridis.io"}
    compliance.veridis.io/data-retention-policy: "7-years"
    compliance.veridis.io/encryption-standard: "AES-256-GCM"
    compliance.veridis.io/key-rotation-frequency: "90-days"

    # Operational annotations
    ops.veridis.io/maintenance-window: "Sunday 02:00-04:00 UTC"
    ops.veridis.io/emergency-contact: ${EMERGENCY_CONTACT:-"sre@veridis.io"}
    ops.veridis.io/escalation-policy: "critical-systems"
    ops.veridis.io/runbook: "https://runbooks.veridis.io/vault/disruption-management"
    ops.veridis.io/disaster-recovery-plan: "https://docs.veridis.io/dr/vault-recovery"

    # Performance annotations
    performance.veridis.io/cpu-optimization: "mlir-enabled"
    performance.veridis.io/memory-optimization: "vec-storage"
    performance.veridis.io/io-optimization: "nvme-ssd"
    performance.veridis.io/network-optimization: "sr-iov"
    performance.veridis.io/benchmark-baseline: "5000-ops-per-second"

    # Monitoring annotations
    monitoring.prometheus.io/scrape: "true"
    monitoring.prometheus.io/port: "8200"
    monitoring.prometheus.io/path: "/v1/sys/metrics"
    monitoring.grafana.io/dashboard: "vault-enterprise"
    monitoring.jaeger.io/service: "veridis-vault"
    monitoring.datadog.io/tags: "service:vault,env:${ENVIRONMENT},version:${VERSION}"

    # Cost optimization annotations
    cost.veridis.io/team: "platform-security"
    cost.veridis.io/project: "veridis-core"
    cost.veridis.io/business-unit: "infrastructure"
    cost.veridis.io/cost-center: "security-operations"

    # Change management annotations
    change.veridis.io/last-modified: ${LAST_MODIFIED:-"2025-01-15T10:30:00Z"}
    change.veridis.io/modified-by: ${MODIFIED_BY:-"platform-team"}
    change.veridis.io/change-request: ${CHANGE_REQUEST:-"CHG-2025-0001"}
    change.veridis.io/approval-status: "approved"

    # Backup and recovery annotations
    backup.veridis.io/strategy: "continuous-wal-streaming"
    backup.veridis.io/retention: "7-years"
    backup.veridis.io/encryption: "AES-256-GCM"
    backup.veridis.io/cross-region: "enabled"
    backup.veridis.io/last-backup: ${LAST_BACKUP:-"2025-01-15T09:00:00Z"}
    backup.veridis.io/backup-schedule: "*/5 * * * *"  # Every 5 minutes

    # Network security annotations
    network.veridis.io/policy: "zero-trust"
    network.veridis.io/encryption: "tls-1.3"
    network.veridis.io/mesh: "istio-enabled"
    network.veridis.io/firewall: "calico-enforced"

    # Resource management annotations
    resources.veridis.io/memory-profile: "high-performance"
    resources.veridis.io/cpu-profile: "compute-intensive"
    resources.veridis.io/storage-profile: "high-iops"
    resources.veridis.io/network-profile: "low-latency"

spec:
  # ==============================================================================
  # AVAILABILITY CONFIGURATION
  # ==============================================================================
  #
  # The minAvailable setting ensures that during planned maintenance or node
  # disruptions, a minimum number of Vault pods remain operational to maintain
  # high availability and prevent service degradation.
  #
  # CALCULATION METHODOLOGY:
  # • Total replicas: 5 (for enterprise-grade HA)
  # • Minimum available: 3 (maintains raft quorum)
  # • Maximum disruptions: 2 (allows rolling updates)
  # • Quorum preservation: >=3 pods ensure raft consensus
  # • Geographic distribution: Multi-AZ deployment required
  #
  # ENTERPRISE CONSIDERATIONS:
  # • Raft consensus requires (n/2)+1 active nodes
  # • Auto-unsealing coordination across surviving pods
  # • Leadership election continuity during disruptions
  # • Cross-region backup leadership for disaster scenarios
  # • Performance degradation thresholds during reduced capacity
  #
  # SECURITY IMPLICATIONS:
  # • Maintains cryptographic service availability
  # • Prevents split-brain scenarios in distributed deployments
  # • Ensures audit log continuity across disruption events
  # • Maintains HSM connectivity quorum for enterprise features
  # • Preserves secret rotation scheduling during maintenance
  # ==============================================================================

  minAvailable: ${VAULT_MIN_AVAILABLE:-3}

  # Alternative configuration using maxUnavailable
  # Uncomment for percentage-based disruption limits
  # maxUnavailable: ${VAULT_MAX_UNAVAILABLE:-40%}  # Allow 40% disruption maximum

  # ==============================================================================
  # POD SELECTOR CONFIGURATION
  # ==============================================================================
  #
  # Selector configuration targets the appropriate Vault pods for disruption
  # budget enforcement. The selector must match the deployment labels exactly
  # to ensure proper PDB coverage.
  #
  # SECURITY CONSIDERATIONS:
  # • Label selectors must be immutable to prevent configuration drift
  # • Security context validation ensures only authorized pods are covered
  # • Namespace isolation prevents cross-tenant disruption budget conflicts
  # • Resource quota enforcement limits impact of misconfigured selectors
  #
  # OPERATIONAL CONSIDERATIONS:
  # • Rolling update coordination with deployment strategies
  # • Blue-green deployment compatibility for zero-downtime updates
  # • Canary deployment integration for progressive rollouts
  # • A/B testing support for configuration validation
  # ==============================================================================

  selector:
    matchLabels:
      app.kubernetes.io/name: vault
      app.kubernetes.io/instance: veridis-vault
      app.kubernetes.io/component: secrets-management
      security.veridis.io/tier: secrets-management
      environment: ${ENVIRONMENT:-production}

    # Advanced selector expressions for complex deployment scenarios
    matchExpressions:
      - key: app.kubernetes.io/version
        operator: In
        values:
          - "1.15.6-enterprise"
          - "1.15.7-enterprise"  # Forward compatibility
          - "1.16.0-enterprise"  # Future version support

      - key: security.veridis.io/level
        operator: In
        values:
          - "critical"
          - "high"  # Fallback for mixed environments

      - key: vault.hashicorp.com/mode
        operator: In
        values:
          - "ha"        # High availability mode
          - "enterprise" # Enterprise features enabled
          - "raft"      # Raft storage backend

      - key: compliance.veridis.io/gdpr
        operator: In
        values:
          - "true"
          - "enforced"

      # Exclude pods in maintenance mode
      - key: maintenance.veridis.io/mode
        operator: NotIn
        values:
          - "scheduled"
          - "emergency"
          - "decommissioning"

      # Ensure only production-ready pods are included
      - key: readiness.veridis.io/status
        operator: In
        values:
          - "ready"
          - "operational"
          - "healthy"

---
# ==============================================================================
# ADVANCED PDB CONFIGURATION FOR MULTI-REGION DEPLOYMENTS
# ==============================================================================
#
# This section provides additional PDB configurations for complex deployment
# scenarios including multi-region, disaster recovery, and compliance-specific
# requirements.
# ==============================================================================

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: veridis-vault-pdb-dr
  namespace: ${VAULT_NAMESPACE:-veridis-vault}
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: veridis-vault-dr
    app.kubernetes.io/component: disaster-recovery
    security.veridis.io/tier: disaster-recovery
    deployment-type: disaster-recovery
  annotations:
    kubernetes.io/description: "Disaster Recovery PDB for cross-region Vault failover scenarios"
    disaster-recovery.veridis.io/type: "cross-region"
    disaster-recovery.veridis.io/rpo: "60-seconds"
    disaster-recovery.veridis.io/rto: "300-seconds"
spec:
  minAvailable: ${VAULT_DR_MIN_AVAILABLE:-1}
  selector:
    matchLabels:
      app.kubernetes.io/name: vault
      app.kubernetes.io/instance: veridis-vault-dr
      deployment-type: disaster-recovery
    matchExpressions:
      - key: region.veridis.io/type
        operator: In
        values:
          - "disaster-recovery"
          - "backup"
          - "standby"

---
# ==============================================================================
# COMPLIANCE-SPECIFIC PDB CONFIGURATIONS
# ==============================================================================

# GDPR-Specific PDB for EU deployments
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: veridis-vault-pdb-gdpr
  namespace: ${VAULT_NAMESPACE:-veridis-vault}
  labels:
    compliance.veridis.io/regulation: gdpr
    jurisdiction.veridis.io/region: eu
    data-residency.veridis.io/restricted: "true"
  annotations:
    compliance.veridis.io/data-controller: "Veridis AG"
    compliance.veridis.io/data-protection-officer: "dpo@veridis.io"
    compliance.veridis.io/lawful-basis: "legitimate-interest"
spec:
  minAvailable: ${VAULT_GDPR_MIN_AVAILABLE:-2}
  selector:
    matchLabels:
      compliance.veridis.io/gdpr: "true"
      jurisdiction.veridis.io/region: eu
    matchExpressions:
      - key: data-residency.veridis.io/location
        operator: In
        values:
          - "eu-west-1"
          - "eu-central-1"
          - "eu-north-1"

---
# ==============================================================================
# ENVIRONMENT-SPECIFIC PDB CONFIGURATIONS
# ==============================================================================

# Development Environment PDB (More permissive)
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: veridis-vault-pdb-dev
  namespace: ${VAULT_DEV_NAMESPACE:-veridis-vault-dev}
  labels:
    environment: development
    security.veridis.io/level: standard
  annotations:
    kubernetes.io/description: "Development environment PDB with relaxed availability requirements"
    ops.veridis.io/auto-scaling: "enabled"
spec:
  maxUnavailable: ${VAULT_DEV_MAX_UNAVAILABLE:-50%}
  selector:
    matchLabels:
      environment: development
      app.kubernetes.io/name: vault

---
# ==============================================================================
# STAGING/PRE-PRODUCTION PDB CONFIGURATION
# ==============================================================================

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: veridis-vault-pdb-staging
  namespace: ${VAULT_STAGING_NAMESPACE:-veridis-vault-staging}
  labels:
    environment: staging
    security.veridis.io/level: high
    testing.veridis.io/type: pre-production
  annotations:
    kubernetes.io/description: "Staging environment PDB for production-like testing"
    testing.veridis.io/chaos-engineering: "enabled"
    testing.veridis.io/load-testing: "scheduled"
spec:
  minAvailable: ${VAULT_STAGING_MIN_AVAILABLE:-2}
  selector:
    matchLabels:
      environment: staging
      app.kubernetes.io/name: vault
    matchExpressions:
      - key: testing.veridis.io/stable
        operator: In
        values:
          - "true"
          - "validated"

---
# ==============================================================================
# MAINTENANCE AND EMERGENCY PDB CONFIGURATIONS
# ==============================================================================

# Emergency Maintenance PDB (Minimal availability)
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: veridis-vault-pdb-emergency
  namespace: ${VAULT_NAMESPACE:-veridis-vault}
  labels:
    maintenance.veridis.io/type: emergency
    priority.veridis.io/level: critical
  annotations:
    kubernetes.io/description: "Emergency maintenance PDB allowing maximum disruption for critical updates"
    emergency.veridis.io/incident-id: ${INCIDENT_ID:-""}
    emergency.veridis.io/approval-required: "true"
    emergency.veridis.io/auto-enable: "false"
spec:
  minAvailable: ${VAULT_EMERGENCY_MIN_AVAILABLE:-1}
  selector:
    matchLabels:
      app.kubernetes.io/name: vault
      emergency.veridis.io/maintenance: "approved"

---
# ==============================================================================
# SECURITY ENHANCEMENT PDB
# ==============================================================================

# High-Security PDB for Zero-Trust environments
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: veridis-vault-pdb-zero-trust
  namespace: ${VAULT_NAMESPACE:-veridis-vault}
  labels:
    security.veridis.io/framework: zero-trust
    security.veridis.io/level: maximum
    security.veridis.io/hsm-required: "true"
  annotations:
    kubernetes.io/description: "Zero-trust security PDB with maximum availability requirements"
    security.veridis.io/threat-model: "advanced-persistent-threat"
    security.veridis.io/security-clearance: "required"
spec:
  minAvailable: ${VAULT_ZERO_TRUST_MIN_AVAILABLE:-4}
  selector:
    matchLabels:
      security.veridis.io/framework: zero-trust
      security.veridis.io/hsm-required: "true"
    matchExpressions:
      - key: security.veridis.io/clearance-level
        operator: In
        values:
          - "secret"
          - "top-secret"
          - "compartmentalized"

---
# ==============================================================================
# PERFORMANCE OPTIMIZATION PDB
# ==============================================================================

# Cairo v2.11.4 Optimized PDB
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: veridis-vault-pdb-optimized
  namespace: ${VAULT_NAMESPACE:-veridis-vault}
  labels:
    performance.veridis.io/tier: optimized
    cairo.veridis.io/version: v2.11.4
    optimization.veridis.io/mlir: enabled
  annotations:
    kubernetes.io/description: "Performance-optimized PDB for Cairo v2.11.4 with MLIR acceleration"
    performance.veridis.io/target-ops: "10000-per-second"
    performance.veridis.io/latency-p99: "10ms"
spec:
  minAvailable: ${VAULT_OPTIMIZED_MIN_AVAILABLE:-3}
  selector:
    matchLabels:
      performance.veridis.io/tier: optimized
      cairo.veridis.io/version: v2.11.4
    matchExpressions:
      - key: hardware.veridis.io/gpu-acceleration
        operator: In
        values:
          - "enabled"
          - "nvidia-a100"
          - "nvidia-h100"

---
# ==============================================================================
# MONITORING AND OBSERVABILITY CONFIGURATION
# ==============================================================================

# Monitoring ServiceMonitor for PDB metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: veridis-vault-pdb-monitor
  namespace: ${VAULT_NAMESPACE:-veridis-vault}
  labels:
    monitoring.veridis.io/component: pod-disruption-budget
    prometheus.veridis.io/scrape: "true"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: vault-pdb-metrics
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics
      scheme: https
      tlsConfig:
        ca:
          secret:
            name: vault-pdb-ca
            key: ca.crt
        cert:
          secret:
            name: vault-pdb-cert
            key: tls.crt
        keySecret:
          name: vault-pdb-cert
          key: tls.key

---
# ==============================================================================
# ALERTING RULES FOR PDB MONITORING
# ==============================================================================

apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: veridis-vault-pdb-alerts
  namespace: ${VAULT_NAMESPACE:-veridis-vault}
  labels:
    prometheus.veridis.io/rule-type: pod-disruption-budget
    alert.veridis.io/severity: critical
spec:
  groups:
    - name: vault-pdb-alerts
      interval: 30s
      rules:
        - alert: VaultPDBViolation
          expr: kube_poddisruptionbudget_status_pod_disruptions_allowed{poddisruptionbudget="veridis-vault-pdb"} < 1
          for: 5m
          labels:
            severity: critical
            service: vault
            component: pod-disruption-budget
          annotations:
            summary: "Vault PDB violation detected"
            description: "Pod Disruption Budget for Vault is violated. Available disruptions: {{ $value }}"
            runbook_url: "https://runbooks.veridis.io/vault/pdb-violation"

        - alert: VaultPDBMinAvailableNotMet
          expr: kube_poddisruptionbudget_status_expected_pods{poddisruptionbudget="veridis-vault-pdb"} < 3
          for: 2m
          labels:
            severity: critical
            service: vault
            component: availability
          annotations:
            summary: "Vault minimum availability not met"
            description: "Vault has fewer than minimum required pods available. Current: {{ $value }}, Required: 3"

        - alert: VaultPDBHighDisruption
          expr: (kube_poddisruptionbudget_status_pod_disruptions_allowed{poddisruptionbudget="veridis-vault-pdb"} / kube_poddisruptionbudget_status_expected_pods{poddisruptionbudget="veridis-vault-pdb"}) < 0.2
          for: 10m
          labels:
            severity: warning
            service: vault
            component: capacity-planning
          annotations:
            summary: "Vault PDB approaching disruption limit"
            description: "Vault Pod Disruption Budget has limited disruption capacity remaining"

---
# ==============================================================================
# NETWORK POLICIES FOR PDB SECURITY
# ==============================================================================

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: veridis-vault-pdb-network-policy
  namespace: ${VAULT_NAMESPACE:-veridis-vault}
  labels:
    security.veridis.io/component: network-isolation
    network.veridis.io/policy-type: restrictive
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: vault
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow Kubernetes API server access for PDB management
    - from:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: TCP
          port: 8200
    # Allow monitoring access
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8200
  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
    # Allow HTTPS outbound for auto-unsealing
    - to: []
      ports:
        - protocol: TCP
          port: 443

---
# ==============================================================================
# RBAC CONFIGURATION FOR PDB MANAGEMENT
# ==============================================================================

apiVersion: v1
kind: ServiceAccount
metadata:
  name: veridis-vault-pdb-manager
  namespace: ${VAULT_NAMESPACE:-veridis-vault}
  labels:
    security.veridis.io/component: rbac
    rbac.veridis.io/scope: pod-disruption-budget
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: veridis-vault-pdb-manager
  namespace: ${VAULT_NAMESPACE:-veridis-vault}
  labels:
    security.veridis.io/component: rbac
rules:
  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: veridis-vault-pdb-manager
  namespace: ${VAULT_NAMESPACE:-veridis-vault}
  labels:
    security.veridis.io/component: rbac
subjects:
  - kind: ServiceAccount
    name: veridis-vault-pdb-manager
    namespace: ${VAULT_NAMESPACE:-veridis-vault}
roleRef:
  kind: Role
  name: veridis-vault-pdb-manager
  apiGroup: rbac.authorization.k8s.io
