# ==============================================================================
# Veridis Decentralized Identity Protocol - HashiCorp Vault ConfigMap
# ==============================================================================
#
# This manifest defines comprehensive HashiCorp Vault configuration for the
# Veridis deployment, providing:
#
# ENTERPRISE VAULT CONFIGURATION:
#   • Advanced vault server configuration with comprehensive security and performance
#   • Multi-tier configuration architecture with primary, standby, and agent configurations
#   • Comprehensive storage backend configuration with encryption and high availability
#   • Advanced audit logging with compliance integration and security monitoring
#   • Enterprise-grade policy management with fine-grained access control and governance
#
# VAULT CRYPTOGRAPHIC CONFIGURATION:
#   • Zero-knowledge proof key management with secure generation and lifecycle
#   • Blockchain key management with multi-signature support and threshold cryptography
#   • Identity protocol secrets with authentication tokens and session management
#   • Advanced PKI configuration with certificate lifecycle and automated rotation
#   • Secure enclave integration with hardware security module configuration
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II configuration controls with comprehensive audit and validation
#   • GDPR encryption configuration with data protection and privacy guarantees
#   • ISO 27001 cryptographic configuration with security management integration
#   • PCI DSS key management configuration for cardholder data environment
#   • FIPS 140-2 Level 3 configuration with validated cryptographic modules
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent configuration management with automated validation and optimization
#   • Predictive configuration with capacity planning and performance tuning
#   • Advanced monitoring integration with configuration analytics and intelligence
#   • Comprehensive backup and recovery configuration with disaster preparedness
#   • Business continuity configuration with failover and redundancy optimization
#
# VAULT BUSINESS INTELLIGENCE:
#   • Configuration analytics with usage patterns and optimization recommendations
#   • Performance configuration with latency optimization and throughput enhancement
#   • Security configuration with threat detection and anomaly prevention
#   • Cost optimization configuration with resource efficiency and capacity planning
#   • Compliance configuration with automated validation and audit trail generation
#
# ==============================================================================

# ==============================================================================
# Vault Primary Configuration - Main Server Configuration
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  namespace: veridis-secrets

  # Core Vault configuration identification labels
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "1.15.6"
    app.kubernetes.io/component: primary-config
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Configuration specific classification
    config.veridis.xyz/type: vault-primary
    config.veridis.xyz/tier: enterprise
    config.veridis.xyz/role: server-configuration
    config.veridis.xyz/security-level: maximum
    config.veridis.xyz/compliance-level: strict

    # Vault configuration classification
    vault.veridis.xyz/config-type: server
    vault.veridis.xyz/ha-mode: cluster
    vault.veridis.xyz/storage-backend: integrated
    vault.veridis.xyz/audit-enabled: comprehensive
    vault.veridis.xyz/telemetry-enabled: advanced

    # Security configuration classification
    security.veridis.xyz/encryption-config: enterprise
    security.veridis.xyz/tls-config: tls13
    security.veridis.xyz/hsm-config: enabled
    security.veridis.xyz/audit-config: comprehensive
    security.veridis.xyz/access-control-config: rbac

    # Performance configuration classification
    performance.veridis.xyz/optimization-level: maximum
    performance.veridis.xyz/cache-config: intelligent
    performance.veridis.xyz/connection-config: optimized
    performance.veridis.xyz/throughput-config: high
    performance.veridis.xyz/latency-config: ultra-low

    # Business configuration classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/impact: security-foundation
    business.veridis.xyz/cost-tier: premium
    business.veridis.xyz/sla-config: maximum
    business.veridis.xyz/availability-config: ultra-high

    # Operational configuration labels
    veridis.xyz/environment: production
    veridis.xyz/team: security-engineering
    veridis.xyz/cost-center: security-infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "configuration-control"
    compliance.veridis.xyz/gdpr: "encryption-configuration"
    compliance.veridis.xyz/iso27001: "security-configuration"
    compliance.veridis.xyz/pci-dss: "key-management-configuration"
    compliance.veridis.xyz/fips-140-2: "cryptographic-configuration"
    governance.veridis.xyz/policy-enforcement: "strict"

    # Configuration monitoring and validation
    monitoring.veridis.xyz/config-validation: "enabled"
    monitoring.veridis.xyz/config-monitoring: "comprehensive"
    monitoring.veridis.xyz/drift-detection: "enabled"
    monitoring.veridis.xyz/change-tracking: "detailed"

  annotations:
    # Configuration purpose and specifications
    veridis.xyz/description: "Comprehensive Vault primary configuration with enterprise security, performance optimization, and compliance integration"
    veridis.xyz/purpose: "Provides complete Vault server configuration with advanced security, high availability, and business intelligence"
    veridis.xyz/scope: "Primary Vault configuration including server settings, storage, audit, telemetry, and policy management"

    # Configuration architecture and design
    config.veridis.xyz/architecture: "Enterprise Vault configuration with comprehensive security controls and performance optimization"
    config.veridis.xyz/design-pattern: "High-availability configuration with clustering, encryption, and advanced monitoring"
    config.veridis.xyz/security-model: "Zero-trust configuration with comprehensive encryption and access controls"
    config.veridis.xyz/performance-model: "Ultra-high performance with optimization and intelligent resource management"

    # Security configuration specifications
    security.veridis.xyz/encryption-specification: "Enterprise encryption with AES-256-GCM and hardware acceleration"
    security.veridis.xyz/tls-specification: "TLS 1.3 with enterprise cipher suites and certificate management"
    security.veridis.xyz/hsm-specification: "Hardware security module integration with FIPS 140-2 Level 3 validation"
    security.veridis.xyz/audit-specification: "Comprehensive audit logging with integrity protection and compliance"

    # Performance configuration specifications
    performance.veridis.xyz/optimization-specification: "Maximum performance optimization with intelligent tuning and resource management"
    performance.veridis.xyz/cache-specification: "Intelligent caching with optimization and consistency management"
    performance.veridis.xyz/connection-specification: "Connection optimization with pooling and keep-alive management"
    performance.veridis.xyz/latency-specification: "Ultra-low latency with hardware acceleration and protocol optimization"

    # Business configuration specifications
    business.veridis.xyz/availability-specification: "Ultra-high availability with clustering and automated failover"
    business.veridis.xyz/sla-specification: "Maximum SLA with 99.99% availability and performance guarantees"
    business.veridis.xyz/cost-specification: "Premium cost tier with enterprise features and optimization"
    business.veridis.xyz/continuity-specification: "Business continuity with disaster recovery and failover procedures"

    # Compliance configuration specifications
    compliance.veridis.xyz/regulatory-specification: "Multi-framework compliance with automated validation and reporting"
    compliance.veridis.xyz/audit-specification: "Comprehensive audit requirements with detailed logging and validation"
    compliance.veridis.xyz/risk-specification: "Risk management with threat analysis and mitigation procedures"
    compliance.veridis.xyz/policy-specification: "Policy enforcement with validation and compliance tracking"

    # Operational configuration specifications
    operations.veridis.xyz/automation-specification: "Full automation with intelligent management and human oversight"
    operations.veridis.xyz/monitoring-specification: "Comprehensive monitoring with analytics and intelligence"
    operations.veridis.xyz/maintenance-specification: "Automated maintenance with validation and optimization"
    operations.veridis.xyz/incident-specification: "Incident response with detection and recovery procedures"

    # Configuration management specifications
    config.veridis.xyz/validation-specification: "Comprehensive validation with syntax checking and security analysis"
    config.veridis.xyz/versioning-specification: "Configuration versioning with change tracking and rollback capabilities"
    config.veridis.xyz/drift-specification: "Configuration drift detection with automated correction and alerting"
    config.veridis.xyz/optimization-specification: "Configuration optimization with performance tuning and efficiency"

    # Documentation and procedures
    veridis.xyz/owner: "security-team@veridis.xyz"
    veridis.xyz/config-admin: "vault-config-admin@veridis.xyz"
    veridis.xyz/escalation: "security-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "security-oncall@veridis.xyz"

    # Documentation references
    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/vault/configuration"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/vault/configuration-management"
    veridis.xyz/security-docs: "https://security.veridis.xyz/vault/configuration"
    veridis.xyz/compliance-docs: "https://compliance.veridis.xyz/vault/configuration"

# Vault primary configuration data
data:
  # ==============================================================================
  # Main Vault Server Configuration
  # ==============================================================================
  vault.hcl: |
    # ==============================================================================
    # Veridis Vault Primary Configuration
    # Enterprise HashiCorp Vault Configuration for Decentralized Identity Protocol
    # ==============================================================================

    # ==============================================================================
    # Core Server Configuration
    # ==============================================================================

    # Cluster configuration
    cluster_name = "veridis-vault-cluster"
    cluster_addr = "https://[::]:8201"
    api_addr = "https://[::]:8200"

    # Disable memory lock for containerized environments
    disable_mlock = false

    # Enable raw endpoint for health checks
    raw_storage_endpoint = true

    # Disable swap to prevent secrets from being swapped to disk
    disable_swap = true

    # Plugin directory
    plugin_directory = "/vault/plugins"

    # ==============================================================================
    # Storage Backend Configuration - Integrated Storage (Raft)
    # ==============================================================================
    storage "raft" {
      path = "/vault/data"
      node_id = "${HOSTNAME}"

      # Performance optimization
      performance_multiplier = 5

      # Snapshot configuration
      snapshot_threshold = 8192
      snapshot_interval = "30s"

      # Autopilot configuration for automated cluster management
      autopilot {
        cleanup_dead_servers = true
        last_contact_threshold = "10s"
        max_trailing_logs = 250
        min_quorum = 3
        server_stabilization_time = "10s"
      }

      # Advanced Raft configuration
      max_entry_size = "1048576"  # 1MB
      trailing_logs = 10000
      snapshot_compression = true

      # Retry configuration
      retry_join {
        leader_api_addr = "https://vault-primary-0.vault-headless.veridis-secrets.svc.cluster.local:8200"
        leader_ca_cert_file = "/vault/tls/ca.crt"
        leader_client_cert_file = "/vault/tls/tls.crt"
        leader_client_key_file = "/vault/tls/tls.key"
      }

      retry_join {
        leader_api_addr = "https://vault-primary-1.vault-headless.veridis-secrets.svc.cluster.local:8200"
        leader_ca_cert_file = "/vault/tls/ca.crt"
        leader_client_cert_file = "/vault/tls/tls.crt"
        leader_client_key_file = "/vault/tls/tls.key"
      }

      retry_join {
        leader_api_addr = "https://vault-primary-2.vault-headless.veridis-secrets.svc.cluster.local:8200"
        leader_ca_cert_file = "/vault/tls/ca.crt"
        leader_client_cert_file = "/vault/tls/tls.crt"
        leader_client_key_file = "/vault/tls/tls.key"
      }
    }

    # ==============================================================================
    # HSM Configuration (Hardware Security Module)
    # ==============================================================================
    seal "pkcs11" {
      lib = "/opt/cloudhsm/lib/libcloudhsm_pkcs11.so"
      slot = "0"
      pin = "file:///vault/hsm/pin"
      key_label = "veridis-vault-key"
      hmac_key_label = "veridis-vault-hmac-key"
      generate_key = true

      # Performance optimization
      token_label = "veridis-hsm-token"

      # Advanced HSM configuration
      max_parallel = 4
      force_rw_session = true
    }

    # ==============================================================================
    # Network Listener Configuration
    # ==============================================================================
    listener "tcp" {
      address = "[::]:8200"
      cluster_address = "[::]:8201"

      # TLS Configuration
      tls_cert_file = "/vault/tls/tls.crt"
      tls_key_file = "/vault/tls/tls.key"
      tls_client_ca_file = "/vault/tls/ca.crt"

      # Advanced TLS settings
      tls_min_version = "tls13"
      tls_cipher_suites = "TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256"
      tls_prefer_server_cipher_suites = true
      tls_require_and_verify_client_cert = false
      tls_client_cert_auth = false

      # Performance optimization
      tls_disable_client_certs = false

      # Proxy configuration
      proxy_protocol_behavior = "use_always"
      proxy_protocol_authorized_addrs = "127.0.0.1:8200,::1:8200"

      # HTTP configuration
      http_idle_timeout = "5m"
      http_read_header_timeout = "10s"
      http_read_timeout = "30s"
      http_write_timeout = "0"

      # Custom response headers for security
      custom_response_headers {
        "Strict-Transport-Security" = ["max-age=31536000; includeSubDomains"]
        "X-Frame-Options" = ["DENY"]
        "X-Content-Type-Options" = ["nosniff"]
        "X-XSS-Protection" = ["1; mode=block"]
        "Referrer-Policy" = ["strict-origin-when-cross-origin"]
        "Content-Security-Policy" = ["default-src 'self'"]
      }
    }

    # ==============================================================================
    # Audit Configuration
    # ==============================================================================
    audit "file" {
      file_path = "/vault/audit/audit.log"
      log_raw = false
      hmac_accessor = true
      mode = "0600"
      format = "json"

      # Performance optimization
      elide_list_responses = true
    }

    # Syslog audit for centralized logging
    audit "syslog" {
      facility = "LOCAL0"
      tag = "vault-audit"
      log_raw = false
      hmac_accessor = true
      format = "json"

      # Syslog configuration
      address = "vault-syslog.veridis-secrets.svc.cluster.local:514"
      protocol = "tcp"
    }

    # ==============================================================================
    # Entropy Augmentation
    # ==============================================================================
    entropy "seal" {
      mode = "augmentation"
    }

    # ==============================================================================
    # Telemetry Configuration
    # ==============================================================================
    telemetry {
      prometheus_retention_time = "24h"
      disable_hostname = false
      enable_hostname_label = true

      # Metrics configuration
      circonus_api_token = ""
      circonus_api_app = "vault"
      circonus_api_url = "https://api.circonus.com/v2"
      circonus_submission_interval = "10s"
      circonus_submission_url = ""
      circonus_check_id = ""
      circonus_check_force_metric_activation = false
      circonus_check_instance_id = ""
      circonus_check_search_tag = ""
      circonus_check_display_name = ""
      circonus_check_tags = ""
      circonus_broker_id = ""
      circonus_broker_select_tag = ""

      # Datadog integration
      dogstatsd_addr = "127.0.0.1:8125"
      dogstatsd_tags = ["environment:production", "service:vault", "team:security"]

      # StatsD configuration
      statsd_address = "127.0.0.1:8125"

      # Stackdriver configuration
      stackdriver_project_id = "veridis-vault-monitoring"
      stackdriver_location = "global"
      stackdriver_namespace = "vault"
      stackdriver_debug_logs = false
    }

    # ==============================================================================
    # API Configuration
    # ==============================================================================
    api_addr = "https://vault-primary.veridis-secrets.svc.cluster.local:8200"
    cluster_addr = "https://vault-primary.veridis-secrets.svc.cluster.local:8201"

    # ==============================================================================
    # Cache Configuration
    # ==============================================================================
    cache {
      size = "32GB"
    }

    # ==============================================================================
    # Log Configuration
    # ==============================================================================
    log_level = "INFO"
    log_format = "json"
    log_file = "/vault/logs/vault.log"
    log_rotate_duration = "24h"
    log_rotate_max_files = 30

    # ==============================================================================
    # Default Lease Configuration
    # ==============================================================================
    default_lease_ttl = "1h"
    max_lease_ttl = "24h"

    # ==============================================================================
    # UI Configuration
    # ==============================================================================
    ui = true

    # ==============================================================================
    # Plugin Configuration
    # ==============================================================================
    plugin_directory = "/vault/plugins"

    # ==============================================================================
    # Sentinel Integration (Enterprise Feature)
    # ==============================================================================
    sentinel {
      additional_enabled_modules = ["http", "json", "base64", "time"]
    }

    # ==============================================================================
    # License Configuration (Enterprise)
    # ==============================================================================
    license_path = "/vault/license/vault.hclic"

    # ==============================================================================
    # Service Registration Configuration
    # ==============================================================================
    service_registration "kubernetes" {
      namespace = "veridis-secrets"
      pod_name = "${POD_NAME}"
    }

  # ==============================================================================
  # Vault Performance and Optimization Parameters
  # ==============================================================================
  log_level: "INFO"
  log_format: "json"
  max_lease_ttl: "24h"
  default_lease_ttl: "1h"
  cache_size: "32GB"
  hsm_enabled: "true"
  hsm_library_path: "/opt/cloudhsm/lib/libcloudhsm_pkcs11.so"

  # ==============================================================================
  # Vault Business Configuration Parameters
  # ==============================================================================
  environment: "production"
  business_unit: "identity-protocol"
  cost_center: "security-infrastructure"
  compliance_mode: "strict"
  audit_enabled: "true"

  # ==============================================================================
  # Vault Security Configuration Parameters
  # ==============================================================================
  tls_min_version: "tls13"
  tls_cipher_suites: "TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256"
  encryption_algorithm: "AES256-GCM"
  key_rotation_interval: "30d"

  # ==============================================================================
  # Vault Performance Configuration Parameters
  # ==============================================================================
  performance_multiplier: "5"
  connection_timeout: "30s"
  read_timeout: "30s"
  write_timeout: "30s"
  idle_timeout: "5m"

---
# ==============================================================================
# Vault Standby Configuration - Read Replica Configuration
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-standby-config
  namespace: veridis-secrets

  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "1.15.6"
    app.kubernetes.io/component: standby-config
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    config.veridis.xyz/type: vault-standby
    config.veridis.xyz/tier: enterprise
    config.veridis.xyz/role: standby-configuration
    config.veridis.xyz/optimization-level: read-optimized

    vault.veridis.xyz/config-type: standby
    vault.veridis.xyz/ha-mode: standby
    vault.veridis.xyz/performance-mode: read-optimized

    business.veridis.xyz/criticality: business-critical
    business.veridis.xyz/impact: read-performance
    business.veridis.xyz/cost-tier: standard

    veridis.xyz/environment: production
    veridis.xyz/team: security-engineering
    veridis.xyz/cost-center: security-infrastructure
    veridis.xyz/business-unit: identity-protocol

    compliance.veridis.xyz/soc2: "standby-configuration-control"
    compliance.veridis.xyz/gdpr: "standby-encryption-configuration"
    monitoring.veridis.xyz/config-validation: "enabled"

  annotations:
    veridis.xyz/description: "Vault standby configuration optimized for read performance and load distribution"
    veridis.xyz/purpose: "Provides read-optimized Vault configuration for standby instances with performance tuning"
    veridis.xyz/scope: "Standby Vault configuration including read optimization, caching, and performance tuning"

    config.veridis.xyz/standby-strategy: "Read-optimized configuration with performance tuning and resource efficiency"
    config.veridis.xyz/read-optimization: "Read performance optimization with connection pooling and intelligent caching"
    config.veridis.xyz/resource-optimization: "Resource optimization with efficient allocation and utilization"

    veridis.xyz/owner: "security-team@veridis.xyz"
    veridis.xyz/standby-config-admin: "vault-standby-config-admin@veridis.xyz"
    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/vault/standby-configuration"

data:
  vault-standby.hcl: |
    # ==============================================================================
    # Veridis Vault Standby Configuration
    # Read-Optimized HashiCorp Vault Configuration for Load Distribution
    # ==============================================================================

    # Cluster configuration
    cluster_name = "veridis-vault-cluster"
    cluster_addr = "https://[::]:8201"
    api_addr = "https://[::]:8200"

    # Disable memory lock
    disable_mlock = false

    # Performance optimization for read workloads
    disable_cache = false
    cache {
      size = "16GB"
    }

    # Storage backend - read-only mode
    storage "raft" {
      path = "/vault/data"
      node_id = "${HOSTNAME}"

      # Read-optimized configuration
      performance_multiplier = 3

      # Reduced snapshot frequency for standby
      snapshot_threshold = 16384
      snapshot_interval = "60s"

      # Join primary cluster
      retry_join {
        leader_api_addr = "https://vault-primary.veridis-secrets.svc.cluster.local:8200"
        leader_ca_cert_file = "/vault/tls/ca.crt"
        leader_client_cert_file = "/vault/tls/tls.crt"
        leader_client_key_file = "/vault/tls/tls.key"
      }
    }

    # Network listener with read optimization
    listener "tcp" {
      address = "[::]:8200"
      cluster_address = "[::]:8201"

      # TLS Configuration
      tls_cert_file = "/vault/tls/tls.crt"
      tls_key_file = "/vault/tls/tls.key"
      tls_client_ca_file = "/vault/tls/ca.crt"
      tls_min_version = "tls13"

      # Optimized for read workloads
      http_read_timeout = "60s"
      http_write_timeout = "30s"
      http_idle_timeout = "10m"
    }

    # Telemetry configuration
    telemetry {
      prometheus_retention_time = "12h"
      disable_hostname = false
      enable_hostname_label = true
      dogstatsd_tags = ["environment:production", "service:vault-standby", "team:security"]
    }

    # Logging configuration
    log_level = "INFO"
    log_format = "json"

    # Lease configuration
    default_lease_ttl = "2h"
    max_lease_ttl = "12h"

    # UI disabled for standby
    ui = false

    # Service registration
    service_registration "kubernetes" {
      namespace = "veridis-secrets"
      pod_name = "${POD_NAME}"
    }

---
# ==============================================================================
# Vault Agent Configuration - Sidecar Agent Configuration
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-agent-config
  namespace: veridis-secrets

  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "1.15.6"
    app.kubernetes.io/component: agent-config
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    config.veridis.xyz/type: vault-agent
    config.veridis.xyz/tier: enterprise
    config.veridis.xyz/role: agent-configuration
    config.veridis.xyz/injection-mode: sidecar

    vault.veridis.xyz/config-type: agent
    vault.veridis.xyz/auth-method: kubernetes
    vault.veridis.xyz/secret-injection: enabled

    business.veridis.xyz/criticality: operational
    business.veridis.xyz/impact: secret-injection
    business.veridis.xyz/cost-tier: minimal

    veridis.xyz/environment: production
    veridis.xyz/team: security-engineering
    veridis.xyz/cost-center: security-infrastructure
    veridis.xyz/business-unit: identity-protocol

    compliance.veridis.xyz/soc2: "agent-configuration-control"
    monitoring.veridis.xyz/config-validation: "enabled"

  annotations:
    veridis.xyz/description: "Vault Agent configuration for secret injection and authentication management"
    veridis.xyz/purpose: "Provides Vault Agent configuration for automatic secret injection and lifecycle management"
    veridis.xyz/scope: "Agent configuration including authentication, secret injection, and caching"

    config.veridis.xyz/agent-strategy: "Intelligent secret injection with authentication management and caching optimization"
    config.veridis.xyz/auth-strategy: "Kubernetes authentication with service account integration and token management"
    config.veridis.xyz/cache-strategy: "Agent caching with intelligent invalidation and consistency management"

    veridis.xyz/owner: "security-team@veridis.xyz"
    veridis.xyz/agent-config-admin: "vault-agent-config-admin@veridis.xyz"
    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/vault/agent-configuration"

data:
  agent.hcl: |
    # ==============================================================================
    # Veridis Vault Agent Configuration
    # Intelligent Secret Injection and Authentication Management
    # ==============================================================================

    exit_after_auth = false
    pid_file = "/tmp/pidfile"

    # Vault server configuration
    vault {
      address = "https://vault-primary.veridis-secrets.svc.cluster.local:8200"
      ca_cert = "/vault/tls/ca.crt"

      # Retry configuration
      retry {
        num_retries = 5
        backoff = "250ms"
        max_backoff = "1m"
      }
    }

    # Auto-authentication configuration
    auto_auth {
      method "kubernetes" {
        mount_path = "auth/kubernetes"
        config = {
          role = "veridis-vault-role"
          token_path = "/var/run/secrets/kubernetes.io/serviceaccount/token"
        }
      }

      sink "file" {
        config = {
          path = "/vault/secrets/vault-token"
          mode = 0600
        }
      }
    }

    # Cache configuration
    cache {
      use_auto_auth_token = true

      # Persistent cache
      persist {
        type = "kubernetes"
        path = "/vault/cache/cache.db"
        keep_after_import = true
        exit_on_err = true
      }
    }

    # API proxy configuration
    api_proxy {
      use_auto_auth_token = true
    }

    # Listener for agent
    listener "tcp" {
      address = "127.0.0.1:8100"
      tls_disable = true
    }

    # Template configuration for secret injection
    template {
      source = "/vault/templates/database.tpl"
      destination = "/vault/secrets/database.json"
      error_on_missing_key = true
      perms = 0600
      backup = true

      # Template configuration
      command = "/bin/sh -c 'pkill -HUP vault'"
      command_timeout = "30s"

      # Wait configuration
      wait {
        min = "5s"
        max = "10s"
      }
    }

    # Logging configuration
    log_level = "INFO"
    log_format = "json"
    log_file = "/vault/logs/agent.log"

---
# ==============================================================================
# Vault Plugins Configuration - Custom Plugin Management
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-plugins-config
  namespace: veridis-secrets

  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "1.15.6"
    app.kubernetes.io/component: plugins-config
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    config.veridis.xyz/type: vault-plugins
    config.veridis.xyz/tier: enterprise
    config.veridis.xyz/role: plugin-configuration
    config.veridis.xyz/extension-level: advanced

    vault.veridis.xyz/config-type: plugins
    vault.veridis.xyz/plugin-support: custom
    vault.veridis.xyz/extension-support: enabled

    business.veridis.xyz/criticality: operational
    business.veridis.xyz/impact: functionality-extension
    business.veridis.xyz/cost-tier: standard

    veridis.xyz/environment: production
    veridis.xyz/team: security-engineering
    veridis.xyz/cost-center: security-infrastructure
    veridis.xyz/business-unit: identity-protocol

    compliance.veridis.xyz/soc2: "plugin-configuration-control"
    monitoring.veridis.xyz/config-validation: "enabled"

  annotations:
    veridis.xyz/description: "Vault plugins configuration for custom functionality and extension management"
    veridis.xyz/purpose: "Provides plugin configuration for Vault extensions and custom functionality"
    veridis.xyz/scope: "Plugin configuration including custom engines, authentication methods, and extensions"

    config.veridis.xyz/plugin-strategy: "Custom plugin management with security validation and performance optimization"
    config.veridis.xyz/extension-strategy: "Functionality extension with validated plugins and security controls"

    veridis.xyz/owner: "security-team@veridis.xyz"
    veridis.xyz/plugin-config-admin: "vault-plugin-config-admin@veridis.xyz"
    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/vault/plugin-configuration"

data:
  # ==============================================================================
  # Veridis Custom Plugins Configuration
  # ==============================================================================
  veridis-plugins.json: |
    {
      "plugins": {
        "veridis-identity-engine": {
          "type": "secret",
          "version": "v1.0.0",
          "sha256": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6",
          "command": "veridis-identity-engine",
          "args": ["--config", "/vault/plugins/veridis-identity-config.json"],
          "env": ["VERIDIS_ENV=production"]
        },
        "veridis-zk-engine": {
          "type": "secret",
          "version": "v1.0.0",
          "sha256": "z6y5x4w3v2u1t0s9r8q7p6o5n4m3l2k1j0i9h8g7f6e5d4c3b2a1",
          "command": "veridis-zk-engine",
          "args": ["--config", "/vault/plugins/veridis-zk-config.json"],
          "env": ["VERIDIS_ZK_ENV=production"]
        },
        "veridis-blockchain-engine": {
          "type": "secret",
          "version": "v1.0.0",
          "sha256": "b1c2d3e4f5g6h7i8j9k0l1m2n3o4p5q6r7s8t9u0v1w2x3y4z5a6",
          "command": "veridis-blockchain-engine",
          "args": ["--config", "/vault/plugins/veridis-blockchain-config.json"],
          "env": ["VERIDIS_BLOCKCHAIN_ENV=production"]
        }
      },
      "auth_methods": {
        "veridis-identity-auth": {
          "type": "auth",
          "version": "v1.0.0",
          "sha256": "c2d3e4f5g6h7i8j9k0l1m2n3o4p5q6r7s8t9u0v1w2x3y4z5a6b1",
          "command": "veridis-identity-auth",
          "args": ["--config", "/vault/plugins/veridis-identity-auth-config.json"],
          "env": ["VERIDIS_AUTH_ENV=production"]
        }
      }
    }

  # ==============================================================================
  # Plugin Configuration Files
  # ==============================================================================
  veridis-identity-config.json: |
    {
      "veridis_identity_engine": {
        "database_url": "postgresql://vault:${VAULT_DB_PASSWORD}@postgres.veridis-database.svc.cluster.local:5432/veridis_identity",
        "encryption_key": "${VERIDIS_IDENTITY_ENCRYPTION_KEY}",
        "max_connections": 100,
        "idle_timeout": "5m",
        "max_idle_connections": 10,
        "max_open_connections": 100,
        "connection_max_lifetime": "1h",
        "ssl_mode": "require",
        "ssl_cert": "/vault/tls/tls.crt",
        "ssl_key": "/vault/tls/tls.key",
        "ssl_ca": "/vault/tls/ca.crt"
      }
    }

  veridis-zk-config.json: |
    {
      "veridis_zk_engine": {
        "zk_circuit_path": "/vault/zk/circuits",
        "zk_proving_key_path": "/vault/zk/proving_keys",
        "zk_verification_key_path": "/vault/zk/verification_keys",
        "zk_trusted_setup_path": "/vault/zk/trusted_setup",
        "max_proof_generation_time": "30s",
        "max_verification_time": "5s",
        "circuit_cache_size": "1GB",
        "proof_cache_size": "512MB",
        "performance_mode": "high",
        "security_level": "maximum"
      }
    }

  veridis-blockchain-config.json: |
    {
      "veridis_blockchain_engine": {
        "ethereum_rpc_url": "https://ethereum-rpc.veridis-blockchain.svc.cluster.local:8545",
        "starknet_rpc_url": "https://starknet-rpc.veridis-blockchain.svc.cluster.local:8545",
        "polygon_rpc_url": "https://polygon-rpc.veridis-blockchain.svc.cluster.local:8545",
        "max_gas_price": "100000000000",
        "gas_limit": "8000000",
        "confirmation_blocks": 12,
        "retry_attempts": 3,
        "retry_delay": "5s",
        "wallet_encryption_key": "${VERIDIS_WALLET_ENCRYPTION_KEY}",
        "multisig_threshold": 3,
        "multisig_signers": 5
      }
    }

---
# ==============================================================================
# Vault Policies Configuration - RBAC and Security Policies
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-policies-config
  namespace: veridis-secrets

  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "1.15.6"
    app.kubernetes.io/component: policies-config
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    config.veridis.xyz/type: vault-policies
    config.veridis.xyz/tier: enterprise
    config.veridis.xyz/role: policy-configuration
    config.veridis.xyz/security-level: maximum

    vault.veridis.xyz/config-type: policies
    vault.veridis.xyz/rbac-enabled: comprehensive
    vault.veridis.xyz/governance-enabled: strict

    security.veridis.xyz/access-control: fine-grained
    security.veridis.xyz/policy-enforcement: strict
    security.veridis.xyz/governance-level: comprehensive

    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/impact: access-control
    business.veridis.xyz/cost-tier: premium

    veridis.xyz/environment: production
    veridis.xyz/team: security-engineering
    veridis.xyz/cost-center: security-infrastructure
    veridis.xyz/business-unit: identity-protocol

    compliance.veridis.xyz/soc2: "policy-configuration-control"
    compliance.veridis.xyz/gdpr: "access-control-policy"
    compliance.veridis.xyz/iso27001: "security-policy-management"
    governance.veridis.xyz/policy-enforcement: "strict"

    monitoring.veridis.xyz/policy-monitoring: "enabled"
    monitoring.veridis.xyz/access-monitoring: "comprehensive"

  annotations:
    veridis.xyz/description: "Comprehensive Vault policies configuration with fine-grained access control and governance"
    veridis.xyz/purpose: "Provides complete policy configuration for Vault RBAC, security controls, and governance"
    veridis.xyz/scope: "Policy configuration including access control, security policies, and governance frameworks"

    config.veridis.xyz/policy-strategy: "Fine-grained access control with comprehensive security policies and governance"
    config.veridis.xyz/rbac-strategy: "Role-based access control with principle of least privilege and audit integration"
    config.veridis.xyz/governance-strategy: "Comprehensive governance with policy enforcement and compliance validation"

    security.veridis.xyz/access-control-specification: "Fine-grained access control with comprehensive validation and monitoring"
    security.veridis.xyz/policy-enforcement-specification: "Strict policy enforcement with automated validation and compliance"
    security.veridis.xyz/governance-specification: "Comprehensive governance with policy management and audit integration"

    veridis.xyz/owner: "security-team@veridis.xyz"
    veridis.xyz/policy-admin: "vault-policy-admin@veridis.xyz"
    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/vault/policy-configuration"

data:
  # ==============================================================================
  # Veridis Identity Protocol Policies
  # ==============================================================================
  veridis-admin-policy.hcl: |
    # Veridis Admin Policy - Full Administrative Access
    # Path: veridis-admin-policy

    # System administration
    path "sys/*" {
      capabilities = ["create", "read", "update", "delete", "list", "sudo"]
    }

    # Auth method administration
    path "auth/*" {
      capabilities = ["create", "read", "update", "delete", "list", "sudo"]
    }

    # Secret engine administration
    path "secret/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }

    # Identity engine administration
    path "identity/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }

    # PKI administration
    path "pki/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }

    # Audit log access
    path "sys/audit" {
      capabilities = ["read", "list"]
    }

    # Policy management
    path "sys/policies/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }

  veridis-identity-policy.hcl: |
    # Veridis Identity Policy - Identity Management Access
    # Path: veridis-identity-policy

    # Identity engine access
    path "veridis-identity/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }

    # DID document management
    path "veridis-identity/did/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }

    # Credential management
    path "veridis-identity/credentials/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }

    # Schema management
    path "veridis-identity/schemas/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }

    # Revocation registry access
    path "veridis-identity/revocation/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }

  veridis-zk-policy.hcl: |
    # Veridis ZK Policy - Zero-Knowledge Proof Access
    # Path: veridis-zk-policy

    # ZK engine access
    path "veridis-zk/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }

    # ZK proof generation
    path "veridis-zk/proofs/*" {
      capabilities = ["create", "read", "list"]
    }

    # ZK verification
    path "veridis-zk/verify/*" {
      capabilities = ["create", "read"]
    }

    # ZK circuit management
    path "veridis-zk/circuits/*" {
      capabilities = ["read", "list"]
    }

    # ZK trusted setup access
    path "veridis-zk/setup/*" {
      capabilities = ["read"]
    }

  veridis-blockchain-policy.hcl: |
    # Veridis Blockchain Policy - Blockchain Integration Access
    # Path: veridis-blockchain-policy

    # Blockchain engine access
    path "veridis-blockchain/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }

    # Wallet management
    path "veridis-blockchain/wallets/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }

    # Transaction signing
    path "veridis-blockchain/sign/*" {
      capabilities = ["create", "read"]
    }

    # Smart contract interaction
    path "veridis-blockchain/contracts/*" {
      capabilities = ["create", "read", "update", "list"]
    }

    # Multi-signature management
    path "veridis-blockchain/multisig/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }

  veridis-api-policy.hcl: |
    # Veridis API Policy - API Service Access
    # Path: veridis-api-policy

    # API secrets access
    path "secret/data/veridis-api/*" {
      capabilities = ["read", "list"]
    }

    # Database credentials
    path "database/creds/veridis-api-role" {
      capabilities = ["read"]
    }

    # JWT signing keys
    path "secret/data/jwt/*" {
      capabilities = ["read"]
    }

    # Encryption keys
    path "secret/data/encryption/*" {
      capabilities = ["read"]
    }

  veridis-monitoring-policy.hcl: |
    # Veridis Monitoring Policy - Monitoring Service Access
    # Path: veridis-monitoring-policy

    # System health metrics
    path "sys/health" {
      capabilities = ["read"]
    }

    # Metrics endpoint
    path "sys/metrics" {
      capabilities = ["read"]
    }

    # Audit log access (read-only)
    path "sys/audit" {
      capabilities = ["read"]
    }

    # Monitoring secrets
    path "secret/data/monitoring/*" {
      capabilities = ["read"]
    }

# ==============================================================================
# Vault ConfigMap Summary and Enterprise Configuration Architecture
# ==============================================================================
#
# COMPREHENSIVE VAULT CONFIGURATION STRATEGY:
# ===========================================
#
# VAULT CONFIGURATION ARCHITECTURE OVERVIEW:
# ------------------------------------------
# 1. Vault Primary Configuration (vault-config):
#    - Comprehensive server configuration with enterprise security and high availability
#    - Advanced storage backend with Raft consensus and performance optimization
#    - HSM integration with PKCS#11 and hardware security module configuration
#    - Comprehensive audit logging with multiple backends and compliance integration
#    - Advanced telemetry with Prometheus, Datadog, and monitoring system integration
#
# 2. Vault Standby Configuration (vault-standby-config):
#    - Read-optimized configuration for standby instances with performance tuning
#    - Reduced resource requirements with intelligent caching and connection optimization
#    - Cluster joining configuration with automatic discovery and failover capabilities
#    - Performance optimization for read workloads with connection pooling and caching
#    - Cost-optimized configuration with efficient resource utilization and management
#
# 3. Vault Agent Configuration (vault-agent-config):
#    - Intelligent secret injection with authentication management and caching
#    - Kubernetes authentication integration with service account and token management
#    - Template-based secret injection with automatic rotation and lifecycle management
#    - Persistent caching with intelligent invalidation and consistency management
#    - API proxy configuration with authentication and authorization integration
#
# 4. Vault Plugins Configuration (vault-plugins-config):
#    - Custom plugin management with Veridis-specific functionality and extensions
#    - Identity engine plugin with database integration and encryption capabilities
#    - Zero-knowledge proof engine with circuit management and proof generation
#    - Blockchain engine with multi-chain support and wallet management capabilities
#    - Authentication method plugins with identity protocol integration
#
# 5. Vault Policies Configuration (vault-policies-config):
#    - Comprehensive RBAC policies with fine-grained access control and governance
#    - Identity management policies with DID document and credential management
#    - Zero-knowledge proof policies with proof generation and verification access
#    - Blockchain policies with wallet management and transaction signing capabilities
#    - Monitoring policies with metrics access and audit log integration
#
# ENTERPRISE CONFIGURATION FEATURES:
# ==================================
# Security Configuration Excellence:
#   - TLS 1.3 with enterprise cipher suites and certificate management
#   - HSM integration with PKCS#11 and hardware security module validation
#   - Comprehensive audit logging with multiple backends and integrity protection
#   - Advanced encryption with AES-256-GCM and hardware acceleration
#   - Fine-grained access control with RBAC and policy-based governance
#
# Performance Configuration Optimization:
#   - Intelligent caching with performance optimization and resource efficiency
#   - Connection optimization with pooling, keep-alive, and resource management
#   - Read optimization for standby instances with performance tuning
#   - Storage optimization with Raft consensus and performance multipliers
#   - Network optimization with HTTP/2 support and connection management
#
# High Availability Configuration:
#   - Multi-instance clustering with automated failover and consensus
#   - Raft storage backend with autopilot and cluster management
#   - Retry join configuration with automatic discovery and recovery
#   - Service registration with Kubernetes integration and service discovery
#   - Health check optimization with comprehensive monitoring and validation
#
# Business Intelligence Configuration:
#   - Comprehensive telemetry with Prometheus, Datadog, and monitoring integration
#   - Business context configuration with cost center and business unit tracking
#   - Compliance configuration with regulatory framework integration
#   - Performance analytics with optimization recommendations and intelligence
#   - Cost optimization configuration with resource efficiency and capacity planning
#
# OPERATIONAL EXCELLENCE:
# ======================
# Configuration Management:
#   - Comprehensive configuration validation with syntax checking and security analysis
#   - Configuration versioning with change tracking and rollback capabilities
#   - Configuration drift detection with automated correction and alerting
#   - Configuration optimization with performance tuning and efficiency improvements
#   - Configuration monitoring with analytics and intelligence integration
#
# Plugin Architecture:
#   - Custom plugin ecosystem with Veridis-specific functionality and extensions
#   - Secure plugin validation with SHA256 checksums and signature verification
#   - Plugin lifecycle management with automated updates and rollback capabilities
#   - Plugin performance optimization with resource allocation and monitoring
#   - Plugin security integration with access control and audit logging
#
# Policy Framework:
#   - Comprehensive policy framework with fine-grained access control
#   - Role-based access control with principle of least privilege
#   - Policy enforcement with automated validation and compliance checking
#   - Policy lifecycle management with versioning and rollback capabilities
#   - Policy monitoring with access analytics and security intelligence
#
# Integration and Coordination:
#   - Kubernetes native integration with service accounts and RBAC
#   - Service mesh integration with secure communication and traffic management
#   - Monitoring integration with comprehensive metrics and analytics
#   - Backup integration with automated backup and recovery procedures
#   - Disaster recovery integration with business continuity and failover
#
# ==============================================================================
