# ==============================================================================
# Veridis Decentralized Identity Protocol - Redis Deployment
# ==============================================================================
#
# This manifest defines comprehensive Redis deployment configurations for the
# Veridis deployment, providing:
#
# ENTERPRISE REDIS ARCHITECTURE:
#   • High-performance in-memory data store with advanced caching strategies
#   • Multi-tier Redis deployment with primary, replica, and sentinel configurations
#   • Advanced data persistence with AOF and RDB snapshot optimization
#   • Comprehensive security with TLS encryption, authentication, and access controls
#   • Enterprise-grade monitoring with performance metrics and health monitoring
#
# REDIS PERFORMANCE OPTIMIZATION:
#   • Memory optimization with intelligent eviction policies and compression
#   • Network optimization with connection pooling and pipelining support
#   • CPU optimization with multi-threading and parallel processing
#   • Storage optimization with persistence tuning and backup strategies
#   • Advanced caching with TTL management and cache warming strategies
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II Redis security controls with comprehensive audit logging
#   • GDPR data protection with encryption and data residency compliance
#   • ISO 27001 security management with access controls and monitoring
#   • PCI DSS secure caching for cardholder data environment protection
#   • FIPS 140-2 encryption compliance with validated cryptographic modules
#
# ENTERPRISE HIGH AVAILABILITY:
#   • Redis Sentinel for automatic failover and high availability
#   • Cross-zone deployment with anti-affinity and fault tolerance
#   • Automated backup and restore with point-in-time recovery
#   • Load balancing with intelligent routing and connection management
#   • Disaster recovery with cross-region replication and failover
#
# OPERATIONAL EXCELLENCE CONTROLS:
#   • Automated deployment with policy-based configuration management
#   • Comprehensive monitoring with performance metrics and alerting
#   • Capacity management with auto-scaling and resource optimization
#   • Security management with access controls and threat detection
#   • Incident response with automated recovery and escalation procedures
#
# ==============================================================================

# ==============================================================================
# Redis Primary Master Deployment - High-Performance Primary Instance
# ==============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-primary
  namespace: veridis-cache

  # Core resource identification labels
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "7.2.4"
    app.kubernetes.io/component: primary
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Redis specific classification
    redis.veridis.xyz/type: primary-master
    redis.veridis.xyz/tier: enterprise
    redis.veridis.xyz/role: cache-primary
    redis.veridis.xyz/mode: standalone-ha
    redis.veridis.xyz/persistence: enabled

    # Performance classification
    performance.veridis.xyz/tier: ultra-high
    performance.veridis.xyz/memory-class: memory-optimized
    performance.veridis.xyz/cpu-class: compute-optimized
    performance.veridis.xyz/network-class: network-optimized
    performance.veridis.xyz/storage-class: ssd-optimized

    # Business classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/cost-tier: premium
    business.veridis.xyz/revenue-impact: direct
    business.veridis.xyz/session-management: "true"
    business.veridis.xyz/caching-tier: "primary"

    # Availability and reliability
    availability.veridis.xyz/ha-tier: maximum
    availability.veridis.xyz/backup-strategy: continuous
    availability.veridis.xyz/replication: multi-zone
    availability.veridis.xyz/disaster-recovery: cross-region
    availability.veridis.xyz/sla-target: "99.99"

    # Security classification
    security.veridis.xyz/encryption-at-rest: "aes-256"
    security.veridis.xyz/encryption-in-transit: "tls-1.3"
    security.veridis.xyz/access-control: "rbac-strict"
    security.veridis.xyz/audit-logging: "comprehensive"
    security.veridis.xyz/data-classification: "confidential"

    # Cache management labels
    cache.veridis.xyz/eviction-policy: "allkeys-lru"
    cache.veridis.xyz/persistence-strategy: "aof-rdb-hybrid"
    cache.veridis.xyz/memory-optimization: "enabled"
    cache.veridis.xyz/compression: "enabled"
    cache.veridis.xyz/ttl-management: "intelligent"

    # Operational labels
    veridis.xyz/environment: production
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "cache-security-control"
    compliance.veridis.xyz/gdpr: "session-data-protection"
    compliance.veridis.xyz/iso27001: "cache-security-management"
    compliance.veridis.xyz/pci-dss: "secure-caching-storage"
    governance.veridis.xyz/policy-enforcement: "strict"

    # Monitoring and observability
    monitoring.veridis.xyz/metrics-collection: "comprehensive"
    monitoring.veridis.xyz/alerting-integration: "pagerduty"
    monitoring.veridis.xyz/health-monitoring: "advanced"
    monitoring.veridis.xyz/performance-monitoring: "detailed"

  annotations:
    # Deployment purpose and specifications
    veridis.xyz/description: "High-performance Redis primary master with enterprise-grade security, persistence, and monitoring"
    veridis.xyz/purpose: "Provides primary Redis caching with session management, authentication caching, and high-performance data access"
    veridis.xyz/scope: "Session storage, authentication cache, rate limiting, temporary data, real-time analytics"

    # Redis architecture and configuration
    redis.veridis.xyz/architecture: "Single primary with replica deployment, Sentinel-managed high availability"
    redis.veridis.xyz/memory-configuration: "16GB allocated with intelligent eviction and compression optimization"
    redis.veridis.xyz/persistence-configuration: "Hybrid AOF+RDB persistence with optimized durability and performance"
    redis.veridis.xyz/network-configuration: "TLS-encrypted connections with connection pooling and pipelining"

    # Performance optimization specifications
    performance.veridis.xyz/memory-optimization: "Optimized memory allocation with compression and efficient data structures"
    performance.veridis.xyz/cpu-optimization: "Multi-threaded I/O with optimized command processing and pipelining"
    performance.veridis.xyz/network-optimization: "Connection pooling with keep-alive and multiplexing optimization"
    performance.veridis.xyz/storage-optimization: "SSD-optimized persistence with background saving and AOF rewriting"

    # High availability and disaster recovery
    availability.veridis.xyz/ha-configuration: "Redis Sentinel with automatic failover and split-brain protection"
    availability.veridis.xyz/backup-strategy: "Continuous RDB snapshots with AOF persistence and cross-region replication"
    availability.veridis.xyz/recovery-objectives: "RTO: 60 seconds, RPO: 1 second with automatic failover"
    availability.veridis.xyz/monitoring-integration: "Comprehensive health monitoring with proactive alerting"

    # Security architecture and encryption
    security.veridis.xyz/encryption-configuration: "TLS 1.3 encryption with certificate-based authentication"
    security.veridis.xyz/access-control-configuration: "Redis AUTH with ACL-based user management and role separation"
    security.veridis.xyz/audit-configuration: "Comprehensive command logging with security event correlation"
    security.veridis.xyz/network-security: "Private networking with firewall rules and access restrictions"

    # Compliance and regulatory requirements
    compliance.veridis.xyz/data-residency: "US and EU regions with data sovereignty compliance"
    compliance.veridis.xyz/encryption-standards: "FIPS 140-2 Level 2 validated encryption for data at rest and in transit"
    compliance.veridis.xyz/audit-requirements: "Comprehensive access logging with immutable audit trails"
    compliance.veridis.xyz/retention-policy: "Session data with configurable TTL and compliance-based retention"

    # Cache optimization and management
    cache.veridis.xyz/optimization-strategy: "Intelligent caching with predictive eviction and cache warming"
    cache.veridis.xyz/memory-management: "Optimized memory usage with compression and efficient serialization"
    cache.veridis.xyz/ttl-strategy: "Intelligent TTL management with sliding expiration and usage-based optimization"
    cache.veridis.xyz/eviction-optimization: "LRU eviction with frequency-based optimization and memory pressure handling"

    # Monitoring and observability specifications
    monitoring.veridis.xyz/metrics-collection: "Performance, memory, network, persistence, replication, and business metrics"
    monitoring.veridis.xyz/alerting-thresholds: "Memory usage, connection limits, replication lag, performance degradation"
    monitoring.veridis.xyz/health-monitoring: "Continuous health checks with automated remediation and escalation"
    monitoring.veridis.xyz/performance-analysis: "Real-time performance monitoring with trend analysis and optimization"

    # Cost optimization and resource management
    cost.veridis.xyz/resource-optimization: "Optimized resource allocation with performance-cost balance"
    cost.veridis.xyz/capacity-planning: "Predictive capacity analysis with auto-scaling and resource right-sizing"
    cost.veridis.xyz/efficiency-monitoring: "Cost per operation tracking with efficiency optimization"

    # Operational procedures and contacts
    veridis.xyz/owner: "platform-team@veridis.xyz"
    veridis.xyz/redis-admin: "redis-admin@veridis.xyz"
    veridis.xyz/escalation: "platform-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "infrastructure-oncall@veridis.xyz"

    # Documentation and procedures
    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/redis/primary-deployment"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/redis/primary-operations"
    veridis.xyz/monitoring-dashboard: "https://grafana.veridis.xyz/d/redis-primary-overview"
    veridis.xyz/troubleshooting: "https://docs.veridis.xyz/troubleshooting/redis-primary"

# Deployment specification
spec:
  # Replica configuration for high availability
  replicas: 1                 # Single primary instance

  # Deployment strategy for zero-downtime updates
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0       # Ensure availability during updates
      maxSurge: 1             # Allow one additional pod during updates

  # Minimum ready seconds for stability
  minReadySeconds: 30

  # Revision history limit
  revisionHistoryLimit: 10

  # Progress deadline
  progressDeadlineSeconds: 600

  # Pod selector
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: veridis-production
      app.kubernetes.io/component: primary
      redis.veridis.xyz/role: cache-primary

  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: veridis-production
        app.kubernetes.io/version: "7.2.4"
        app.kubernetes.io/component: primary
        app.kubernetes.io/part-of: veridis-protocol
        redis.veridis.xyz/type: primary-master
        redis.veridis.xyz/role: cache-primary
        redis.veridis.xyz/tier: enterprise
        performance.veridis.xyz/tier: ultra-high
        business.veridis.xyz/criticality: mission-critical
        security.veridis.xyz/data-classification: confidential
        monitoring.veridis.xyz/scrape: "true"
        veridis.xyz/environment: production
        veridis.xyz/team: platform-engineering

      annotations:
        veridis.xyz/pod-type: "redis-primary-master"
        redis.veridis.xyz/configuration-checksum: "{{ include (print $.Template.BasePath \"/redis/configmap.yaml\") . | sha256sum }}"
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"

        # Performance tuning annotations
        performance.veridis.xyz/cpu-optimization: "multi-threaded-io"
        performance.veridis.xyz/memory-optimization: "compression-enabled"
        performance.veridis.xyz/network-optimization: "connection-pooling"

        # Security annotations
        security.veridis.xyz/tls-enabled: "true"
        security.veridis.xyz/auth-required: "true"
        security.veridis.xyz/acl-enabled: "true"

    spec:
      # Service account for Redis operations
      serviceAccountName: redis-primary-sa

      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
        sysctls:
        - name: net.core.somaxconn
          value: "65535"
        - name: vm.overcommit_memory
          value: "1"

      # Termination grace period for graceful shutdown
      terminationGracePeriodSeconds: 60

      # DNS configuration for service discovery
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0

      # Node selection for Redis primary
      nodeSelector:
        veridis.xyz/node-type: memory-optimized
        kubernetes.io/arch: amd64
        node.kubernetes.io/instance-type: "r6i.2xlarge"

      # Tolerations for dedicated Redis nodes
      tolerations:
      - key: "veridis.xyz/redis-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      - key: "veridis.xyz/memory-optimized"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

      # Affinity rules for optimal placement
      affinity:
        # Node affinity for memory-optimized instances
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "veridis.xyz/node-type"
                operator: In
                values: ["memory-optimized"]
              - key: "kubernetes.io/arch"
                operator: In
                values: ["amd64"]

          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: "veridis.xyz/redis-optimized"
                operator: In
                values: ["true"]
          - weight: 80
            preference:
              matchExpressions:
              - key: "topology.kubernetes.io/zone"
                operator: In
                values: ["us-west-2a"]

        # Pod anti-affinity to avoid co-location with replicas
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app.kubernetes.io/name"
                operator: In
                values: ["redis"]
              - key: "redis.veridis.xyz/role"
                operator: In
                values: ["cache-replica"]
            topologyKey: "kubernetes.io/hostname"

          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app.kubernetes.io/name"
                  operator: In
                  values: ["redis"]
              topologyKey: "topology.kubernetes.io/zone"

      # Init containers for Redis preparation
      initContainers:
      # System optimization init container
      - name: redis-system-optimization
        image: veridis/redis-init:7.2.4-alpine
        imagePullPolicy: IfNotPresent

        securityContext:
          runAsUser: 0
          runAsGroup: 0
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - SYS_ADMIN
            - NET_ADMIN
            drop:
            - ALL

        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Optimizing system parameters for Redis..."

          # Disable transparent huge pages
          echo never > /sys/kernel/mm/transparent_hugepage/enabled
          echo never > /sys/kernel/mm/transparent_hugepage/defrag

          # Set TCP backlog
          echo 65535 > /proc/sys/net/core/somaxconn

          # Set memory overcommit
          echo 1 > /proc/sys/vm/overcommit_memory

          # Optimize network parameters
          echo 32768 > /proc/sys/net/core/rmem_default
          echo 32768 > /proc/sys/net/core/wmem_default
          echo "65536 262144 16777216" > /proc/sys/net/ipv4/tcp_rmem
          echo "65536 262144 16777216" > /proc/sys/net/ipv4/tcp_wmem

          echo "System optimization completed"

        volumeMounts:
        - name: proc
          mountPath: /proc
        - name: sys
          mountPath: /sys

        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi

      # Configuration validation init container
      - name: redis-config-validation
        image: veridis/redis:7.2.4-alpine
        imagePullPolicy: IfNotPresent

        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

        env:
        - name: REDIS_ROLE
          value: "primary"
        - name: REDIS_PORT
          value: "6379"

        envFrom:
        - secretRef:
            name: redis-secret
        - configMapRef:
            name: redis-config

        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Validating Redis configuration..."

          # Test configuration file syntax
          redis-server /etc/redis/redis.conf --test-memory 1024

          # Validate TLS certificates
          if [ -f /etc/redis/tls/tls.crt ]; then
            openssl x509 -in /etc/redis/tls/tls.crt -text -noout
            echo "TLS certificate validation passed"
          fi

          # Validate ACL configuration
          if [ -f /etc/redis/acl/users.acl ]; then
            echo "ACL configuration file found"
          fi

          echo "Configuration validation completed successfully"

        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
          readOnly: true
        - name: redis-tls
          mountPath: /etc/redis/tls
          readOnly: true
        - name: redis-acl
          mountPath: /etc/redis/acl
          readOnly: true
        - name: tmp
          mountPath: /tmp

        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi

      # Main Redis container
      containers:
      - name: redis
        image: veridis/redis:7.2.4-alpine
        imagePullPolicy: IfNotPresent

        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

        # Redis command and arguments
        command:
        - redis-server
        args:
        - /etc/redis/redis.conf
        - --dir
        - /data
        - --logfile
        - ""
        - --protected-mode
        - "no"
        - --bind
        - "0.0.0.0"
        - --port
        - "6379"
        - --tls-port
        - "6380"
        - --tls-cert-file
        - /etc/redis/tls/tls.crt
        - --tls-key-file
        - /etc/redis/tls/tls.key
        - --tls-ca-cert-file
        - /etc/redis/tls/ca.crt
        - --tls-protocols
        - "TLSv1.2,TLSv1.3"
        - --aclfile
        - /etc/redis/acl/users.acl
        - --save
        - "900 1"
        - --save
        - "300 10"
        - --save
        - "60 10000"
        - --appendonly
        - "yes"
        - --appendfsync
        - "everysec"
        - --maxmemory
        - "14gb"
        - --maxmemory-policy
        - "allkeys-lru"
        - --tcp-keepalive
        - "300"
        - --timeout
        - "0"
        - --tcp-backlog
        - "511"
        - --databases
        - "16"
        - --rdbcompression
        - "yes"
        - --rdbchecksum
        - "yes"
        - --stop-writes-on-bgsave-error
        - "yes"
        - --lazyfree-lazy-eviction
        - "yes"
        - --lazyfree-lazy-expire
        - "yes"
        - --lazyfree-lazy-server-del
        - "yes"
        - --replica-lazy-flush
        - "yes"
        - --lazyfree-lazy-user-del
        - "yes"
        - --oom-score-adj-values
        - "0 200 800"

        # Environment variables
        env:
        - name: REDIS_ROLE
          value: "primary"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_TLS_PORT
          value: "6380"
        - name: REDIS_MAXMEMORY
          value: "14gb"
        - name: REDIS_MAXMEMORY_POLICY
          value: "allkeys-lru"
        - name: ALLOW_EMPTY_PASSWORD
          value: "no"
        - name: REDIS_AOF_ENABLED
          value: "yes"
        - name: REDIS_RDB_ENABLED
          value: "yes"
        - name: REDIS_TLS_ENABLED
          value: "yes"
        - name: REDIS_ACL_ENABLED
          value: "yes"

        envFrom:
        - secretRef:
            name: redis-secret
        - configMapRef:
            name: redis-config

        # Container ports
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        - name: redis-tls
          containerPort: 6380
          protocol: TCP

        # Volume mounts
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
          readOnly: true
        - name: redis-tls
          mountPath: /etc/redis/tls
          readOnly: true
        - name: redis-acl
          mountPath: /etc/redis/acl
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: redis-log
          mountPath: /var/log/redis

        # Resource allocation
        resources:
          requests:
            cpu: 2000m
            memory: 16Gi
            ephemeral-storage: 2Gi
          limits:
            cpu: 4000m
            memory: 16Gi
            ephemeral-storage: 4Gi

        # Startup probe for initial readiness
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              redis-cli -h 127.0.0.1 -p 6379 --tls \
                --cert /etc/redis/tls/tls.crt \
                --key /etc/redis/tls/tls.key \
                --cacert /etc/redis/tls/ca.crt \
                --user healthcheck \
                --askpass \
                ping | grep -q "PONG"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1

        # Liveness probe for container health
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              redis-cli -h 127.0.0.1 -p 6379 --tls \
                --cert /etc/redis/tls/tls.crt \
                --key /etc/redis/tls/tls.key \
                --cacert /etc/redis/tls/ca.crt \
                --user healthcheck \
                --askpass \
                ping | grep -q "PONG"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1

        # Readiness probe for service readiness
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              redis-cli -h 127.0.0.1 -p 6379 --tls \
                --cert /etc/redis/tls/tls.crt \
                --key /etc/redis/tls/tls.key \
                --cacert /etc/redis/tls/ca.crt \
                --user healthcheck \
                --askpass \
                info replication | grep -q "role:master"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1

        # Lifecycle hooks for graceful shutdown
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                echo "Initiating graceful Redis shutdown..."
                redis-cli -h 127.0.0.1 -p 6379 --tls \
                  --cert /etc/redis/tls/tls.key \
                  --key /etc/redis/tls/tls.key \
                  --cacert /etc/redis/tls/ca.crt \
                  --user admin \
                  --askpass \
                  BGSAVE
                sleep 5
                redis-cli -h 127.0.0.1 -p 6379 --tls \
                  --cert /etc/redis/tls/tls.crt \
                  --key /etc/redis/tls/tls.key \
                  --cacert /etc/redis/tls/ca.crt \
                  --user admin \
                  --askpass \
                  SHUTDOWN SAVE

      # Redis Exporter sidecar for monitoring
      - name: redis-exporter
        image: veridis/redis-exporter:1.55.0
        imagePullPolicy: IfNotPresent

        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

        env:
        - name: REDIS_ADDR
          value: "rediss://127.0.0.1:6380"
        - name: REDIS_USER
          value: "monitoring"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: monitoring-password
        - name: REDIS_EXPORTER_TLS_CLIENT_CERT_FILE
          value: "/etc/redis/tls/tls.crt"
        - name: REDIS_EXPORTER_TLS_CLIENT_KEY_FILE
          value: "/etc/redis/tls/tls.key"
        - name: REDIS_EXPORTER_TLS_CA_CERT_FILE
          value: "/etc/redis/tls/ca.crt"
        - name: REDIS_EXPORTER_SKIP_TLS_VERIFICATION
          value: "false"
        - name: REDIS_EXPORTER_CHECK_KEYS
          value: "veridis:session:*, veridis:auth:*, veridis:rate:*"
        - name: REDIS_EXPORTER_CHECK_SINGLE_KEYS
          value: "veridis:config, veridis:stats"
        - name: REDIS_EXPORTER_SCRIPT
          value: "return redis.call('info','server')"

        ports:
        - name: metrics
          containerPort: 9121
          protocol: TCP

        volumeMounts:
        - name: redis-tls
          mountPath: /etc/redis/tls
          readOnly: true
        - name: tmp
          mountPath: /tmp

        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi

        livenessProbe:
          httpGet:
            path: /health
            port: 9121
          initialDelaySeconds: 15
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health
            port: 9121
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3

      # Volumes for Redis deployment
      volumes:
      # Redis persistent data volume
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-primary-data

      # Redis configuration
      - name: redis-config
        configMap:
          name: redis-config
          defaultMode: 0644

      # TLS certificates
      - name: redis-tls
        secret:
          secretName: redis-tls-secret
          defaultMode: 0600

      # ACL configuration
      - name: redis-acl
        secret:
          secretName: redis-acl-secret
          defaultMode: 0600

      # Temporary filesystem
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi

      # Log directory
      - name: redis-log
        emptyDir:
          sizeLimit: 1Gi

      # System directories for init container
      - name: proc
        hostPath:
          path: /proc
          type: Directory

      - name: sys
        hostPath:
          path: /sys
          type: Directory

---
# ==============================================================================
# Redis Replica Deployment - High-Availability Read Replicas
# ==============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-replica
  namespace: veridis-cache

  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "7.2.4"
    app.kubernetes.io/component: replica
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    redis.veridis.xyz/type: read-replica
    redis.veridis.xyz/tier: enterprise
    redis.veridis.xyz/role: cache-replica
    redis.veridis.xyz/mode: replica-readonly
    redis.veridis.xyz/persistence: enabled

    performance.veridis.xyz/tier: high
    performance.veridis.xyz/memory-class: memory-optimized
    performance.veridis.xyz/cpu-class: compute-optimized
    performance.veridis.xyz/read-optimization: "enabled"

    business.veridis.xyz/criticality: business-critical
    business.veridis.xyz/cost-tier: standard
    business.veridis.xyz/revenue-impact: indirect
    business.veridis.xyz/read-scaling: "true"

    availability.veridis.xyz/ha-tier: high
    availability.veridis.xyz/backup-strategy: synchronized
    availability.veridis.xyz/replication: streaming
    availability.veridis.xyz/sla-target: "99.9"

    security.veridis.xyz/encryption-at-rest: "aes-256"
    security.veridis.xyz/encryption-in-transit: "tls-1.3"
    security.veridis.xyz/access-control: "rbac-standard"
    security.veridis.xyz/data-classification: "confidential"

    cache.veridis.xyz/replica-role: "read-only"
    cache.veridis.xyz/sync-strategy: "async-replication"
    cache.veridis.xyz/read-optimization: "enabled"

    veridis.xyz/environment: production
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: infrastructure
    veridis.xyz/business-unit: identity-protocol

    compliance.veridis.xyz/soc2: "cache-replica-control"
    compliance.veridis.xyz/gdpr: "replica-data-protection"
    governance.veridis.xyz/policy-enforcement: "standard"

  annotations:
    veridis.xyz/description: "Redis read replicas for high availability and read scaling with synchronous replication"
    veridis.xyz/purpose: "Provides Redis read replicas for load distribution, high availability, and disaster recovery"
    veridis.xyz/scope: "Read-only cache access, load distribution, failover capability, analytics queries"

    # Replica-specific configuration
    redis.veridis.xyz/master-reference: "redis-primary.veridis-cache.svc.cluster.local"
    redis.veridis.xyz/replication-mode: "asynchronous"
    redis.veridis.xyz/read-only-mode: "enabled"
    redis.veridis.xyz/replica-priority: "100"

    # Performance optimization for read workloads
    performance.veridis.xyz/read-optimization: "Optimized for read-heavy workloads with connection pooling"
    performance.veridis.xyz/memory-sharing: "Shared memory optimization for replica synchronization"
    performance.veridis.xyz/network-optimization: "Optimized replication network with compression"

    # High availability and failover
    availability.veridis.xyz/failover-capability: "Automatic promotion to primary in case of master failure"
    availability.veridis.xyz/replication-monitoring: "Continuous replication lag monitoring with alerting"
    availability.veridis.xyz/sync-validation: "Regular synchronization validation with master"

    veridis.xyz/owner: "platform-team@veridis.xyz"
    veridis.xyz/replica-admin: "redis-replica-admin@veridis.xyz"

spec:
  replicas: 2                 # Two replicas for high availability

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1       # Allow one replica to be unavailable during updates
      maxSurge: 1

  minReadySeconds: 15
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600

  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: veridis-production
      app.kubernetes.io/component: replica
      redis.veridis.xyz/role: cache-replica

  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: veridis-production
        app.kubernetes.io/version: "7.2.4"
        app.kubernetes.io/component: replica
        app.kubernetes.io/part-of: veridis-protocol
        redis.veridis.xyz/type: read-replica
        redis.veridis.xyz/role: cache-replica
        redis.veridis.xyz/tier: enterprise
        performance.veridis.xyz/tier: high
        business.veridis.xyz/criticality: business-critical
        security.veridis.xyz/data-classification: confidential
        monitoring.veridis.xyz/scrape: "true"
        veridis.xyz/environment: production
        veridis.xyz/team: platform-engineering

      annotations:
        veridis.xyz/pod-type: "redis-read-replica"
        redis.veridis.xyz/configuration-checksum: "{{ include (print $.Template.BasePath \"/redis/configmap.yaml\") . | sha256sum }}"
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
        performance.veridis.xyz/read-optimization: "enabled"
        security.veridis.xyz/tls-enabled: "true"

    spec:
      serviceAccountName: redis-replica-sa

      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault

      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst

      nodeSelector:
        veridis.xyz/node-type: memory-optimized
        kubernetes.io/arch: amd64

      tolerations:
      - key: "veridis.xyz/redis-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "veridis.xyz/node-type"
                operator: In
                values: ["memory-optimized"]

          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: "topology.kubernetes.io/zone"
                operator: In
                values: ["us-west-2b", "us-west-2c"]

        # Anti-affinity to distribute replicas
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app.kubernetes.io/name"
                operator: In
                values: ["redis"]
              - key: "redis.veridis.xyz/role"
                operator: In
                values: ["cache-primary", "cache-replica"]
            topologyKey: "kubernetes.io/hostname"

          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "redis.veridis.xyz/role"
                  operator: In
                  values: ["cache-replica"]
              topologyKey: "topology.kubernetes.io/zone"

      initContainers:
      # Replica initialization container
      - name: redis-replica-init
        image: veridis/redis:7.2.4-alpine
        imagePullPolicy: IfNotPresent

        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

        env:
        - name: REDIS_ROLE
          value: "replica"
        - name: REDIS_MASTER_HOST
          value: "redis-primary.veridis-cache.svc.cluster.local"
        - name: REDIS_MASTER_PORT
          value: "6380"  # TLS port

        envFrom:
        - secretRef:
            name: redis-secret

        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Initializing Redis replica..."

          # Wait for master to be available
          until redis-cli -h $REDIS_MASTER_HOST -p $REDIS_MASTER_PORT --tls \
            --cert /etc/redis/tls/tls.crt \
            --key /etc/redis/tls/tls.key \
            --cacert /etc/redis/tls/ca.crt \
            --user replication \
            --askpass \
            ping; do
            echo "Waiting for Redis master..."
            sleep 2
          done

          echo "Redis master is available. Replica initialization completed."

        volumeMounts:
        - name: redis-tls
          mountPath: /etc/redis/tls
          readOnly: true
        - name: tmp
          mountPath: /tmp

        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi

      containers:
      # Redis replica container
      - name: redis
        image: veridis/redis:7.2.4-alpine
        imagePullPolicy: IfNotPresent

        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

        command:
        - redis-server
        args:
        - /etc/redis/redis-replica.conf
        - --dir
        - /data
        - --logfile
        - ""
        - --replica-read-only
        - "yes"
        - --replicaof
        - redis-primary.veridis-cache.svc.cluster.local
        - "6380"
        - --masterauth
        - $(REDIS_REPLICATION_PASSWORD)
        - --replica-serve-stale-data
        - "yes"
        - --replica-priority
        - "100"
        - --min-replicas-to-write
        - "1"
        - --min-replicas-max-lag
        - "10"

        env:
        - name: REDIS_ROLE
          value: "replica"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_TLS_PORT
          value: "6380"
        - name: REDIS_MAXMEMORY
          value: "7gb"
        - name: REDIS_MAXMEMORY_POLICY
          value: "allkeys-lru"
        - name: ALLOW_EMPTY_PASSWORD
          value: "no"
        - name: REDIS_TLS_ENABLED
          value: "yes"
        - name: REDIS_ACL_ENABLED
          value: "yes"

        envFrom:
        - secretRef:
            name: redis-secret
        - configMapRef:
            name: redis-replica-config

        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        - name: redis-tls
          containerPort: 6380
          protocol: TCP

        volumeMounts:
        - name: redis-data-replica
          mountPath: /data
        - name: redis-replica-config
          mountPath: /etc/redis
          readOnly: true
        - name: redis-tls
          mountPath: /etc/redis/tls
          readOnly: true
        - name: redis-acl
          mountPath: /etc/redis/acl
          readOnly: true
        - name: tmp
          mountPath: /tmp

        resources:
          requests:
            cpu: 1000m
            memory: 8Gi
            ephemeral-storage: 1Gi
          limits:
            cpu: 2000m
            memory: 8Gi
            ephemeral-storage: 2Gi

        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              redis-cli -h 127.0.0.1 -p 6379 --tls \
                --cert /etc/redis/tls/tls.crt \
                --key /etc/redis/tls/tls.key \
                --cacert /etc/redis/tls/ca.crt \
                --user healthcheck \
                --askpass \
                ping | grep -q "PONG"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30

        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              redis-cli -h 127.0.0.1 -p 6379 --tls \
                --cert /etc/redis/tls/tls.crt \
                --key /etc/redis/tls/tls.key \
                --cacert /etc/redis/tls/ca.crt \
                --user healthcheck \
                --askpass \
                ping | grep -q "PONG"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              redis-cli -h 127.0.0.1 -p 6379 --tls \
                --cert /etc/redis/tls/tls.crt \
                --key /etc/redis/tls/tls.key \
                --cacert /etc/redis/tls/ca.crt \
                --user healthcheck \
                --askpass \
                info replication | grep -q "role:slave"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                echo "Initiating graceful Redis replica shutdown..."
                redis-cli -h 127.0.0.1 -p 6379 --tls \
                  --cert /etc/redis/tls/tls.crt \
                  --key /etc/redis/tls/tls.key \
                  --cacert /etc/redis/tls/ca.crt \
                  --user admin \
                  --askpass \
                  SHUTDOWN NOSAVE

      # Redis Exporter for replica monitoring
      - name: redis-exporter
        image: veridis/redis-exporter:1.55.0
        imagePullPolicy: IfNotPresent

        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

        env:
        - name: REDIS_ADDR
          value: "rediss://127.0.0.1:6380"
        - name: REDIS_USER
          value: "monitoring"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: monitoring-password
        - name: REDIS_EXPORTER_TLS_CLIENT_CERT_FILE
          value: "/etc/redis/tls/tls.crt"
        - name: REDIS_EXPORTER_TLS_CLIENT_KEY_FILE
          value: "/etc/redis/tls/tls.key"
        - name: REDIS_EXPORTER_TLS_CA_CERT_FILE
          value: "/etc/redis/tls/ca.crt"
        - name: REDIS_EXPORTER_INCL_SYSTEM_METRICS
          value: "true"
        - name: REDIS_EXPORTER_IS_CLUSTER
          value: "false"
        - name: REDIS_EXPORTER_CHECK_KEYS
          value: "veridis:session:*, veridis:auth:*"

        ports:
        - name: metrics
          containerPort: 9121
          protocol: TCP

        volumeMounts:
        - name: redis-tls
          mountPath: /etc/redis/tls
          readOnly: true
        - name: tmp
          mountPath: /tmp

        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi

        livenessProbe:
          httpGet:
            path: /health
            port: 9121
          initialDelaySeconds: 15
          periodSeconds: 30

        readinessProbe:
          httpGet:
            path: /health
            port: 9121
          initialDelaySeconds: 5
          periodSeconds: 10

      volumes:
      # Replica data volume
      - name: redis-data-replica
        persistentVolumeClaim:
          claimName: redis-replica-data

      # Replica configuration
      - name: redis-replica-config
        configMap:
          name: redis-replica-config
          defaultMode: 0644

      # TLS certificates (shared)
      - name: redis-tls
        secret:
          secretName: redis-tls-secret
          defaultMode: 0600

      # ACL configuration (shared)
      - name: redis-acl
        secret:
          secretName: redis-acl-secret
          defaultMode: 0600

      # Temporary filesystem
      - name: tmp
        emptyDir:
          sizeLimit: 500Mi

# ==============================================================================
# Redis Deployment Summary and Enterprise Caching Architecture
# ==============================================================================
#
# COMPREHENSIVE REDIS STRATEGY:
# =============================
#
# REDIS ARCHITECTURE OVERVIEW:
# ----------------------------
# 1. Redis Primary Deployment (redis-primary):
#    - Single primary instance with 16GB memory allocation
#    - Enterprise-grade security with TLS 1.3 and ACL authentication
#    - Hybrid AOF+RDB persistence with optimized durability
#    - Comprehensive monitoring with Redis Exporter integration
#    - Advanced performance tuning with memory and CPU optimization
#
# 2. Redis Replica Deployment (redis-replica):
#    - Two read replicas for high availability and load distribution
#    - Asynchronous replication with synchronization monitoring
#    - Read-only configuration optimized for analytics and scaling
#    - Cross-zone deployment with anti-affinity rules
#    - Automated failover capability with Sentinel integration
#
# ENTERPRISE REDIS FEATURES:
# ==========================
# Performance Optimization:
#   - Memory-optimized instances with 16GB primary, 8GB replicas
#   - Intelligent eviction policies (allkeys-lru) with lazy deletion
#   - Multi-threaded I/O with connection pooling and pipelining
#   - SSD-optimized persistence with background saving
#   - Network optimization with TCP keep-alive and backlog tuning
#
# Security and Encryption:
#   - TLS 1.3 encryption for all connections with certificate validation
#   - Redis ACL with user-based authentication and role separation
#   - Comprehensive audit logging with security event correlation
#   - Private networking with firewall rules and access restrictions
#   - FIPS 140-2 compliant encryption for data at rest and in transit
#
# High Availability and Persistence:
#   - Primary-replica architecture with automatic failover capability
#   - Hybrid AOF+RDB persistence with configurable durability levels
#   - Cross-zone deployment with anti-affinity and fault tolerance
#   - Continuous backup with point-in-time recovery capabilities
#   - Replication monitoring with lag detection and alerting
#
# Monitoring and Observability:
#   - Redis Exporter integration with comprehensive metrics collection
#   - Performance monitoring with memory, CPU, and network metrics
#   - Business metrics with cache hit ratios and operation latencies
#   - Health monitoring with startup, liveness, and readiness probes
#   - Alert integration with PagerDuty and Slack notifications
#
# OPERATIONAL EXCELLENCE:
# ======================
# Automated Operations:
#   - Rolling updates with zero-downtime deployment strategies
#   - Graceful shutdown with data persistence and connection draining
#   - Automated failover with Sentinel-based high availability
#   - Self-healing capabilities with health monitoring and recovery
#   - Capacity management with predictive scaling and optimization
#
# Resource Management:
#   - Memory-optimized node selection with dedicated Redis nodes
#   - CPU and memory resource allocation with QoS guarantees
#   - Storage optimization with SSD-backed persistent volumes
#   - Network optimization with connection pooling and multiplexing
#   - Cost optimization with right-sizing and efficiency monitoring
#
# Security and Compliance:
#   - Comprehensive security controls with encryption and authentication
#   - Compliance with SOC 2, GDPR, ISO 27001, and PCI DSS requirements
#   - Access control with RBAC and service account management
#   - Audit logging with comprehensive security event tracking
#   - Data protection with encryption at rest and in transit
#
# ==============================================================================
