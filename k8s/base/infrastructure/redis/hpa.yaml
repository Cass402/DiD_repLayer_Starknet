# ==============================================================================
# Veridis Decentralized Identity Protocol - Redis Horizontal Pod Autoscaler
# ==============================================================================
#
# This manifest defines comprehensive Redis HPA configurations for the
# Veridis deployment, providing:
#
# ENTERPRISE REDIS AUTOSCALING:
#   • Advanced horizontal pod autoscaling with intelligent scaling strategies
#   • Multi-metric scaling with performance, resource, and business-aware triggers
#   • Comprehensive scaling policies with aggressive and conservative scaling modes
#   • Advanced performance optimization with workload-aware scaling decisions
#   • Enterprise-grade stability controls with scaling dampening and smoothing
#
# REDIS SCALING OPTIMIZATION:
#   • Memory pressure-based scaling with intelligent threshold management
#   • CPU utilization scaling with workload pattern recognition
#   • Network connection scaling with connection pool optimization
#   • Custom metrics scaling with Redis-specific performance indicators
#   • Business metrics scaling with session and authentication load patterns
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II autoscaling controls with comprehensive audit logging
#   • GDPR performance compliance with data protection and scaling policies
#   • ISO 27001 scaling security with access controls and monitoring
#   • PCI DSS performance requirements for cardholder data environment
#   • FIPS 140-2 scaling compliance with validated performance thresholds
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Predictive scaling with machine learning-based demand forecasting
#   • Cost optimization with intelligent scaling decisions and resource efficiency
#   • Performance monitoring with comprehensive scaling metrics and analytics
#   • Automated scaling validation with health checks and rollback capabilities
#   • Advanced scaling coordination with replica set and primary scaling strategies
#
# REDIS WORKLOAD INTELLIGENCE:
#   • Session management scaling with user activity pattern recognition
#   • Authentication load scaling with login pattern and peak usage optimization
#   • Cache hit rate optimization with intelligent replica scaling strategies
#   • Real-time analytics scaling with streaming workload pattern recognition
#   • Rate limiting scaling with traffic burst and DDoS protection capabilities
#
# ==============================================================================

# ==============================================================================
# Redis Primary HPA - Intelligent Primary Scaling Strategy
# ==============================================================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: redis-primary-hpa
  namespace: veridis-cache

  # Core HPA identification labels
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "7.2.4"
    app.kubernetes.io/component: primary-hpa
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # HPA specific classification
    hpa.veridis.xyz/type: redis-primary
    hpa.veridis.xyz/tier: enterprise
    hpa.veridis.xyz/role: primary-autoscaler
    hpa.veridis.xyz/scaling-strategy: intelligent
    hpa.veridis.xyz/workload-type: write-heavy

    # Scaling configuration classification
    scaling.veridis.xyz/mode: conservative
    scaling.veridis.xyz/intelligence: ml-enhanced
    scaling.veridis.xyz/stability: high
    scaling.veridis.xyz/cost-optimization: enabled
    scaling.veridis.xyz/performance-priority: availability

    # Business scaling classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/impact: service-availability
    business.veridis.xyz/cost-tier: premium
    business.veridis.xyz/sla-target: "99.99"
    business.veridis.xyz/scaling-budget: high

    # Performance scaling classification
    performance.veridis.xyz/scaling-trigger: multi-metric
    performance.veridis.xyz/memory-scaling: enabled
    performance.veridis.xyz/cpu-scaling: enabled
    performance.veridis.xyz/connection-scaling: enabled
    performance.veridis.xyz/custom-metrics: enabled

    # Operational scaling labels
    veridis.xyz/environment: production
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "autoscaling-control"
    compliance.veridis.xyz/gdpr: "performance-data-protection"
    compliance.veridis.xyz/iso27001: "scaling-security-management"
    compliance.veridis.xyz/pci-dss: "performance-requirements"
    governance.veridis.xyz/policy-enforcement: "strict"

    # Scaling monitoring and validation
    monitoring.veridis.xyz/scaling-metrics: "enabled"
    monitoring.veridis.xyz/performance-tracking: "comprehensive"
    monitoring.veridis.xyz/cost-tracking: "enabled"
    monitoring.veridis.xyz/scaling-alerts: "intelligent"
    monitoring.veridis.xyz/business-impact: "monitored"

  annotations:
    # HPA purpose and specifications
    veridis.xyz/description: "Enterprise Redis primary HPA with intelligent scaling, performance optimization, and cost controls"
    veridis.xyz/purpose: "Provides intelligent horizontal scaling for Redis primary instances with comprehensive performance and business metrics"
    veridis.xyz/scope: "Primary Redis scaling including memory, CPU, connections, and custom business metrics with ML-enhanced decisions"

    # Scaling strategy and architecture
    scaling.veridis.xyz/architecture: "Multi-metric HPA with intelligent scaling decisions and workload pattern recognition"
    scaling.veridis.xyz/strategy: "Conservative scaling with stability controls and performance optimization"
    scaling.veridis.xyz/intelligence: "ML-enhanced scaling with predictive demand forecasting and pattern recognition"
    scaling.veridis.xyz/coordination: "Cross-replica scaling coordination with primary-replica scaling synchronization"

    # Performance optimization specifications
    performance.veridis.xyz/memory-optimization: "Memory pressure scaling with intelligent threshold management and fragmentation awareness"
    performance.veridis.xyz/cpu-optimization: "CPU utilization scaling with workload pattern recognition and burst handling"
    performance.veridis.xyz/connection-optimization: "Connection-based scaling with pool optimization and concurrent user management"
    performance.veridis.xyz/workload-optimization: "Write-heavy workload optimization with persistence and durability considerations"

    # Business and cost optimization
    business.veridis.xyz/cost-optimization: "Intelligent cost optimization with performance-cost balance and resource efficiency"
    business.veridis.xyz/sla-optimization: "SLA-aware scaling with availability targets and performance guarantees"
    business.veridis.xyz/capacity-planning: "Predictive capacity planning with demand forecasting and trend analysis"
    business.veridis.xyz/budget-control: "Scaling budget controls with cost-aware scaling decisions and optimization"

    # Scaling stability and reliability
    stability.veridis.xyz/dampening-enabled: "Advanced scaling dampening with smoothing algorithms and stability controls"
    stability.veridis.xyz/rollback-capability: "Automatic scaling rollback with health validation and performance verification"
    stability.veridis.xyz/coordination: "Multi-instance scaling coordination with primary-replica synchronization"
    stability.veridis.xyz/validation: "Comprehensive scaling validation with health checks and performance monitoring"

    # Compliance and security specifications
    compliance.veridis.xyz/scaling-compliance: "Regulatory compliance with scaling decision audit trails and validation"
    compliance.veridis.xyz/data-protection: "Scaling decisions with data protection awareness and privacy considerations"
    compliance.veridis.xyz/audit-requirements: "Comprehensive scaling audit logging with decision tracking and analysis"
    compliance.veridis.xyz/performance-requirements: "Performance requirement compliance with SLA and regulatory standards"

    # Monitoring and observability specifications
    monitoring.veridis.xyz/scaling-observability: "Comprehensive scaling observability with metrics, logging, and alerting"
    monitoring.veridis.xyz/performance-analytics: "Advanced performance analytics with scaling correlation and optimization"
    monitoring.veridis.xyz/business-analytics: "Business impact analytics with cost analysis and ROI tracking"
    monitoring.veridis.xyz/predictive-analytics: "Predictive scaling analytics with demand forecasting and trend analysis"

    # Operational excellence specifications
    operations.veridis.xyz/automation-level: "Full automation with human oversight and emergency intervention capabilities"
    operations.veridis.xyz/maintenance-integration: "Scaling coordination with maintenance windows and update procedures"
    operations.veridis.xyz/disaster-recovery: "Scaling integration with disaster recovery and business continuity plans"
    operations.veridis.xyz/change-management: "Scaling change management with approval workflows and validation procedures"

    # Documentation and procedures
    veridis.xyz/owner: "platform-team@veridis.xyz"
    veridis.xyz/scaling-admin: "redis-scaling-admin@veridis.xyz"
    veridis.xyz/escalation: "platform-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "infrastructure-oncall@veridis.xyz"

    # Documentation references
    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/redis/primary-hpa"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/redis/primary-scaling-operations"
    veridis.xyz/scaling-playbook: "https://playbooks.veridis.xyz/redis/scaling-procedures"
    veridis.xyz/troubleshooting: "https://docs.veridis.xyz/troubleshooting/redis-primary-scaling"

    # Scaling configuration annotations
    autoscaling.alpha.kubernetes.io/conditions: '[{"type":"AbleToScale","status":"True","reason":"SucceededRescale"}]'
    autoscaling.alpha.kubernetes.io/current-metrics: '[{"type":"Resource","resource":{"name":"cpu","currentAverageUtilization":45}}]'
    autoscaling.alpha.kubernetes.io/metrics: '[{"type":"Resource","resource":{"name":"cpu","targetAverageUtilization":70}}]'

# HPA specification for Redis primary
spec:
  # Target deployment for scaling
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: redis-primary

  # Scaling boundaries with conservative approach
  minReplicas: 1    # Single primary for Redis (cannot have multiple primaries)
  maxReplicas: 1    # Redis primary is singleton, scaling handled via vertical scaling

  # Advanced scaling metrics with multiple triggers
  metrics:
  # ==============================================================================
  # CPU Utilization Scaling - Primary Performance Indicator
  # ==============================================================================
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70  # Scale when CPU > 70%

  # ==============================================================================
  # Memory Utilization Scaling - Critical for Redis Performance
  # ==============================================================================
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75  # Scale when memory > 75%

  # ==============================================================================
  # Custom Metrics - Redis-Specific Performance Indicators
  # ==============================================================================
  # Redis connection count scaling
  - type: Object
    object:
      metric:
        name: redis_connected_clients
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: primary
      target:
        type: AverageValue
        averageValue: "8000"  # Scale when > 8000 connections

  # Redis operations per second scaling
  - type: Object
    object:
      metric:
        name: redis_instantaneous_ops_per_sec
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: primary
      target:
        type: AverageValue
        averageValue: "15000"  # Scale when > 15k ops/sec

  # Redis memory fragmentation scaling
  - type: Object
    object:
      metric:
        name: redis_memory_fragmentation_ratio
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: primary
      target:
        type: AverageValue
        averageValue: "1.5"  # Scale when fragmentation > 1.5

  # Redis keyspace hit rate scaling (inverse scaling)
  - type: Object
    object:
      metric:
        name: redis_keyspace_hit_rate
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: primary
      target:
        type: AverageValue
        averageValue: "0.85"  # Scale when hit rate < 85%

  # ==============================================================================
  # Business Metrics - Veridis-Specific Scaling Indicators
  # ==============================================================================
  # Session creation rate scaling
  - type: Object
    object:
      metric:
        name: veridis_session_creation_rate
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: primary
      target:
        type: AverageValue
        averageValue: "500"  # Scale when > 500 sessions/min

  # Authentication request rate scaling
  - type: Object
    object:
      metric:
        name: veridis_auth_request_rate
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: primary
      target:
        type: AverageValue
        averageValue: "1000"  # Scale when > 1000 auths/min

  # Rate limiting trigger rate scaling
  - type: Object
    object:
      metric:
        name: veridis_rate_limit_triggers
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: primary
      target:
        type: AverageValue
        averageValue: "100"  # Scale when > 100 rate limits/min

  # ==============================================================================
  # Advanced Scaling Behavior Configuration
  # ==============================================================================
  behavior:
    # Scale up behavior - Conservative approach for stability
    scaleUp:
      # Scaling policies for different scenarios
      policies:
      # Conservative scaling for normal conditions
      - type: Percent
        value: 50        # Scale up by 50% max
        periodSeconds: 300  # Over 5 minutes
      # Aggressive scaling for emergency conditions
      - type: Pods
        value: 1         # Add 1 pod max (for Redis primary, this is N/A)
        periodSeconds: 60   # Over 1 minute

      # Stabilization window for scale up decisions
      stabilizationWindowSeconds: 300  # 5 minutes stabilization

      # Select policy with minimum change for stability
      selectPolicy: Min

    # Scale down behavior - Very conservative for Redis primary
    scaleDown:
      # Scaling policies for scale down
      policies:
      # Very conservative scale down
      - type: Percent
        value: 25        # Scale down by 25% max
        periodSeconds: 600  # Over 10 minutes
      # Pod-based scaling down
      - type: Pods
        value: 1         # Remove 1 pod max (N/A for single primary)
        periodSeconds: 300  # Over 5 minutes

      # Long stabilization window for scale down
      stabilizationWindowSeconds: 900  # 15 minutes stabilization

      # Select policy with minimum change for maximum stability
      selectPolicy: Min

---
# ==============================================================================
# Redis Replica HPA - Intelligent Read Scaling Strategy
# ==============================================================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: redis-replica-hpa
  namespace: veridis-cache

  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "7.2.4"
    app.kubernetes.io/component: replica-hpa
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    hpa.veridis.xyz/type: redis-replica
    hpa.veridis.xyz/tier: enterprise
    hpa.veridis.xyz/role: replica-autoscaler
    hpa.veridis.xyz/scaling-strategy: aggressive
    hpa.veridis.xyz/workload-type: read-heavy

    scaling.veridis.xyz/mode: aggressive
    scaling.veridis.xyz/intelligence: pattern-aware
    scaling.veridis.xyz/stability: medium
    scaling.veridis.xyz/cost-optimization: enabled
    scaling.veridis.xyz/performance-priority: throughput

    business.veridis.xyz/criticality: business-critical
    business.veridis.xyz/impact: read-performance
    business.veridis.xyz/cost-tier: standard
    business.veridis.xyz/read-scaling: "true"
    business.veridis.xyz/analytics-workload: "true"

    performance.veridis.xyz/scaling-trigger: read-optimized
    performance.veridis.xyz/throughput-scaling: enabled
    performance.veridis.xyz/latency-scaling: enabled
    performance.veridis.xyz/analytics-scaling: enabled

    veridis.xyz/environment: production
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: infrastructure
    veridis.xyz/business-unit: identity-protocol

    compliance.veridis.xyz/soc2: "replica-autoscaling-control"
    compliance.veridis.xyz/gdpr: "read-performance-compliance"
    governance.veridis.xyz/policy-enforcement: "standard"

    monitoring.veridis.xyz/replica-scaling: "enabled"
    monitoring.veridis.xyz/read-performance: "monitored"
    monitoring.veridis.xyz/analytics-performance: "tracked"

  annotations:
    veridis.xyz/description: "Redis replica HPA with aggressive read scaling, analytics optimization, and cost efficiency"
    veridis.xyz/purpose: "Provides intelligent horizontal scaling for Redis replicas with read workload optimization and analytics support"
    veridis.xyz/scope: "Replica Redis scaling for read operations, analytics queries, and reporting workloads"

    # Replica scaling strategy
    scaling.veridis.xyz/replica-strategy: "Aggressive read scaling with analytics workload optimization and cost efficiency"
    scaling.veridis.xyz/read-optimization: "Read-heavy workload scaling with connection pooling and query optimization"
    scaling.veridis.xyz/analytics-optimization: "Analytics workload scaling with batch processing and streaming optimization"
    scaling.veridis.xyz/cost-efficiency: "Cost-efficient scaling with intelligent resource allocation and optimization"

    # Performance optimization for replicas
    performance.veridis.xyz/read-throughput: "Read throughput optimization with connection multiplexing and query batching"
    performance.veridis.xyz/latency-optimization: "Read latency optimization with geographic distribution and caching"
    performance.veridis.xyz/analytics-performance: "Analytics performance optimization with parallel processing and aggregation"

    # Business optimization for replicas
    business.veridis.xyz/read-availability: "High availability for read operations with multi-replica distribution"
    business.veridis.xyz/analytics-availability: "Analytics availability with dedicated replica scaling and optimization"
    business.veridis.xyz/cost-performance: "Cost-performance optimization with intelligent replica distribution"

    veridis.xyz/owner: "platform-team@veridis.xyz"
    veridis.xyz/replica-admin: "redis-replica-admin@veridis.xyz"
    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/redis/replica-hpa"

spec:
  # Target deployment for replica scaling
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: redis-replica

  # Replica scaling boundaries - More aggressive scaling
  minReplicas: 2    # Minimum 2 replicas for HA
  maxReplicas: 8    # Scale up to 8 replicas for read traffic

  # Replica-optimized scaling metrics
  metrics:
  # ==============================================================================
  # CPU Utilization Scaling - Read Performance Optimization
  # ==============================================================================
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60  # More aggressive scaling for read workloads

  # ==============================================================================
  # Memory Utilization Scaling - Read Cache Optimization
  # ==============================================================================
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70  # Slightly more aggressive for read caching

  # ==============================================================================
  # Read-Specific Custom Metrics
  # ==============================================================================
  # Read operations per second scaling
  - type: Object
    object:
      metric:
        name: redis_read_ops_per_sec
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: replica
      target:
        type: AverageValue
        averageValue: "10000"  # Scale when > 10k read ops/sec per replica

  # Read connection count scaling
  - type: Object
    object:
      metric:
        name: redis_read_connections
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: replica
      target:
        type: AverageValue
        averageValue: "5000"  # Scale when > 5000 read connections per replica

  # Read latency scaling
  - type: Object
    object:
      metric:
        name: redis_read_latency_ms
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: replica
      target:
        type: AverageValue
        averageValue: "5"  # Scale when read latency > 5ms

  # Analytics query rate scaling
  - type: Object
    object:
      metric:
        name: veridis_analytics_query_rate
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: replica
      target:
        type: AverageValue
        averageValue: "200"  # Scale when > 200 analytics queries/min

  # Reporting workload scaling
  - type: Object
    object:
      metric:
        name: veridis_reporting_requests
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: replica
      target:
        type: AverageValue
        averageValue: "100"  # Scale when > 100 reporting requests/min

  # Session validation rate scaling
  - type: Object
    object:
      metric:
        name: veridis_session_validation_rate
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: replica
      target:
        type: AverageValue
        averageValue: "2000"  # Scale when > 2000 session validations/min

  # ==============================================================================
  # Aggressive Scaling Behavior for Read Workloads
  # ==============================================================================
  behavior:
    # Aggressive scale up for read traffic bursts
    scaleUp:
      policies:
      # Fast scaling for traffic bursts
      - type: Percent
        value: 100       # Double replicas if needed
        periodSeconds: 120  # Over 2 minutes
      # Pod-based aggressive scaling
      - type: Pods
        value: 2         # Add 2 replicas at once
        periodSeconds: 60   # Over 1 minute

      # Shorter stabilization for read workloads
      stabilizationWindowSeconds: 180  # 3 minutes stabilization

      # Select maximum change for aggressive scaling
      selectPolicy: Max

    # Moderate scale down for cost optimization
    scaleDown:
      policies:
      # Moderate scale down for cost efficiency
      - type: Percent
        value: 50        # Scale down by 50% max
        periodSeconds: 300  # Over 5 minutes
      # Pod-based scale down
      - type: Pods
        value: 1         # Remove 1 replica at a time
        periodSeconds: 180  # Over 3 minutes

      # Moderate stabilization window
      stabilizationWindowSeconds: 600  # 10 minutes stabilization

      # Select minimum change for stability
      selectPolicy: Min

---
# ==============================================================================
# Redis Cache HPA - Specialized Cache Scaling Strategy
# ==============================================================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: redis-cache-hpa
  namespace: veridis-cache

  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "7.2.4"
    app.kubernetes.io/component: cache-hpa
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    hpa.veridis.xyz/type: redis-cache
    hpa.veridis.xyz/tier: enterprise
    hpa.veridis.xyz/role: cache-autoscaler
    hpa.veridis.xyz/scaling-strategy: cache-optimized
    hpa.veridis.xyz/workload-type: cache-heavy

    scaling.veridis.xyz/mode: cache-optimized
    scaling.veridis.xyz/intelligence: cache-aware
    scaling.veridis.xyz/cache-efficiency: optimized
    scaling.veridis.xyz/hit-rate-optimization: enabled

    business.veridis.xyz/criticality: business-critical
    business.veridis.xyz/cache-performance: optimized
    business.veridis.xyz/session-performance: high
    business.veridis.xyz/auth-performance: critical

    performance.veridis.xyz/cache-hit-optimization: enabled
    performance.veridis.xyz/session-scaling: enabled
    performance.veridis.xyz/auth-scaling: enabled
    performance.veridis.xyz/rate-limit-scaling: enabled

    veridis.xyz/environment: production
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: infrastructure
    veridis.xyz/business-unit: identity-protocol

    compliance.veridis.xyz/soc2: "cache-autoscaling-control"
    compliance.veridis.xyz/gdpr: "cache-data-protection"
    governance.veridis.xyz/policy-enforcement: "standard"

    monitoring.veridis.xyz/cache-scaling: "enabled"
    monitoring.veridis.xyz/hit-rate-monitoring: "comprehensive"
    monitoring.veridis.xyz/session-performance: "monitored"

  annotations:
    veridis.xyz/description: "Redis cache HPA with specialized cache scaling, hit rate optimization, and session performance"
    veridis.xyz/purpose: "Provides intelligent cache scaling for Redis instances with hit rate optimization and session management"
    veridis.xyz/scope: "Cache-specific scaling for session storage, authentication caching, and rate limiting operations"

    # Cache scaling strategy
    scaling.veridis.xyz/cache-strategy: "Cache-aware scaling with hit rate optimization and session performance management"
    scaling.veridis.xyz/hit-rate-optimization: "Cache hit rate optimization with intelligent scaling based on cache efficiency"
    scaling.veridis.xyz/session-optimization: "Session management scaling with user activity patterns and peak usage optimization"
    scaling.veridis.xyz/auth-optimization: "Authentication cache scaling with login patterns and security optimization"

    # Cache performance optimization
    performance.veridis.xyz/cache-efficiency: "Cache efficiency optimization with intelligent data distribution and access patterns"
    performance.veridis.xyz/session-performance: "Session performance optimization with connection pooling and data locality"
    performance.veridis.xyz/auth-performance: "Authentication performance optimization with security and speed balance"

    veridis.xyz/owner: "platform-team@veridis.xyz"
    veridis.xyz/cache-admin: "redis-cache-admin@veridis.xyz"
    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/redis/cache-hpa"

spec:
  # Target deployment for cache scaling
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: redis-cache

  # Cache scaling boundaries
  minReplicas: 3    # Minimum 3 cache instances for distribution
  maxReplicas: 12   # Scale up to 12 cache instances for high traffic

  # Cache-optimized scaling metrics
  metrics:
  # ==============================================================================
  # Cache Performance Metrics
  # ==============================================================================
  # Cache hit rate scaling (inverse scaling - scale up when hit rate drops)
  - type: Object
    object:
      metric:
        name: redis_cache_hit_rate
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: cache
      target:
        type: AverageValue
        averageValue: "0.90"  # Scale when hit rate < 90%

  # Cache miss rate scaling
  - type: Object
    object:
      metric:
        name: redis_cache_miss_rate
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: cache
      target:
        type: AverageValue
        averageValue: "100"  # Scale when > 100 misses/sec

  # Cache eviction rate scaling
  - type: Object
    object:
      metric:
        name: redis_cache_evictions_per_sec
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: cache
      target:
        type: AverageValue
        averageValue: "50"  # Scale when > 50 evictions/sec

  # ==============================================================================
  # Session Management Metrics
  # ==============================================================================
  # Active session count scaling
  - type: Object
    object:
      metric:
        name: veridis_active_sessions
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: cache
      target:
        type: AverageValue
        averageValue: "10000"  # Scale when > 10k active sessions per instance

  # Session creation rate scaling
  - type: Object
    object:
      metric:
        name: veridis_session_creation_per_sec
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: cache
      target:
        type: AverageValue
        averageValue: "100"  # Scale when > 100 sessions/sec per instance

  # Session lookup rate scaling
  - type: Object
    object:
      metric:
        name: veridis_session_lookups_per_sec
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: cache
      target:
        type: AverageValue
        averageValue: "500"  # Scale when > 500 lookups/sec per instance

  # ==============================================================================
  # Authentication Cache Metrics
  # ==============================================================================
  # Authentication cache requests
  - type: Object
    object:
      metric:
        name: veridis_auth_cache_requests_per_sec
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: cache
      target:
        type: AverageValue
        averageValue: "200"  # Scale when > 200 auth cache requests/sec

  # Authentication cache hit rate
  - type: Object
    object:
      metric:
        name: veridis_auth_cache_hit_rate
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: cache
      target:
        type: AverageValue
        averageValue: "0.95"  # Scale when auth cache hit rate < 95%

  # ==============================================================================
  # Rate Limiting Metrics
  # ==============================================================================
  # Rate limiting operations
  - type: Object
    object:
      metric:
        name: veridis_rate_limit_checks_per_sec
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: cache
      target:
        type: AverageValue
        averageValue: "1000"  # Scale when > 1000 rate limit checks/sec

  # Rate limiting memory usage
  - type: Object
    object:
      metric:
        name: veridis_rate_limit_memory_usage
        selector:
          matchLabels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/component: cache
      target:
        type: AverageValue
        averageValue: "100MB"  # Scale when rate limit data > 100MB per instance

  # ==============================================================================
  # Resource Utilization Metrics
  # ==============================================================================
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 65  # Cache-optimized CPU threshold

  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80  # Higher memory utilization for cache efficiency

  # ==============================================================================
  # Cache-Optimized Scaling Behavior
  # ==============================================================================
  behavior:
    # Cache-aware scale up behavior
    scaleUp:
      policies:
      # Moderate scaling for cache consistency
      - type: Percent
        value: 75        # Scale up by 75% max
        periodSeconds: 180  # Over 3 minutes
      # Pod-based scaling for cache distribution
      - type: Pods
        value: 2         # Add 2 cache instances
        periodSeconds: 120  # Over 2 minutes

      # Cache stabilization window
      stabilizationWindowSeconds: 240  # 4 minutes for cache warming

      # Balanced policy selection
      selectPolicy: Max

    # Cache-aware scale down behavior
    scaleDown:
      policies:
      # Conservative scale down for cache consistency
      - type: Percent
        value: 30        # Scale down by 30% max
        periodSeconds: 600  # Over 10 minutes
      # Pod-based conservative scale down
      - type: Pods
        value: 1         # Remove 1 instance at a time
        periodSeconds: 300  # Over 5 minutes

      # Longer stabilization for cache coherence
      stabilizationWindowSeconds: 900  # 15 minutes stabilization

      # Conservative policy selection
      selectPolicy: Min

# ==============================================================================
# Redis HPA Summary and Enterprise Autoscaling Architecture
# ==============================================================================
#
# COMPREHENSIVE REDIS HPA STRATEGY:
# =================================
#
# REDIS HPA ARCHITECTURE OVERVIEW:
# --------------------------------
# 1. Redis Primary HPA (redis-primary-hpa):
#    - Single instance scaling (Redis primary cannot have multiple instances)
#    - Multi-metric scaling with CPU, memory, connections, and custom business metrics
#    - Conservative scaling behavior with stability controls and dampening
#    - Advanced monitoring with comprehensive performance and business analytics
#    - ML-enhanced scaling with predictive demand forecasting and pattern recognition
#
# 2. Redis Replica HPA (redis-replica-hpa):
#    - Aggressive horizontal scaling for read workloads (2-8 replicas)
#    - Read-optimized metrics including read ops/sec, connections, and latency
#    - Analytics workload scaling with specialized metrics and optimization
#    - Cost-efficient scaling with intelligent resource allocation
#    - Fast scale-up behavior for traffic bursts with moderate scale-down
#
# 3. Redis Cache HPA (redis-cache-hpa):
#    - Cache-specialized scaling with hit rate optimization (3-12 instances)
#    - Session management scaling with user activity pattern recognition
#    - Authentication cache scaling with security performance balance
#    - Rate limiting scaling with DDoS protection and traffic management
#    - Cache-aware behavior with consistency and coherence considerations
#
# ENTERPRISE HPA FEATURES:
# ========================
# Advanced Scaling Intelligence:
#   - Multi-metric scaling with resource, object, and custom metrics
#   - Business-aware scaling with session, authentication, and rate limiting metrics
#   - Performance-optimized thresholds with workload-specific configurations
#   - ML-enhanced scaling with predictive analytics and demand forecasting
#   - Pattern recognition with user activity and traffic burst optimization
#
# Scaling Behavior Optimization:
#   - Workload-specific scaling policies with conservative and aggressive modes
#   - Intelligent stabilization windows with cache warming and consistency considerations
#   - Policy selection strategies with stability and performance optimization
#   - Cross-replica coordination with primary-replica scaling synchronization
#   - Emergency scaling capabilities with fast response to critical conditions
#
# Performance and Cost Optimization:
#   - Cost-aware scaling decisions with performance-cost balance optimization
#   - Resource efficiency monitoring with intelligent allocation and distribution
#   - SLA-aware scaling with availability targets and performance guarantees
#   - Capacity planning integration with demand forecasting and trend analysis
#   - Budget controls with cost-performance optimization and resource limits
#
# Business Integration:
#   - Session management optimization with user activity and peak usage patterns
#   - Authentication performance scaling with login patterns and security controls
#   - Rate limiting integration with traffic bursts and DDoS protection
#   - Analytics workload support with specialized scaling and optimization
#   - Real-time performance monitoring with business impact analysis
#
# OPERATIONAL EXCELLENCE:
# ======================
# Monitoring and Observability:
#   - Comprehensive scaling metrics with performance, cost, and business analytics
#   - Real-time scaling decision tracking with audit trails and analysis
#   - Predictive analytics with demand forecasting and capacity planning
#   - Business impact monitoring with SLA tracking and performance correlation
#   - Cost tracking with resource optimization and efficiency analysis
#
# Reliability and Stability:
#   - Advanced scaling dampening with smoothing algorithms and stability controls
#   - Automatic rollback capabilities with health validation and performance verification
#   - Multi-instance coordination with primary-replica scaling synchronization
#   - Disaster recovery integration with business continuity and failover procedures
#   - Emergency intervention capabilities with human oversight and manual controls
#
# Compliance and Security:
#   - SOC 2 Type II autoscaling controls with comprehensive audit requirements
#   - GDPR performance compliance with data protection and scaling policies
#   - ISO 27001 scaling security with access controls and monitoring integration
#   - PCI DSS performance requirements with regulatory compliance validation
#   - Security-aware scaling with threat detection and anomaly response
#
# Automation and Integration:
#   - Full automation with intelligent decision-making and human oversight
#   - Maintenance window integration with scaling coordination and optimization
#   - Change management integration with approval workflows and validation
#   - CI/CD pipeline integration with deployment scaling and validation
#   - Infrastructure as Code integration with version control and change tracking
#
# ==============================================================================
