# ==============================================================================
# Veridis Decentralized Identity Protocol - Redis Service
# ==============================================================================
#
# This manifest defines comprehensive Redis Service configurations for the
# Veridis deployment, providing:
#
# ENTERPRISE SERVICE ARCHITECTURE:
#   • High-performance Redis service discovery with intelligent load balancing
#   • Multi-tier service strategy with primary, replica, and monitoring endpoints
#   • Advanced networking with TLS termination and connection optimization
#   • Comprehensive security with network policies and access controls
#   • Enterprise-grade observability with service metrics and health monitoring
#
# REDIS SERVICE OPTIMIZATION:
#   • Connection pooling with intelligent routing and session affinity
#   • Load balancing optimization with health-aware traffic distribution
#   • Network performance tuning with connection multiplexing and keep-alive
#   • Service mesh integration with advanced traffic management
#   • Geographic load balancing with latency-optimized routing
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II service security controls with comprehensive audit logging
#   • GDPR network compliance with data protection and privacy controls
#   • ISO 27001 network security with access controls and monitoring
#   • PCI DSS network requirements for cardholder data environment protection
#   • FIPS 140-2 network encryption with validated cryptographic protocols
#
# ENTERPRISE HIGH AVAILABILITY:
#   • Multi-tier service architecture with primary, replica, and headless services
#   • Advanced health checking with application-aware service discovery
#   • Automated failover with service endpoint management and traffic routing
#   • Cross-zone service distribution with geographic load balancing
#   • Disaster recovery with service continuity and traffic management
#
# OPERATIONAL EXCELLENCE CONTROLS:
#   • Automated service deployment with policy-based configuration management
#   • Comprehensive service monitoring with performance metrics and alerting
#   • Network security with service mesh integration and policy enforcement
#   • Service lifecycle management with automated updates and rollbacks
#   • Incident response with service-aware monitoring and escalation procedures
#
# ==============================================================================

# ==============================================================================
# Redis Primary Service - High-Performance Primary Access
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: redis-primary
  namespace: veridis-cache

  # Core service identification labels
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "7.2.4"
    app.kubernetes.io/component: primary-service
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Redis service classification
    redis.veridis.xyz/service-type: primary-access
    redis.veridis.xyz/tier: enterprise
    redis.veridis.xyz/role: primary-endpoint
    redis.veridis.xyz/access-pattern: read-write
    redis.veridis.xyz/connection-type: persistent

    # Service performance classification
    service.veridis.xyz/performance-tier: ultra-high
    service.veridis.xyz/latency-class: ultra-low
    service.veridis.xyz/throughput-class: high
    service.veridis.xyz/connection-pooling: enabled
    service.veridis.xyz/session-affinity: client-ip

    # Business service classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/cost-tier: premium
    business.veridis.xyz/revenue-impact: direct
    business.veridis.xyz/sla-tier: platinum
    business.veridis.xyz/priority: highest

    # Network and security classification
    network.veridis.xyz/encryption: tls-1.3
    network.veridis.xyz/access-control: strict
    network.veridis.xyz/firewall-rules: redis-primary
    network.veridis.xyz/monitoring: comprehensive
    security.veridis.xyz/data-classification: confidential

    # Service availability classification
    availability.veridis.xyz/ha-tier: maximum
    availability.veridis.xyz/health-monitoring: advanced
    availability.veridis.xyz/failover-strategy: automatic
    availability.veridis.xyz/load-balancing: intelligent
    availability.veridis.xyz/sla-target: "99.99"

    # Service mesh and observability
    mesh.veridis.xyz/enabled: "true"
    mesh.veridis.xyz/protocol: redis
    mesh.veridis.xyz/encryption: mTLS
    mesh.veridis.xyz/monitoring: enabled
    mesh.veridis.xyz/policy-enforcement: strict

    # Operational service labels
    veridis.xyz/environment: production
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "service-security-control"
    compliance.veridis.xyz/gdpr: "network-data-protection"
    compliance.veridis.xyz/iso27001: "network-security-management"
    compliance.veridis.xyz/pci-dss: "secure-network-service"
    governance.veridis.xyz/policy-enforcement: "strict"

    # Service monitoring and alerting
    monitoring.veridis.xyz/service-metrics: "enabled"
    monitoring.veridis.xyz/health-checks: "comprehensive"
    monitoring.veridis.xyz/alerting-integration: "pagerduty"
    monitoring.veridis.xyz/performance-monitoring: "detailed"

  annotations:
    # Service purpose and specifications
    veridis.xyz/description: "High-performance Redis primary service with enterprise-grade networking, security, and monitoring"
    veridis.xyz/purpose: "Provides primary Redis access for write operations, session management, and critical cache operations"
    veridis.xyz/scope: "Primary Redis endpoint for authentication, session storage, rate limiting, and real-time data access"

    # Service architecture and networking
    service.veridis.xyz/architecture: "ClusterIP service with intelligent load balancing and session affinity"
    service.veridis.xyz/networking-strategy: "Private cluster networking with TLS termination and connection optimization"
    service.veridis.xyz/connection-management: "Connection pooling with intelligent routing and health-aware distribution"
    service.veridis.xyz/load-balancing-algorithm: "Round-robin with health checking and session affinity"

    # Performance optimization specifications
    performance.veridis.xyz/connection-optimization: "Connection pooling with keep-alive and multiplexing optimization"
    performance.veridis.xyz/latency-optimization: "Optimized routing with minimal network hops and connection reuse"
    performance.veridis.xyz/throughput-optimization: "High-throughput networking with bandwidth optimization"
    performance.veridis.xyz/scalability-strategy: "Horizontal scaling with intelligent load distribution"

    # Security and network protection
    security.veridis.xyz/network-security: "Private networking with firewall rules and access control policies"
    security.veridis.xyz/encryption-configuration: "TLS 1.3 encryption with certificate-based authentication"
    security.veridis.xyz/access-control: "Network policies with IP filtering and connection rate limiting"
    security.veridis.xyz/monitoring-integration: "Comprehensive network monitoring with anomaly detection"

    # High availability and failover
    availability.veridis.xyz/ha-configuration: "Active-passive configuration with automatic failover detection"
    availability.veridis.xyz/health-monitoring: "Continuous health monitoring with application-aware checks"
    availability.veridis.xyz/failover-strategy: "Automatic endpoint switching with minimal downtime"
    availability.veridis.xyz/disaster-recovery: "Cross-zone service distribution with recovery automation"

    # Service mesh and traffic management
    mesh.veridis.xyz/traffic-policy: "Intelligent traffic routing with health-based decisions"
    mesh.veridis.xyz/security-policy: "mTLS encryption with identity-based access control"
    mesh.veridis.xyz/observability: "Comprehensive service metrics with distributed tracing"
    mesh.veridis.xyz/circuit-breaker: "Automatic circuit breaking with failure detection"

    # Compliance and regulatory requirements
    compliance.veridis.xyz/network-compliance: "Network security compliance with regulatory requirements"
    compliance.veridis.xyz/data-protection: "Network-level data protection with encryption and access controls"
    compliance.veridis.xyz/audit-logging: "Comprehensive network access logging with audit trails"
    compliance.veridis.xyz/regulatory-reporting: "Automated compliance reporting with network metrics"

    # Service lifecycle and management
    service.veridis.xyz/lifecycle-management: "Automated service updates with rolling deployment strategies"
    service.veridis.xyz/version-management: "Blue-green deployment with canary release capabilities"
    service.veridis.xyz/rollback-strategy: "Automated rollback with health validation and traffic switching"
    service.veridis.xyz/capacity-management: "Dynamic capacity adjustment with auto-scaling integration"

    # Monitoring and observability specifications
    monitoring.veridis.xyz/service-monitoring: "Real-time service metrics with performance analysis"
    monitoring.veridis.xyz/health-monitoring: "Multi-level health checks with application awareness"
    monitoring.veridis.xyz/performance-monitoring: "Latency, throughput, and error rate monitoring"
    monitoring.veridis.xyz/business-monitoring: "Business impact analysis with SLA tracking"

    # Cost optimization and efficiency
    cost.veridis.xyz/resource-optimization: "Optimized resource allocation with cost-performance balance"
    cost.veridis.xyz/traffic-optimization: "Intelligent traffic routing with bandwidth optimization"
    cost.veridis.xyz/efficiency-monitoring: "Service efficiency tracking with optimization recommendations"

    # Operational procedures and contacts
    veridis.xyz/owner: "platform-team@veridis.xyz"
    veridis.xyz/service-admin: "redis-service-admin@veridis.xyz"
    veridis.xyz/escalation: "platform-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "infrastructure-oncall@veridis.xyz"

    # Documentation and procedures
    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/redis/primary-service"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/redis/primary-service-operations"
    veridis.xyz/monitoring-dashboard: "https://grafana.veridis.xyz/d/redis-primary-service"
    veridis.xyz/troubleshooting: "https://docs.veridis.xyz/troubleshooting/redis-primary-service"

    # Service mesh annotations
    istio.io/rev: "default"
    sidecar.istio.io/inject: "true"
    traffic.sidecar.istio.io/includeInboundPorts: "6379,6380"
    traffic.sidecar.istio.io/excludeOutboundPorts: "9121"

    # Network policy annotations
    network-policy.veridis.xyz/ingress-allowed: "veridis-application,veridis-auth,veridis-identity"
    network-policy.veridis.xyz/egress-allowed: "veridis-monitoring,veridis-logging"
    network-policy.veridis.xyz/dns-policy: "cluster-first"

# Service specification
spec:
  # Service type for internal cluster access
  type: ClusterIP

  # Cluster IP allocation strategy
  ipFamilyPolicy: SingleStack
  ipFamilies:
  - IPv4

  # Session affinity for connection stickiness
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours for session persistence

  # Service ports configuration
  ports:
  # Primary Redis port (non-TLS)
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
    appProtocol: redis

  # Primary Redis TLS port
  - name: redis-tls
    port: 6380
    targetPort: redis-tls
    protocol: TCP
    appProtocol: rediss

  # Metrics port for monitoring
  - name: metrics
    port: 9121
    targetPort: metrics
    protocol: TCP
    appProtocol: http

  # Selector for Redis primary pods
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/component: primary
    redis.veridis.xyz/role: cache-primary

---
# ==============================================================================
# Redis Replica Service - High-Performance Read Access
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: redis-replica
  namespace: veridis-cache

  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "7.2.4"
    app.kubernetes.io/component: replica-service
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    redis.veridis.xyz/service-type: replica-access
    redis.veridis.xyz/tier: enterprise
    redis.veridis.xyz/role: replica-endpoint
    redis.veridis.xyz/access-pattern: read-only
    redis.veridis.xyz/connection-type: load-balanced

    service.veridis.xyz/performance-tier: high
    service.veridis.xyz/latency-class: low
    service.veridis.xyz/throughput-class: high
    service.veridis.xyz/connection-pooling: enabled
    service.veridis.xyz/load-balancing: round-robin

    business.veridis.xyz/criticality: business-critical
    business.veridis.xyz/cost-tier: standard
    business.veridis.xyz/revenue-impact: indirect
    business.veridis.xyz/read-scaling: "true"
    business.veridis.xyz/analytics-workload: "true"

    network.veridis.xyz/encryption: tls-1.3
    network.veridis.xyz/access-control: standard
    network.veridis.xyz/firewall-rules: redis-replica
    security.veridis.xyz/data-classification: confidential

    availability.veridis.xyz/ha-tier: high
    availability.veridis.xyz/health-monitoring: standard
    availability.veridis.xyz/load-balancing: round-robin
    availability.veridis.xyz/sla-target: "99.9"

    mesh.veridis.xyz/enabled: "true"
    mesh.veridis.xyz/protocol: redis
    mesh.veridis.xyz/load-balancing: round-robin

    veridis.xyz/environment: production
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: infrastructure
    veridis.xyz/business-unit: identity-protocol

    compliance.veridis.xyz/soc2: "replica-service-control"
    compliance.veridis.xyz/gdpr: "replica-data-protection"
    governance.veridis.xyz/policy-enforcement: "standard"

    monitoring.veridis.xyz/service-metrics: "enabled"
    monitoring.veridis.xyz/health-checks: "standard"
    monitoring.veridis.xyz/alerting-integration: "slack"

  annotations:
    veridis.xyz/description: "Redis replica service for read-only access with intelligent load balancing across multiple replicas"
    veridis.xyz/purpose: "Provides read-only Redis access for analytics, reporting, and read-heavy operations"
    veridis.xyz/scope: "Read-only access to cached data, analytics queries, session validation, and load distribution"

    # Replica service configuration
    service.veridis.xyz/replica-strategy: "Round-robin load balancing across healthy replica instances"
    service.veridis.xyz/read-optimization: "Optimized for read-heavy workloads with connection pooling"
    service.veridis.xyz/analytics-support: "Enhanced support for analytics and reporting workloads"
    service.veridis.xyz/load-distribution: "Intelligent load distribution with health-aware routing"

    # Performance optimization for read workloads
    performance.veridis.xyz/read-optimization: "Connection pooling optimized for read operations"
    performance.veridis.xyz/cache-locality: "Geographic routing for optimal cache access patterns"
    performance.veridis.xyz/connection-reuse: "Connection reuse optimization for read workloads"

    # High availability for read access
    availability.veridis.xyz/replica-failover: "Automatic replica endpoint management with health checking"
    availability.veridis.xyz/read-availability: "High availability for read operations with multiple replicas"
    availability.veridis.xyz/load-balancing-strategy: "Health-aware load balancing with automatic failover"

    veridis.xyz/owner: "platform-team@veridis.xyz"
    veridis.xyz/replica-admin: "redis-replica-admin@veridis.xyz"
    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/redis/replica-service"

    # Service mesh annotations for replicas
    istio.io/rev: "default"
    sidecar.istio.io/inject: "true"
    traffic.sidecar.istio.io/includeInboundPorts: "6379,6380"

    # Network policy for replica access
    network-policy.veridis.xyz/ingress-allowed: "veridis-analytics,veridis-reporting,veridis-monitoring"
    network-policy.veridis.xyz/read-only-access: "true"

spec:
  type: ClusterIP

  ipFamilyPolicy: SingleStack
  ipFamilies:
  - IPv4

  # No session affinity for load balancing across replicas
  sessionAffinity: None

  ports:
  # Replica Redis port (non-TLS)
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
    appProtocol: redis

  # Replica Redis TLS port
  - name: redis-tls
    port: 6380
    targetPort: redis-tls
    protocol: TCP
    appProtocol: rediss

  # Metrics port
  - name: metrics
    port: 9121
    targetPort: metrics
    protocol: TCP
    appProtocol: http

  # Selector for Redis replica pods
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/component: replica
    redis.veridis.xyz/role: cache-replica

---
# ==============================================================================
# Redis Headless Service - Direct Pod Access and Service Discovery
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
  namespace: veridis-cache

  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "7.2.4"
    app.kubernetes.io/component: headless-service
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    redis.veridis.xyz/service-type: headless-discovery
    redis.veridis.xyz/tier: enterprise
    redis.veridis.xyz/role: service-discovery
    redis.veridis.xyz/access-pattern: direct-pod
    redis.veridis.xyz/connection-type: stateful

    service.veridis.xyz/discovery-type: dns-based
    service.veridis.xyz/pod-access: direct
    service.veridis.xyz/stateful-access: enabled
    service.veridis.xyz/sentinel-integration: enabled

    business.veridis.xyz/criticality: business-critical
    business.veridis.xyz/sentinel-operations: "true"
    business.veridis.xyz/cluster-management: "true"

    network.veridis.xyz/service-discovery: dns-based
    network.veridis.xyz/pod-addressability: direct
    security.veridis.xyz/data-classification: confidential

    availability.veridis.xyz/service-discovery: comprehensive
    availability.veridis.xyz/pod-health-tracking: enabled
    availability.veridis.xyz/sentinel-support: enabled

    mesh.veridis.xyz/enabled: "true"
    mesh.veridis.xyz/service-discovery: dns
    mesh.veridis.xyz/pod-tracking: enabled

    veridis.xyz/environment: production
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: infrastructure
    veridis.xyz/business-unit: identity-protocol

    compliance.veridis.xyz/soc2: "service-discovery-control"
    compliance.veridis.xyz/governance: "service-mesh-integration"

    monitoring.veridis.xyz/pod-monitoring: "enabled"
    monitoring.veridis.xyz/service-discovery: "comprehensive"

  annotations:
    veridis.xyz/description: "Redis headless service for direct pod access, service discovery, and Redis Sentinel integration"
    veridis.xyz/purpose: "Provides direct pod addressability for Redis Sentinel, cluster management, and advanced Redis operations"
    veridis.xyz/scope: "Service discovery, direct pod access, Sentinel operations, cluster management, and monitoring"

    # Headless service configuration
    service.veridis.xyz/headless-strategy: "DNS-based service discovery with direct pod addressability"
    service.veridis.xyz/sentinel-integration: "Redis Sentinel integration with pod-level health tracking"
    service.veridis.xyz/cluster-operations: "Support for cluster management and Redis administration"
    service.veridis.xyz/monitoring-integration: "Individual pod monitoring and health tracking"

    # Service discovery specifications
    discovery.veridis.xyz/dns-policy: "Pod-level DNS records for direct addressability"
    discovery.veridis.xyz/health-tracking: "Individual pod health monitoring and status tracking"
    discovery.veridis.xyz/sentinel-discovery: "Redis Sentinel pod discovery and cluster awareness"

    # Operational management
    operations.veridis.xyz/cluster-management: "Support for Redis cluster operations and management"
    operations.veridis.xyz/maintenance-access: "Direct pod access for maintenance and troubleshooting"
    operations.veridis.xyz/backup-operations: "Individual pod backup and recovery operations"

    veridis.xyz/owner: "platform-team@veridis.xyz"
    veridis.xyz/cluster-admin: "redis-cluster-admin@veridis.xyz"
    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/redis/headless-service"

    # Service mesh annotations for headless service
    istio.io/rev: "default"
    sidecar.istio.io/inject: "false"  # Typically disabled for headless services

    # Network policy for direct pod access
    network-policy.veridis.xyz/ingress-allowed: "veridis-sentinel,veridis-admin,veridis-monitoring"
    network-policy.veridis.xyz/pod-access: "direct"

spec:
  # Headless service configuration
  type: ClusterIP
  clusterIP: None  # Makes this a headless service

  ipFamilyPolicy: SingleStack
  ipFamilies:
  - IPv4

  # Publish not ready addresses for service discovery
  publishNotReadyAddresses: true

  ports:
  # Redis port for direct pod access
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
    appProtocol: redis

  # Redis TLS port for secure direct access
  - name: redis-tls
    port: 6380
    targetPort: redis-tls
    protocol: TCP
    appProtocol: rediss

  # Metrics port for individual pod monitoring
  - name: metrics
    port: 9121
    targetPort: metrics
    protocol: TCP
    appProtocol: http

  # Selector for all Redis pods (primary and replica)
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    redis.veridis.xyz/tier: enterprise

---
# ==============================================================================
# Redis Monitoring Service - Comprehensive Metrics Access
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: redis-monitoring
  namespace: veridis-cache

  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "7.2.4"
    app.kubernetes.io/component: monitoring-service
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    redis.veridis.xyz/service-type: monitoring-access
    redis.veridis.xyz/tier: enterprise
    redis.veridis.xyz/role: metrics-endpoint
    redis.veridis.xyz/monitoring-scope: comprehensive

    service.veridis.xyz/metrics-aggregation: enabled
    service.veridis.xyz/prometheus-integration: native
    service.veridis.xyz/grafana-integration: enabled
    service.veridis.xyz/alerting-integration: comprehensive

    monitoring.veridis.xyz/metrics-collection: comprehensive
    monitoring.veridis.xyz/performance-monitoring: detailed
    monitoring.veridis.xyz/business-monitoring: enabled
    monitoring.veridis.xyz/security-monitoring: enabled
    monitoring.veridis.xyz/health-monitoring: advanced

    business.veridis.xyz/observability: comprehensive
    business.veridis.xyz/sla-monitoring: enabled
    business.veridis.xyz/performance-analysis: detailed

    network.veridis.xyz/metrics-access: secure
    security.veridis.xyz/monitoring-security: strict
    security.veridis.xyz/data-classification: internal

    availability.veridis.xyz/monitoring-availability: high
    availability.veridis.xyz/metrics-reliability: guaranteed

    mesh.veridis.xyz/enabled: "true"
    mesh.veridis.xyz/metrics-collection: enabled
    mesh.veridis.xyz/observability: comprehensive

    veridis.xyz/environment: production
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: infrastructure
    veridis.xyz/business-unit: identity-protocol

    compliance.veridis.xyz/monitoring-compliance: comprehensive
    governance.veridis.xyz/metrics-governance: strict

  annotations:
    veridis.xyz/description: "Redis monitoring service for comprehensive metrics collection, performance monitoring, and observability"
    veridis.xyz/purpose: "Provides centralized access to Redis metrics for monitoring, alerting, and performance analysis"
    veridis.xyz/scope: "Performance metrics, business metrics, security metrics, health monitoring, and SLA tracking"

    # Monitoring service configuration
    monitoring.veridis.xyz/metrics-strategy: "Comprehensive metrics collection with multi-tier monitoring"
    monitoring.veridis.xyz/collection-frequency: "High-frequency metrics with intelligent sampling"
    monitoring.veridis.xyz/aggregation-strategy: "Real-time aggregation with historical trend analysis"
    monitoring.veridis.xyz/alerting-framework: "Multi-tier alerting with intelligent correlation"

    # Metrics and observability specifications
    observability.veridis.xyz/metrics-scope: "Performance, business, security, and operational metrics"
    observability.veridis.xyz/tracing-integration: "Distributed tracing with correlation analysis"
    observability.veridis.xyz/logging-integration: "Centralized logging with metrics correlation"
    observability.veridis.xyz/dashboard-integration: "Real-time dashboards with drill-down capabilities"

    # Performance monitoring specifications
    performance.veridis.xyz/key-metrics: "Latency, throughput, error rates, resource utilization, connection metrics"
    performance.veridis.xyz/sla-monitoring: "SLA compliance tracking with threshold alerting"
    performance.veridis.xyz/capacity-monitoring: "Capacity utilization with predictive analytics"

    veridis.xyz/owner: "platform-team@veridis.xyz"
    veridis.xyz/monitoring-admin: "monitoring-admin@veridis.xyz"
    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/redis/monitoring-service"

    # Service mesh annotations for monitoring
    istio.io/rev: "default"
    sidecar.istio.io/inject: "true"
    traffic.sidecar.istio.io/includeInboundPorts: "9121"

    # Network policy for monitoring access
    network-policy.veridis.xyz/ingress-allowed: "veridis-monitoring,veridis-prometheus,veridis-grafana"
    network-policy.veridis.xyz/metrics-access: "prometheus-scraping"

spec:
  type: ClusterIP

  ipFamilyPolicy: SingleStack
  ipFamilies:
  - IPv4

  # No session affinity for metrics collection
  sessionAffinity: None

  ports:
  # Metrics port for all Redis instances
  - name: metrics
    port: 9121
    targetPort: metrics
    protocol: TCP
    appProtocol: http

  # Additional metrics port for enhanced monitoring
  - name: metrics-extended
    port: 9122
    targetPort: 9122
    protocol: TCP
    appProtocol: http

  # Selector for all Redis pods with monitoring enabled
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    monitoring.veridis.xyz/scrape: "true"

---
# ==============================================================================
# Redis External Service - LoadBalancer for External Access (Optional)
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: redis-external
  namespace: veridis-cache

  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "7.2.4"
    app.kubernetes.io/component: external-service
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    redis.veridis.xyz/service-type: external-access
    redis.veridis.xyz/tier: enterprise
    redis.veridis.xyz/role: external-endpoint
    redis.veridis.xyz/access-pattern: external-tls
    redis.veridis.xyz/security-level: maximum

    service.veridis.xyz/external-access: secure
    service.veridis.xyz/load-balancer: aws-nlb
    service.veridis.xyz/tls-termination: service-level
    service.veridis.xyz/ip-filtering: enabled

    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/external-integration: "true"
    business.veridis.xyz/partner-access: "true"

    network.veridis.xyz/encryption: tls-1.3
    network.veridis.xyz/access-control: maximum
    network.veridis.xyz/firewall-rules: redis-external
    network.veridis.xyz/ddos-protection: enabled
    security.veridis.xyz/data-classification: confidential

    availability.veridis.xyz/ha-tier: maximum
    availability.veridis.xyz/external-sla: "99.99"
    availability.veridis.xyz/load-balancing: geographic

    compliance.veridis.xyz/external-access: regulated
    compliance.veridis.xyz/data-sovereignty: enforced
    governance.veridis.xyz/external-policy: strict

    veridis.xyz/environment: production
    veridis.xyz/team: platform-engineering
    veridis.xyz/cost-center: infrastructure
    veridis.xyz/business-unit: identity-protocol

  annotations:
    veridis.xyz/description: "Redis external service for secure external access with enterprise-grade security and compliance"
    veridis.xyz/purpose: "Provides secure external Redis access for partner integrations and external applications"
    veridis.xyz/scope: "External Redis access with TLS encryption, IP filtering, and comprehensive security controls"

    # External service configuration
    service.veridis.xyz/external-strategy: "AWS Network Load Balancer with TLS termination and IP filtering"
    service.veridis.xyz/security-configuration: "Maximum security with TLS 1.3, IP allowlisting, and DDoS protection"
    service.veridis.xyz/compliance-configuration: "Regulatory compliance with data sovereignty and audit logging"
    service.veridis.xyz/monitoring-integration: "Comprehensive external access monitoring with security analytics"

    # Load balancer configuration
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-west-2:123456789012:certificate/redis-external-cert"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "redis-tls"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "60"

    # Security and access control
    service.beta.kubernetes.io/aws-load-balancer-source-ranges: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
    service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "veridis-redis-access-logs"

    # Performance and availability
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "TCP"

    # External access security
    security.veridis.xyz/external-security: "TLS 1.3 encryption with certificate pinning and IP allowlisting"
    security.veridis.xyz/access-logging: "Comprehensive access logging with security event correlation"
    security.veridis.xyz/ddos-protection: "AWS Shield integration with rate limiting and anomaly detection"
    security.veridis.xyz/compliance-monitoring: "Regulatory compliance monitoring with audit trails"

    # External service monitoring
    monitoring.veridis.xyz/external-monitoring: "External access monitoring with performance and security metrics"
    monitoring.veridis.xyz/sla-monitoring: "External SLA monitoring with availability and performance tracking"
    monitoring.veridis.xyz/security-monitoring: "Security event monitoring with threat detection and response"

    veridis.xyz/owner: "platform-team@veridis.xyz"
    veridis.xyz/external-admin: "redis-external-admin@veridis.xyz"
    veridis.xyz/security-contact: "security-team@veridis.xyz"
    veridis.xyz/documentation: "https://docs.veridis.xyz/infrastructure/redis/external-service"

spec:
  type: LoadBalancer

  ipFamilyPolicy: SingleStack
  ipFamilies:
  - IPv4

  # External traffic policy for source IP preservation
  externalTrafficPolicy: Local

  # Session affinity for external connections
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600  # 1 hour for external sessions

  # Load balancer source ranges (IP allowlisting)
  loadBalancerSourceRanges:
  - "10.0.0.0/8"      # Private networks
  - "172.16.0.0/12"   # Private networks
  - "192.168.0.0/16"  # Private networks
  # Add specific partner/client IP ranges as needed

  ports:
  # External Redis TLS port (primary access)
  - name: redis-tls
    port: 6380
    targetPort: redis-tls
    protocol: TCP
    appProtocol: rediss

  # External metrics port (restricted access)
  - name: metrics
    port: 9121
    targetPort: metrics
    protocol: TCP
    appProtocol: http

  # Selector for Redis primary pod (external access)
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/component: primary
    redis.veridis.xyz/role: cache-primary

# ==============================================================================
# Redis Service Summary and Enterprise Networking Architecture
# ==============================================================================
#
# COMPREHENSIVE REDIS SERVICE STRATEGY:
# =====================================
#
# REDIS SERVICE ARCHITECTURE OVERVIEW:
# ------------------------------------
# 1. Redis Primary Service (redis-primary):
#    - ClusterIP service for primary Redis access with session affinity
#    - TLS and non-TLS ports (6379, 6380) with metrics endpoint (9121)
#    - Optimized for write operations and critical cache access
#    - Session affinity with 3-hour timeout for connection persistence
#    - Service mesh integration with Istio sidecar injection
#
# 2. Redis Replica Service (redis-replica):
#    - ClusterIP service for read-only access with round-robin load balancing
#    - Optimized for read-heavy workloads and analytics operations
#    - No session affinity for optimal load distribution
#    - Support for multiple replica instances with health-aware routing
#    - Enhanced monitoring and performance optimization for read workloads
#
# 3. Redis Headless Service (redis-headless):
#    - Headless service for direct pod access and service discovery
#    - DNS-based service discovery with individual pod addressability
#    - Redis Sentinel integration with cluster management support
#    - Direct pod access for maintenance and advanced operations
#    - Comprehensive pod-level monitoring and health tracking
#
# 4. Redis Monitoring Service (redis-monitoring):
#    - Dedicated service for metrics collection and observability
#    - Prometheus integration with comprehensive metrics exposure
#    - Multi-tier monitoring with performance, business, and security metrics
#    - Centralized metrics access for monitoring and alerting systems
#    - Enhanced observability with distributed tracing integration
#
# 5. Redis External Service (redis-external):
#    - LoadBalancer service for secure external access (optional)
#    - AWS Network Load Balancer with TLS termination and IP filtering
#    - Maximum security with DDoS protection and compliance controls
#    - Partner integration support with regulated external access
#    - Comprehensive security monitoring and audit logging
#
# ENTERPRISE SERVICE FEATURES:
# ============================
# Advanced Networking:
#   - Multiple service types for different access patterns and requirements
#   - Intelligent load balancing with health-aware traffic distribution
#   - Session affinity optimization for connection persistence and performance
#   - Service mesh integration with Istio for advanced traffic management
#   - Network policy integration for micro-segmentation and security
#
# Security and Compliance:
#   - TLS 1.3 encryption for all external connections with certificate validation
#   - Network policy enforcement with ingress and egress traffic control
#   - IP allowlisting for external access with source range restrictions
#   - Comprehensive security monitoring with threat detection and response
#   - Regulatory compliance with SOC 2, GDPR, ISO 27001, and PCI DSS requirements
#
# High Availability and Performance:
#   - Multi-tier service architecture with primary, replica, and monitoring services
#   - Health-aware load balancing with automatic failover capabilities
#   - Geographic load balancing with latency optimization
#   - Connection optimization with pooling and multiplexing support
#   - Performance monitoring with SLA tracking and optimization
#
# Service Discovery and Management:
#   - DNS-based service discovery with cluster-local addressing
#   - Headless service for direct pod access and stateful operations
#   - Service mesh integration for advanced service discovery and routing
#   - Comprehensive service monitoring with health checks and metrics
#   - Automated service lifecycle management with rolling updates
#
# OPERATIONAL EXCELLENCE:
# ======================
# Service Lifecycle Management:
#   - Automated service deployment with policy-based configuration
#   - Rolling updates with zero-downtime service availability
#   - Blue-green deployment support with canary release capabilities
#   - Automated rollback with health validation and traffic switching
#   - Comprehensive service testing with health checks and validation
#
# Monitoring and Observability:
#   - Multi-tier service monitoring with performance and business metrics
#   - Real-time service health monitoring with automated alerting
#   - Comprehensive service metrics with Prometheus integration
#   - Distributed tracing with service correlation and analysis
#   - Business impact monitoring with SLA tracking and reporting
#
# Cost Optimization and Efficiency:
#   - Intelligent resource allocation with performance-cost optimization
#   - Traffic optimization with efficient routing and load balancing
#   - Service efficiency monitoring with optimization recommendations
#   - Cost attribution with service-level cost tracking and reporting
#   - Capacity optimization with predictive analytics and auto-scaling
#
# ==============================================================================
