# ==============================================================================
# Veridis Decentralized Identity Protocol - Prometheus Monitoring Secret Configuration
# ==============================================================================
#
# This manifest defines comprehensive Prometheus Monitoring Secrets for the
# decentralized identity protocol, providing:
#
# ENTERPRISE VERIDIS PROMETHEUS SECRET ARCHITECTURE:
#   • Advanced Prometheus secret with intelligent credential management and performance-based secret optimization
#   • Multi-tier secret architecture with development, testing, staging, and production environments
#   • Comprehensive observability framework with secret policies, credential optimization, Prometheus integration
#   • Advanced lifecycle management with automated secret optimization, Prometheus control, and credential enhancement
#   • Enterprise-grade intelligence with comprehensive analytics and Prometheus secret performance insights
#
# VERIDIS PROMETHEUS SECRET OPTIMIZATION:
#   • High-performance secret with intelligent credential management and Prometheus secret optimization
#   • Intelligent secret traffic management with responsive policies and performance-based secret decisions
#   • Advanced credential management with business intelligence and secret-based Prometheus control
#   • Comprehensive observability control with intelligent Prometheus secret management and credential enhancement
#   • Enterprise acceleration with predictive Prometheus secret management and credential optimization
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II Prometheus secret controls with comprehensive audit and credential requirements
#   • GDPR Prometheus secret compliance with data protection, privacy controls, and credential management
#   • ISO 27001 Prometheus secret management with comprehensive framework integration
#   • NIST 800-190 container Prometheus secret security with credential-specific validation and compliance
#   • Zero-knowledge protocol compliance with regulatory frameworks and Prometheus secret best practices
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent Prometheus secret lifecycle management with automated provisioning and credential optimization
#   • Predictive credential analytics with capacity planning and Prometheus secret intelligence
#   • Advanced monitoring integration with Prometheus secret analytics and credential business intelligence
#   • Comprehensive observability control with Prometheus secret preservation and credential optimization
#   • Business continuity Prometheus secret with credential guarantees and secret optimization
#
# PROMETHEUS SECRET ACCELERATION INTELLIGENCE:
#   • Prometheus secret usage analytics with credential patterns and optimization recommendations
#   • Credential monitoring with Prometheus secret latency and management optimization intelligence
#   • Development efficiency with Prometheus secret analytics and deployment optimization procedures
#   • Cost optimization with Prometheus secret utilization analysis and credential capacity planning procedures
#   • Quality assurance with Prometheus secret metrics and observability validation procedures
#
# ==============================================================================

# ==============================================================================
# Veridis Prometheus Monitoring - Primary Production Secret
# ==============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: veridis-prometheus-secret
  namespace: veridis-infrastructure

  # Core Veridis Prometheus Secret identification labels
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "2.48.1"
    app.kubernetes.io/component: prometheus-secret
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Prometheus Secret specific classification
    prometheus.veridis.xyz/type: monitoring-prometheus-secret
    prometheus.veridis.xyz/category: production-secret
    prometheus.veridis.xyz/role: primary-prometheus-secret
    prometheus.veridis.xyz/performance-class: high-performance-prometheus-secret
    prometheus.veridis.xyz/security-level: enterprise

    # Monitoring Prometheus Secret classification
    monitoring.veridis.xyz/prometheus-secret-type: intelligent-prometheus-secret
    monitoring.veridis.xyz/secret-type: monitoring-secret
    monitoring.veridis.xyz/performance-tier: high-performance
    monitoring.veridis.xyz/optimization: enabled
    monitoring.veridis.xyz/features: full-monitoring-secret-stack

    # Observability Prometheus Secret classification
    observability.veridis.xyz/tier: production
    observability.veridis.xyz/optimization: intelligent-monitoring-secret-management
    observability.veridis.xyz/credential-management: advanced
    observability.veridis.xyz/secret-rotation: optimized
    observability.veridis.xyz/efficiency: maximum

    # Business Prometheus Secret classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/impact: high-monitoring-secret-performance
    business.veridis.xyz/cost-tier: production
    business.veridis.xyz/sla-tier: enterprise
    business.veridis.xyz/availability-requirement: 99.9

    # Operational Prometheus Secret labels
    veridis.xyz/environment: production
    veridis.xyz/team: monitoring-engineering
    veridis.xyz/cost-center: monitoring-infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "prometheus-secret-control-framework"
    compliance.veridis.xyz/gdpr: "prometheus-secret-data-protection"
    compliance.veridis.xyz/iso27001: "prometheus-secret-security-management"
    compliance.veridis.xyz/nist-800-190: "prometheus-secret-container-security"
    governance.veridis.xyz/policy-enforcement: "enterprise"

    # Prometheus Secret analytics and intelligence
    monitoring.veridis.xyz/prometheus-secret-monitoring: "enabled"
    monitoring.veridis.xyz/performance-monitoring: "comprehensive"
    monitoring.veridis.xyz/credential-monitoring: "enabled"
    monitoring.veridis.xyz/business-monitoring: "enabled"
    monitoring.veridis.xyz/compliance-monitoring: "enabled"

    # Secret management labels
    secret.veridis.xyz/rotation-enabled: "true"
    secret.veridis.xyz/encryption-enabled: "true"
    secret.veridis.xyz/audit-logging: "enabled"
    secret.veridis.xyz/vault-integration: "enabled"
    secret.veridis.xyz/auto-rotation: "enabled"

  annotations:
    # Prometheus Secret purpose and specifications
    veridis.xyz/description: "Enterprise Veridis Prometheus Secret with intelligent credential management, advanced secret rotation, and comprehensive observability optimization"
    veridis.xyz/purpose: "Provides comprehensive Prometheus secret for decentralized identity management with intelligent credential management, secret optimization, and observability guarantees"
    veridis.xyz/scope: "Prometheus secret including credential management, secret rotation, vault integration, and comprehensive secret intelligence"

    # Prometheus Secret architecture and design
    prometheus.veridis.xyz/architecture: "Enterprise Prometheus secret with intelligent credential management, advanced secret rotation, and vault integration optimization"
    prometheus.veridis.xyz/design-pattern: "Multi-tier Prometheus secret with credential optimization, cost efficiency, and business intelligence"
    prometheus.veridis.xyz/optimization-model: "Intelligent Prometheus secret with predictive analytics, credential optimization, and secret rotation efficiency"
    prometheus.veridis.xyz/performance-model: "High-performance Prometheus secret with credential optimization and intelligent secret management"

    # Monitoring Prometheus Secret specifications
    monitoring.veridis.xyz/prometheus-secret-specification: "Prometheus secret with credential optimization and intelligent monitoring secret management"
    monitoring.veridis.xyz/credential-specification: "Advanced credential management configuration with monitoring optimization and secret enhancement"
    monitoring.veridis.xyz/rotation-specification: "Prometheus secret rotation management optimization with intelligent credentials and enhancement"
    monitoring.veridis.xyz/performance-specification: "Prometheus performance secret with credential acceleration and rotation efficiency"
    monitoring.veridis.xyz/business-specification: "Prometheus business secret with cost optimization and strategic credential intelligence"

    # Observability Prometheus Secret specifications
    observability.veridis.xyz/prometheus-secret-specification: "Observability-aware Prometheus secret with credential optimization and rotation intelligence"
    observability.veridis.xyz/credential-specification: "Observability credential management optimization with intelligent Prometheus and rotation enhancement"
    observability.veridis.xyz/rotation-specification: "Observability rotation with cost optimization and intelligent Prometheus management"
    observability.veridis.xyz/vault-specification: "Observability vault management with auto-optimization and Prometheus management"
    observability.veridis.xyz/monitoring-specification: "Observability monitoring with Prometheus secret analytics and credential intelligence"

    # Business Prometheus Secret specifications
    business.veridis.xyz/sla-specification: "SLA-compliant Prometheus secret with business continuity and credential guarantees"
    business.veridis.xyz/intelligence-specification: "Business intelligence with operational analytics and strategic insights"
    business.veridis.xyz/cost-specification: "Cost-optimized Prometheus secret with efficiency analysis and budget management"
    business.veridis.xyz/efficiency-specification: "Business efficiency with Prometheus secret optimization and credential intelligence"

    # Operational Prometheus Secret specifications
    operations.veridis.xyz/automation-specification: "Full automation with intelligent management and developer-friendly interfaces"
    operations.veridis.xyz/monitoring-specification: "Comprehensive monitoring with Prometheus secret analytics and credential intelligence"
    operations.veridis.xyz/management-specification: "Automated management with Prometheus secret preservation and optimization procedures"
    operations.veridis.xyz/scaling-specification: "Intelligent scaling with Prometheus secret management and credential optimization"

    # Prometheus Secret lifecycle specifications
    lifecycle.veridis.xyz/prometheus-secret-specification: "Dynamic Prometheus secret with automated credential management and rotation optimization"
    lifecycle.veridis.xyz/scaling-specification: "Intelligent Prometheus secret scaling with machine learning and credential forecasting"
    lifecycle.veridis.xyz/optimization-specification: "Prometheus secret optimization with intelligent credential management and rotation enhancement"
    lifecycle.veridis.xyz/evolution-specification: "Prometheus secret evolution with intelligent adaptation and credential optimization"

    # Security and compliance annotations
    security.veridis.xyz/encryption-at-rest: "enabled"
    security.veridis.xyz/encryption-in-transit: "enabled"
    security.veridis.xyz/secret-scanning: "enabled"
    security.veridis.xyz/vault-integration: "enabled"
    security.veridis.xyz/auto-rotation: "enabled"

    # Secret rotation annotations
    rotation.veridis.xyz/enabled: "true"
    rotation.veridis.xyz/interval: "30d"
    rotation.veridis.xyz/automatic: "true"
    rotation.veridis.xyz/notification: "enabled"
    rotation.veridis.xyz/rollback-enabled: "true"

    # Vault integration annotations
    vault.veridis.xyz/path: "secret/prometheus"
    vault.veridis.xyz/role: "prometheus-monitoring"
    vault.veridis.xyz/auth-method: "kubernetes"
    vault.veridis.xyz/secret-engine: "kv-v2"
    vault.veridis.xyz/auto-sync: "enabled"

    # Monitoring and observability annotations
    monitoring.veridis.xyz/secret-monitoring: "enabled"
    monitoring.veridis.xyz/access-monitoring: "enabled"
    monitoring.veridis.xyz/rotation-monitoring: "enabled"
    monitoring.veridis.xyz/vault-monitoring: "enabled"
    monitoring.veridis.xyz/audit-logging: "enabled"

    # Documentation and procedures
    veridis.xyz/owner: "monitoring-team@veridis.xyz"
    veridis.xyz/prometheus-secret-admin: "monitoring-admin@veridis.xyz"
    veridis.xyz/escalation: "monitoring-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "monitoring-oncall@veridis.xyz"

    # Documentation references
    veridis.xyz/documentation: "https://docs.veridis.xyz/monitoring/prometheus-secret"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/monitoring/prometheus-secret-management"
    veridis.xyz/secret-docs: "https://monitoring.veridis.xyz/prometheus-secret-guide"
    veridis.xyz/observability-docs: "https://observability.veridis.xyz/prometheus-secret-monitoring"

type: Opaque

data:
  # ==============================================================================
  # Prometheus Basic Authentication Credentials
  # ==============================================================================
  # Basic authentication credentials for Prometheus web UI access
  auth-username: cHJvbWV0aGV1cy1hZG1pbg==  # prometheus-admin (base64)
  auth-password: <PROMETHEUS_ADMIN_PASSWORD_BASE64>  # Enterprise-grade password

  # ==============================================================================
  # Prometheus Admin API Credentials
  # ==============================================================================
  # Admin API access credentials for Prometheus administrative operations
  admin-api-key: <PROMETHEUS_ADMIN_API_KEY_BASE64>  # Admin API key
  admin-api-secret: <PROMETHEUS_ADMIN_API_SECRET_BASE64>  # Admin API secret

  # ==============================================================================
  # Prometheus Remote Storage Credentials
  # ==============================================================================
  # Remote storage authentication for long-term storage solutions
  remote-storage-username: cHJvbWV0aGV1cy1yZW1vdGU=  # prometheus-remote (base64)
  remote-storage-password: <PROMETHEUS_REMOTE_STORAGE_PASSWORD_BASE64>
  remote-storage-bearer-token: <PROMETHEUS_REMOTE_STORAGE_TOKEN_BASE64>

  # ==============================================================================
  # Prometheus Alertmanager Integration Credentials
  # ==============================================================================
  # Alertmanager integration credentials for alert routing
  alertmanager-username: cHJvbWV0aGV1cy1hbGVydA==  # prometheus-alert (base64)
  alertmanager-password: <PROMETHEUS_ALERTMANAGER_PASSWORD_BASE64>
  alertmanager-webhook-secret: <PROMETHEUS_ALERTMANAGER_WEBHOOK_SECRET_BASE64>

  # ==============================================================================
  # Prometheus Service Discovery Credentials
  # ==============================================================================
  # Service discovery credentials for various platforms
  kubernetes-bearer-token: <PROMETHEUS_K8S_TOKEN_BASE64>  # Kubernetes API token
  consul-token: <PROMETHEUS_CONSUL_TOKEN_BASE64>  # Consul service discovery
  etcd-username: cHJvbWV0aGV1cy1ldGNk  # prometheus-etcd (base64)
  etcd-password: <PROMETHEUS_ETCD_PASSWORD_BASE64>

  # ==============================================================================
  # Prometheus External Metrics Sources
  # ==============================================================================
  # External metrics source credentials
  external-metrics-api-key: <PROMETHEUS_EXTERNAL_METRICS_API_KEY_BASE64>
  external-metrics-secret: <PROMETHEUS_EXTERNAL_METRICS_SECRET_BASE64>

  # ==============================================================================
  # Prometheus Federation Credentials
  # ==============================================================================
  # Federation credentials for multi-cluster monitoring
  federation-username: cHJvbWV0aGV1cy1mZWRlcmF0aW9u  # prometheus-federation (base64)
  federation-password: <PROMETHEUS_FEDERATION_PASSWORD_BASE64>
  federation-bearer-token: <PROMETHEUS_FEDERATION_TOKEN_BASE64>

  # ==============================================================================
  # Prometheus TLS Certificates and Keys
  # ==============================================================================
  # TLS certificates for secure communication
  tls-ca-cert: <PROMETHEUS_TLS_CA_CERT_BASE64>  # CA certificate
  tls-server-cert: <PROMETHEUS_TLS_SERVER_CERT_BASE64>  # Server certificate
  tls-server-key: <PROMETHEUS_TLS_SERVER_KEY_BASE64>  # Server private key
  tls-client-cert: <PROMETHEUS_TLS_CLIENT_CERT_BASE64>  # Client certificate
  tls-client-key: <PROMETHEUS_TLS_CLIENT_KEY_BASE64>  # Client private key

  # ==============================================================================
  # Prometheus Database Credentials
  # ==============================================================================
  # Database credentials for metrics storage (if using external DB)
  database-username: cHJvbWV0aGV1cy1kYg==  # prometheus-db (base64)
  database-password: <PROMETHEUS_DATABASE_PASSWORD_BASE64>
  database-connection-string: <PROMETHEUS_DATABASE_CONNECTION_BASE64>

  # ==============================================================================
  # Prometheus Cloud Provider Credentials
  # ==============================================================================
  # Cloud provider credentials for service discovery and storage
  aws-access-key-id: <PROMETHEUS_AWS_ACCESS_KEY_ID_BASE64>
  aws-secret-access-key: <PROMETHEUS_AWS_SECRET_ACCESS_KEY_BASE64>
  aws-session-token: <PROMETHEUS_AWS_SESSION_TOKEN_BASE64>
  gcp-service-account-key: <PROMETHEUS_GCP_SERVICE_ACCOUNT_KEY_BASE64>
  azure-client-id: <PROMETHEUS_AZURE_CLIENT_ID_BASE64>
  azure-client-secret: <PROMETHEUS_AZURE_CLIENT_SECRET_BASE64>
  azure-tenant-id: <PROMETHEUS_AZURE_TENANT_ID_BASE64>

  # ==============================================================================
  # Prometheus Webhook and Integration Secrets
  # ==============================================================================
  # Webhook secrets for various integrations
  webhook-secret-github: <PROMETHEUS_GITHUB_WEBHOOK_SECRET_BASE64>
  webhook-secret-slack: <PROMETHEUS_SLACK_WEBHOOK_SECRET_BASE64>
  webhook-secret-pagerduty: <PROMETHEUS_PAGERDUTY_WEBHOOK_SECRET_BASE64>
  webhook-secret-opsgenie: <PROMETHEUS_OPSGENIE_WEBHOOK_SECRET_BASE64>

  # ==============================================================================
  # Prometheus Encryption Keys
  # ==============================================================================
  # Encryption keys for data protection
  encryption-key: <PROMETHEUS_ENCRYPTION_KEY_BASE64>  # Data encryption key
  signing-key: <PROMETHEUS_SIGNING_KEY_BASE64>  # Data signing key
  jwt-secret: <PROMETHEUS_JWT_SECRET_BASE64>  # JWT signing secret

---
# ==============================================================================
# Veridis Prometheus Monitoring - TLS Certificate Secret
# ==============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: veridis-prometheus-tls
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "2.48.1"
    app.kubernetes.io/component: prometheus-tls
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    prometheus.veridis.xyz/type: monitoring-prometheus-tls
    prometheus.veridis.xyz/category: tls-certificate
    prometheus.veridis.xyz/role: prometheus-tls-certificate
    prometheus.veridis.xyz/certificate-type: server-certificate

    monitoring.veridis.xyz/prometheus-secret-type: tls-prometheus-secret
    monitoring.veridis.xyz/certificate-management: enabled
    monitoring.veridis.xyz/auto-renewal: enabled
    monitoring.veridis.xyz/certificate-authority: internal

    tls.veridis.xyz/tier: production
    tls.veridis.xyz/optimization: certificate-management
    tls.veridis.xyz/auto-renewal: enabled
    tls.veridis.xyz/certificate-type: rsa-4096

    veridis.xyz/environment: production
    veridis.xyz/team: monitoring-engineering

  annotations:
    veridis.xyz/description: "TLS Certificate Secret for Veridis Prometheus with automatic renewal and certificate management"
    veridis.xyz/purpose: "Provides TLS certificates for Prometheus monitoring with automatic renewal and comprehensive certificate lifecycle management"

    prometheus.veridis.xyz/tls-specification: "Prometheus TLS certificates with automatic renewal and certificate lifecycle management"
    monitoring.veridis.xyz/tls-specification: "TLS monitoring with Prometheus certificate management and auto-renewal"

    # TLS certificate specific annotations
    tls.veridis.xyz/certificate-type: "server-certificate"
    tls.veridis.xyz/key-algorithm: "RSA"
    tls.veridis.xyz/key-size: "4096"
    tls.veridis.xyz/signature-algorithm: "SHA256-RSA"
    tls.veridis.xyz/validity-period: "365d"

    # Certificate lifecycle annotations
    certificate.veridis.xyz/auto-renewal: "enabled"
    certificate.veridis.xyz/renewal-threshold: "30d"
    certificate.veridis.xyz/renewal-notification: "enabled"
    certificate.veridis.xyz/backup-enabled: "true"

    # Certificate authority annotations
    ca.veridis.xyz/issuer: "veridis-internal-ca"
    ca.veridis.xyz/chain-included: "true"
    ca.veridis.xyz/ocsp-enabled: "true"
    ca.veridis.xyz/crl-enabled: "true"

    # Security annotations
    security.veridis.xyz/certificate-validation: "enabled"
    security.veridis.xyz/certificate-scanning: "enabled"
    security.veridis.xyz/revocation-checking: "enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/monitoring/prometheus-tls"

type: kubernetes.io/tls

data:
  # TLS certificate for Prometheus server
  tls.crt: <PROMETHEUS_TLS_CERTIFICATE_BASE64>  # Server certificate with SAN
  tls.key: <PROMETHEUS_TLS_PRIVATE_KEY_BASE64>  # Server private key
  ca.crt: <PROMETHEUS_TLS_CA_CERTIFICATE_BASE64>  # CA certificate chain

---
# ==============================================================================
# Veridis Prometheus Monitoring - Service Account Token Secret
# ==============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: veridis-prometheus-token
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "2.48.1"
    app.kubernetes.io/component: prometheus-token
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    prometheus.veridis.xyz/type: monitoring-prometheus-token
    prometheus.veridis.xyz/category: service-account-token
    prometheus.veridis.xyz/role: prometheus-service-token
    prometheus.veridis.xyz/token-type: kubernetes-api-token

    monitoring.veridis.xyz/prometheus-secret-type: token-prometheus-secret
    monitoring.veridis.xyz/token-management: enabled
    monitoring.veridis.xyz/auto-renewal: enabled
    monitoring.veridis.xyz/rbac-integration: enabled

    token.veridis.xyz/tier: production
    token.veridis.xyz/optimization: token-management
    token.veridis.xyz/auto-renewal: enabled
    token.veridis.xyz/scope: cluster-read

    veridis.xyz/environment: production
    veridis.xyz/team: monitoring-engineering

  annotations:
    veridis.xyz/description: "Service Account Token Secret for Veridis Prometheus with automatic renewal and RBAC integration"
    veridis.xyz/purpose: "Provides service account tokens for Prometheus monitoring with automatic renewal and comprehensive RBAC integration"

    prometheus.veridis.xyz/token-specification: "Prometheus service account tokens with automatic renewal and RBAC integration"
    monitoring.veridis.xyz/token-specification: "Token monitoring with Prometheus RBAC integration and auto-renewal"

    # Service account token specific annotations
    token.veridis.xyz/token-type: "service-account-token"
    token.veridis.xyz/scope: "cluster-monitoring"
    token.veridis.xyz/audience: "kubernetes.default.svc"
    token.veridis.xyz/expiration: "8760h"  # 1 year

    # RBAC integration annotations
    rbac.veridis.xyz/service-account: "veridis-prometheus-monitoring"
    rbac.veridis.xyz/cluster-role: "prometheus-monitoring"
    rbac.veridis.xyz/permissions: "read-only"
    rbac.veridis.xyz/namespaces: "all"

    # Token lifecycle annotations
    lifecycle.veridis.xyz/auto-renewal: "enabled"
    lifecycle.veridis.xyz/renewal-threshold: "720h"  # 30 days
    lifecycle.veridis.xyz/renewal-notification: "enabled"
    lifecycle.veridis.xyz/backup-enabled: "true"

    # Security annotations
    security.veridis.xyz/token-validation: "enabled"
    security.veridis.xyz/token-scanning: "enabled"
    security.veridis.xyz/access-monitoring: "enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/monitoring/prometheus-tokens"

type: kubernetes.io/service-account-token

data:
  # Kubernetes API token for service discovery and monitoring
  token: <PROMETHEUS_SERVICE_ACCOUNT_TOKEN_BASE64>  # Service account token
  ca.crt: <KUBERNETES_CA_CERTIFICATE_BASE64>  # Kubernetes cluster CA certificate
  namespace: dmVyaWRpcy1pbmZyYXN0cnVjdHVyZQ==  # veridis-infrastructure (base64)

---
# ==============================================================================
# Veridis Prometheus Monitoring - Alertmanager Configuration Secret
# ==============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: veridis-prometheus-alertmanager-config
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "2.48.1"
    app.kubernetes.io/component: prometheus-alertmanager-config
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    prometheus.veridis.xyz/type: monitoring-prometheus-alertmanager-config
    prometheus.veridis.xyz/category: alertmanager-configuration
    prometheus.veridis.xyz/role: prometheus-alertmanager-config
    prometheus.veridis.xyz/config-type: alertmanager-secrets

    monitoring.veridis.xyz/prometheus-secret-type: alertmanager-config-secret
    monitoring.veridis.xyz/alerting-integration: enabled
    monitoring.veridis.xyz/notification-config: enabled
    monitoring.veridis.xyz/webhook-integration: enabled

    alertmanager.veridis.xyz/tier: production
    alertmanager.veridis.xyz/optimization: notification-management
    alertmanager.veridis.xyz/webhook-enabled: "true"
    alertmanager.veridis.xyz/notification-channels: multiple

    veridis.xyz/environment: production
    veridis.xyz/team: monitoring-engineering

  annotations:
    veridis.xyz/description: "Alertmanager Configuration Secret for Veridis Prometheus with notification channels and webhook integration"
    veridis.xyz/purpose: "Provides Alertmanager configuration secrets for Prometheus monitoring with comprehensive notification and webhook integration"

    prometheus.veridis.xyz/alertmanager-specification: "Prometheus Alertmanager configuration with notification channels and webhook integration"
    monitoring.veridis.xyz/alertmanager-specification: "Alertmanager monitoring with Prometheus notification integration"

    # Alertmanager configuration specific annotations
    alertmanager.veridis.xyz/config-type: "notification-secrets"
    alertmanager.veridis.xyz/notification-channels: "slack,email,pagerduty,webhook"
    alertmanager.veridis.xyz/webhook-enabled: "true"
    alertmanager.veridis.xyz/smtp-enabled: "true"

    # Notification channel annotations
    notification.veridis.xyz/slack-enabled: "true"
    notification.veridis.xyz/email-enabled: "true"
    notification.veridis.xyz/pagerduty-enabled: "true"
    notification.veridis.xyz/opsgenie-enabled: "true"
    notification.veridis.xyz/webhook-enabled: "true"

    # Security annotations
    security.veridis.xyz/config-encryption: "enabled"
    security.veridis.xyz/webhook-validation: "enabled"
    security.veridis.xyz/notification-security: "enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/monitoring/prometheus-alertmanager-config"

type: Opaque

data:
  # ==============================================================================
  # Slack Integration Configuration
  # ==============================================================================
  slack-api-url: <PROMETHEUS_SLACK_API_URL_BASE64>  # Slack webhook URL
  slack-api-token: <PROMETHEUS_SLACK_API_TOKEN_BASE64>  # Slack API token
  slack-channel: <PROMETHEUS_SLACK_CHANNEL_BASE64>  # Default Slack channel

  # ==============================================================================
  # Email/SMTP Configuration
  # ==============================================================================
  smtp-host: <PROMETHEUS_SMTP_HOST_BASE64>  # SMTP server host
  smtp-port: MjU4Nw==  # 2587 (base64) - SMTP port
  smtp-username: <PROMETHEUS_SMTP_USERNAME_BASE64>  # SMTP username
  smtp-password: <PROMETHEUS_SMTP_PASSWORD_BASE64>  # SMTP password
  smtp-from-address: <PROMETHEUS_SMTP_FROM_ADDRESS_BASE64>  # From email address

  # ==============================================================================
  # PagerDuty Integration Configuration
  # ==============================================================================
  pagerduty-routing-key: <PROMETHEUS_PAGERDUTY_ROUTING_KEY_BASE64>  # PagerDuty integration key
  pagerduty-service-key: <PROMETHEUS_PAGERDUTY_SERVICE_KEY_BASE64>  # PagerDuty service key
  pagerduty-api-token: <PROMETHEUS_PAGERDUTY_API_TOKEN_BASE64>  # PagerDuty API token

  # ==============================================================================
  # OpsGenie Integration Configuration
  # ==============================================================================
  opsgenie-api-key: <PROMETHEUS_OPSGENIE_API_KEY_BASE64>  # OpsGenie API key
  opsgenie-api-url: <PROMETHEUS_OPSGENIE_API_URL_BASE64>  # OpsGenie API URL
  opsgenie-team: <PROMETHEUS_OPSGENIE_TEAM_BASE64>  # OpsGenie team

  # ==============================================================================
  # Webhook Integration Configuration
  # ==============================================================================
  webhook-url: <PROMETHEUS_WEBHOOK_URL_BASE64>  # Custom webhook URL
  webhook-secret: <PROMETHEUS_WEBHOOK_SECRET_BASE64>  # Webhook validation secret
  webhook-token: <PROMETHEUS_WEBHOOK_TOKEN_BASE64>  # Webhook authentication token

---
# ==============================================================================
# Veridis Prometheus Monitoring - Remote Storage Secret
# ==============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: veridis-prometheus-remote-storage
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "2.48.1"
    app.kubernetes.io/component: prometheus-remote-storage
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    prometheus.veridis.xyz/type: monitoring-prometheus-remote-storage-secret
    prometheus.veridis.xyz/category: remote-storage-configuration
    prometheus.veridis.xyz/role: prometheus-remote-storage
    prometheus.veridis.xyz/storage-type: remote-write-read

    monitoring.veridis.xyz/prometheus-secret-type: remote-storage-secret
    monitoring.veridis.xyz/remote-storage: enabled
    monitoring.veridis.xyz/long-term-storage: enabled
    monitoring.veridis.xyz/storage-backend: multiple

    storage.veridis.xyz/tier: production
    storage.veridis.xyz/optimization: remote-storage-management
    storage.veridis.xyz/remote-write: enabled
    storage.veridis.xyz/remote-read: enabled

    veridis.xyz/environment: production
    veridis.xyz/team: monitoring-engineering

  annotations:
    veridis.xyz/description: "Remote Storage Secret for Veridis Prometheus with long-term storage and multi-backend support"
    veridis.xyz/purpose: "Provides remote storage credentials for Prometheus monitoring with comprehensive long-term storage integration"

    prometheus.veridis.xyz/remote-storage-specification: "Prometheus remote storage with long-term retention and multi-backend support"
    monitoring.veridis.xyz/remote-storage-specification: "Remote storage monitoring with Prometheus long-term integration"

    # Remote storage specific annotations
    storage.veridis.xyz/storage-type: "remote-write-read"
    storage.veridis.xyz/backends: "thanos,cortex,m3db,influxdb"
    storage.veridis.xyz/compression: "snappy"
    storage.veridis.xyz/retention: "365d"

    # Storage backend annotations
    thanos.veridis.xyz/enabled: "true"
    cortex.veridis.xyz/enabled: "true"
    m3db.veridis.xyz/enabled: "false"
    influxdb.veridis.xyz/enabled: "false"

    # Performance annotations
    performance.veridis.xyz/batch-size: "1000"
    performance.veridis.xyz/timeout: "30s"
    performance.veridis.xyz/retry-attempts: "3"
    performance.veridis.xyz/queue-capacity: "10000"

    # Security annotations
    security.veridis.xyz/tls-enabled: "true"
    security.veridis.xyz/authentication: "bearer-token"
    security.veridis.xyz/encryption-in-transit: "enabled"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "remote-storage-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/monitoring/prometheus-remote-storage"

type: Opaque

data:
  # ==============================================================================
  # Thanos Remote Storage Configuration
  # ==============================================================================
  thanos-endpoint: <PROMETHEUS_THANOS_ENDPOINT_BASE64>  # Thanos receiver endpoint
  thanos-bearer-token: <PROMETHEUS_THANOS_BEARER_TOKEN_BASE64>  # Thanos authentication token
  thanos-tenant-id: <PROMETHEUS_THANOS_TENANT_ID_BASE64>  # Thanos tenant ID

  # ==============================================================================
  # Cortex Remote Storage Configuration
  # ==============================================================================
  cortex-endpoint: <PROMETHEUS_CORTEX_ENDPOINT_BASE64>  # Cortex write endpoint
  cortex-read-endpoint: <PROMETHEUS_CORTEX_READ_ENDPOINT_BASE64>  # Cortex read endpoint
  cortex-bearer-token: <PROMETHEUS_CORTEX_BEARER_TOKEN_BASE64>  # Cortex authentication token
  cortex-tenant-id: <PROMETHEUS_CORTEX_TENANT_ID_BASE64>  # Cortex tenant ID

  # ==============================================================================
  # M3DB Remote Storage Configuration
  # ==============================================================================
  m3db-endpoint: <PROMETHEUS_M3DB_ENDPOINT_BASE64>  # M3DB coordinator endpoint
  m3db-username: <PROMETHEUS_M3DB_USERNAME_BASE64>  # M3DB username
  m3db-password: <PROMETHEUS_M3DB_PASSWORD_BASE64>  # M3DB password

  # ==============================================================================
  # InfluxDB Remote Storage Configuration
  # ==============================================================================
  influxdb-endpoint: <PROMETHEUS_INFLUXDB_ENDPOINT_BASE64>  # InfluxDB endpoint
  influxdb-database: <PROMETHEUS_INFLUXDB_DATABASE_BASE64>  # InfluxDB database name
  influxdb-username: <PROMETHEUS_INFLUXDB_USERNAME_BASE64>  # InfluxDB username
  influxdb-password: <PROMETHEUS_INFLUXDB_PASSWORD_BASE64>  # InfluxDB password
  influxdb-retention-policy: <PROMETHEUS_INFLUXDB_RETENTION_POLICY_BASE64>  # InfluxDB retention policy

  # ==============================================================================
  # Generic Remote Storage Configuration
  # ==============================================================================
  remote-write-endpoint: <PROMETHEUS_REMOTE_WRITE_ENDPOINT_BASE64>  # Generic remote write endpoint
  remote-read-endpoint: <PROMETHEUS_REMOTE_READ_ENDPOINT_BASE64>  # Generic remote read endpoint
  remote-write-bearer-token: <PROMETHEUS_REMOTE_WRITE_TOKEN_BASE64>  # Remote write token
  remote-read-bearer-token: <PROMETHEUS_REMOTE_READ_TOKEN_BASE64>  # Remote read token

---
# ==============================================================================
# Veridis Prometheus Monitoring - OAuth2 Integration Secret
# ==============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: veridis-prometheus-oauth2
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "2.48.1"
    app.kubernetes.io/component: prometheus-oauth2
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    prometheus.veridis.xyz/type: monitoring-prometheus-oauth2-secret
    prometheus.veridis.xyz/category: oauth2-configuration
    prometheus.veridis.xyz/role: prometheus-oauth2
    prometheus.veridis.xyz/auth-type: oauth2-integration

    monitoring.veridis.xyz/prometheus-secret-type: oauth2-prometheus-secret
    monitoring.veridis.xyz/oauth2-integration: enabled
    monitoring.veridis.xyz/sso-enabled: "true"
    monitoring.veridis.xyz/identity-provider: multiple

    oauth2.veridis.xyz/tier: production
    oauth2.veridis.xyz/optimization: authentication-management
    oauth2.veridis.xyz/providers: "okta,auth0,keycloak,azure-ad"
    oauth2.veridis.xyz/oidc-enabled: "true"

    veridis.xyz/environment: production
    veridis.xyz/team: monitoring-engineering

  annotations:
    veridis.xyz/description: "OAuth2 Integration Secret for Veridis Prometheus with SSO and identity provider support"
    veridis.xyz/purpose: "Provides OAuth2 credentials for Prometheus monitoring with comprehensive SSO and identity provider integration"

    prometheus.veridis.xyz/oauth2-specification: "Prometheus OAuth2 integration with SSO and multiple identity providers"
    monitoring.veridis.xyz/oauth2-specification: "OAuth2 monitoring with Prometheus SSO integration"

    # OAuth2 specific annotations
    oauth2.veridis.xyz/flow-type: "authorization-code"
    oauth2.veridis.xyz/pkce-enabled: "true"
    oauth2.veridis.xyz/scopes: "openid,profile,email,groups"
    oauth2.veridis.xyz/token-endpoint-auth-method: "client_secret_post"

    # Identity provider annotations
    idp.veridis.xyz/okta-enabled: "true"
    idp.veridis.xyz/auth0-enabled: "true"
    idp.veridis.xyz/keycloak-enabled: "true"
    idp.veridis.xyz/azure-ad-enabled: "true"

    # OIDC annotations
    oidc.veridis.xyz/discovery-enabled: "true"
    oidc.veridis.xyz/jwks-validation: "enabled"
    oidc.veridis.xyz/issuer-validation: "enabled"
    oidc.veridis.xyz/audience-validation: "enabled"

    # Security annotations
    security.veridis.xyz/token-validation: "enabled"
    security.veridis.xyz/jwt-validation: "enabled"
    security.veridis.xyz/session-management: "enabled"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "oauth2-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/monitoring/prometheus-oauth2"

type: Opaque

data:
  # ==============================================================================
  # Okta OAuth2 Configuration
  # ==============================================================================
  okta-client-id: <PROMETHEUS_OKTA_CLIENT_ID_BASE64>  # Okta OAuth2 client ID
  okta-client-secret: <PROMETHEUS_OKTA_CLIENT_SECRET_BASE64>  # Okta OAuth2 client secret
  okta-issuer-url: <PROMETHEUS_OKTA_ISSUER_URL_BASE64>  # Okta issuer URL
  okta-redirect-uri: <PROMETHEUS_OKTA_REDIRECT_URI_BASE64>  # Okta redirect URI

  # ==============================================================================
  # Auth0 OAuth2 Configuration
  # ==============================================================================
  auth0-client-id: <PROMETHEUS_AUTH0_CLIENT_ID_BASE64>  # Auth0 OAuth2 client ID
  auth0-client-secret: <PROMETHEUS_AUTH0_CLIENT_SECRET_BASE64>  # Auth0 OAuth2 client secret
  auth0-domain: <PROMETHEUS_AUTH0_DOMAIN_BASE64>  # Auth0 domain
  auth0-audience: <PROMETHEUS_AUTH0_AUDIENCE_BASE64>  # Auth0 audience

  # ==============================================================================
  # Keycloak OAuth2 Configuration
  # ==============================================================================
  keycloak-client-id: <PROMETHEUS_KEYCLOAK_CLIENT_ID_BASE64>  # Keycloak OAuth2 client ID
  keycloak-client-secret: <PROMETHEUS_KEYCLOAK_CLIENT_SECRET_BASE64>  # Keycloak OAuth2 client secret
  keycloak-realm-url: <PROMETHEUS_KEYCLOAK_REALM_URL_BASE64>  # Keycloak realm URL
  keycloak-auth-url: <PROMETHEUS_KEYCLOAK_AUTH_URL_BASE64>  # Keycloak authorization URL

  # ==============================================================================
  # Azure AD OAuth2 Configuration
  # ==============================================================================
  azure-client-id: <PROMETHEUS_AZURE_CLIENT_ID_BASE64>  # Azure AD application ID
  azure-client-secret: <PROMETHEUS_AZURE_CLIENT_SECRET_BASE64>  # Azure AD client secret
  azure-tenant-id: <PROMETHEUS_AZURE_TENANT_ID_BASE64>  # Azure AD tenant ID
  azure-authority-url: <PROMETHEUS_AZURE_AUTHORITY_URL_BASE64>  # Azure AD authority URL

  # ==============================================================================
  # Generic OAuth2 Configuration
  # ==============================================================================
  oauth2-authorize-url: <PROMETHEUS_OAUTH2_AUTHORIZE_URL_BASE64>  # OAuth2 authorization URL
  oauth2-token-url: <PROMETHEUS_OAUTH2_TOKEN_URL_BASE64>  # OAuth2 token URL
  oauth2-userinfo-url: <PROMETHEUS_OAUTH2_USERINFO_URL_BASE64>  # OAuth2 user info URL
  oauth2-jwks-url: <PROMETHEUS_OAUTH2_JWKS_URL_BASE64>  # OAuth2 JWKS URL

  # ==============================================================================
  # JWT Configuration
  # ==============================================================================
  jwt-signing-key: <PROMETHEUS_JWT_SIGNING_KEY_BASE64>  # JWT signing key
  jwt-encryption-key: <PROMETHEUS_JWT_ENCRYPTION_KEY_BASE64>  # JWT encryption key
  jwt-issuer: <PROMETHEUS_JWT_ISSUER_BASE64>  # JWT issuer
  jwt-audience: <PROMETHEUS_JWT_AUDIENCE_BASE64>  # JWT audience

# ==============================================================================
# Veridis Prometheus Secret Summary and Enterprise Architecture
# ==============================================================================
#
# COMPREHENSIVE VERIDIS PROMETHEUS SECRET STRATEGY:
# ================================================
#
# VERIDIS PROMETHEUS SECRET ARCHITECTURE OVERVIEW:
# -----------------------------------------------
# 1. Primary Prometheus Secret (veridis-prometheus-secret):
#    - Comprehensive Opaque secret with intelligent credential management and advanced secret optimization for production monitoring
#    - Advanced secret configuration with basic auth, admin API, remote storage, Alertmanager, service discovery credentials
#    - Multi-credential architecture with auth, API keys, tokens, TLS certificates, database credentials, cloud provider credentials
#    - Enterprise secret policies with encryption at rest/transit, secret scanning, vault integration, and comprehensive credential optimization
#    - Performance optimization with intelligent secret management, credential rotation, and secret lifecycle management for maximum efficiency
#
# 2. TLS Certificate Secret (veridis-prometheus-tls):
#    - kubernetes.io/tls secret with automatic certificate renewal and certificate lifecycle management
#    - Advanced TLS configuration with RSA-4096 keys, SHA256-RSA signatures, 365-day validity, and certificate chain inclusion
#    - Certificate authority integration with internal CA, OCSP/CRL support, and certificate validation
#    - Security integration with certificate scanning, revocation checking, and comprehensive certificate monitoring
#    - Conditional deployment with certificate management enablement for flexible TLS certificate lifecycle management
#
# 3. Service Account Token Secret (veridis-prometheus-token):
#    - kubernetes.io/service-account-token secret with automatic token renewal and RBAC integration
#    - Advanced token configuration with cluster-read scope, 1-year expiration, and comprehensive RBAC permissions
#    - Token lifecycle management with 30-day renewal threshold, notification system, and backup capabilities
#    - Security integration with token validation, access monitoring, and comprehensive token scanning
#    - RBAC integration with cluster-wide monitoring permissions and namespace-based access control
#
# 4. Alertmanager Configuration Secret (veridis-prometheus-alertmanager-config):
#    - Opaque secret with notification channel credentials and webhook integration for comprehensive alerting
#    - Multi-channel configuration with Slack, email/SMTP, PagerDuty, OpsGenie, and custom webhook support
#    - Notification optimization with channel-specific configuration, webhook validation, and notification security
#    - Integration support with multiple notification backends and comprehensive webhook management
#    - Security integration with config encryption, webhook validation, and notification channel security
#
# 5. Remote Storage Secret (veridis-prometheus-remote-storage):
#    - Opaque secret with long-term storage credentials and multi-backend support for comprehensive data retention
#    - Multi-backend configuration with Thanos, Cortex, M3DB, InfluxDB support and generic remote write/read endpoints
#    - Storage optimization with compression (snappy), 365-day retention, configurable batch sizes, and performance tuning
#    - Conditional deployment with remote-storage-enabled flag for flexible long-term storage integration
#    - Performance optimization with queue capacity (10K), timeout (30s), retry attempts (3), and TLS security
#
# 6. OAuth2 Integration Secret (veridis-prometheus-oauth2):
#    - Opaque secret with SSO integration and multiple identity provider support for comprehensive authentication
#    - Multi-provider configuration with Okta, Auth0, Keycloak, Azure AD support and OIDC integration
#    - OAuth2 optimization with PKCE, authorization code flow, comprehensive scopes, and JWT validation
#    - Security integration with token validation, session management, issuer validation, and audience validation
#    - Conditional deployment with oauth2-enabled flag for flexible SSO and identity provider integration
#
# ENTERPRISE PROMETHEUS SECRET FEATURES:
# ======================================
# Advanced Secret Management and Credential Optimization:
#   - Multi-secret architecture with credentials, TLS certificates, tokens, configuration, storage, and OAuth2 secrets
#   - Intelligent credential management with vault integration, auto-rotation, encryption at rest/transit, and secret lifecycle
#   - Secret discovery with automatic renewal, notification system, backup capabilities, and comprehensive secret monitoring
#   - Credential management with basic auth, API keys, bearer tokens, TLS certificates, database credentials, and cloud provider integration
#   - Performance tuning with secret optimization, credential caching, rotation scheduling, and intelligent secret management
#
# Comprehensive TLS Certificate and Token Management:
#   - Certificate integration with RSA-4096 keys, SHA256-RSA signatures, certificate chains, and automatic renewal
#   - Token management with service account tokens, 1-year expiration, RBAC integration, and comprehensive access control
#   - Certificate authority integration with internal CA, OCSP/CRL support, certificate validation, and security scanning
#   - Token lifecycle with 30-day renewal threshold, automatic renewal, notification system, and backup capabilities
#   - Security integration with certificate scanning, token validation, revocation checking, and comprehensive monitoring
#
# Enterprise Notification and Alerting Integration:
#   - Multi-channel notification with Slack, email/SMTP, PagerDuty, OpsGenie, and custom webhook support
#   - Webhook integration with validation secrets, authentication tokens, notification channels, and security management
#   - SMTP configuration with secure authentication, TLS encryption, configurable ports, and comprehensive email delivery
#   - Integration credentials with API keys, routing keys, service keys, and team-based notification management
#   - Security integration with webhook validation, notification encryption, channel security, and comprehensive audit logging
#
# Advanced Remote Storage and Long-Term Retention:
#   - Multi-backend storage with Thanos, Cortex, M3DB, InfluxDB support and generic remote write/read capabilities
#   - Storage optimization with snappy compression, 365-day retention, configurable batch sizes (1K), and performance tuning
#   - Authentication integration with bearer tokens, tenant IDs, username/password, and comprehensive access control
#   - Performance configuration with 30s timeouts, 3 retry attempts, 10K queue capacity, and TLS security
#   - Conditional deployment with backend-specific enablement flags and flexible storage backend integration
#
# OPERATIONAL EXCELLENCE:
# ======================
# Prometheus Secret Lifecycle Management:
#   - Multi-secret architecture with credentials, certificates, tokens, configuration, storage, and OAuth2 management
#   - Intelligent secret management with predictive analytics and credential utilization correlation
#   - Advanced monitoring with comprehensive secret analytics and credential business intelligence
#   - Configuration validation with secret schema enforcement and credential deployment safety checks
#   - Automated optimization with secret pattern analysis and credential configuration recommendation engine
#
# Security Integration and Compliance:
#   - SOC 2 Type II secret controls with comprehensive audit requirements and credential logging
#   - GDPR secret compliance with data protection and privacy-preserving credential management
#   - ISO 27001 secret security management with information security and credential compliance integration
#   - NIST 800-190 container secret security with credential validation and compliance
#   - Zero-trust secret architecture with comprehensive encryption and credential authentication requirements
#
# Business Intelligence Integration:
#   - Secret analytics with cost correlation and credential resource utilization optimization
#   - Performance analytics with user experience optimization and secret business intelligence
#   - Credential intelligence with access pattern monitoring and secret optimization recommendations
#   - Strategic planning with capacity management and secret forecasting
#   - Business impact assessment with secret performance correlation and availability tracking
#
# Developer Experience Excellence:
#   - Multi-environment secret support with production, development, HA, and federation configurations
#   - Comprehensive documentation with secret guides and credential troubleshooting procedures
#   - Environment-specific secrets with production, development, testing, and multi-cluster support
#   - Testing integration with secret development workflow and credential debugging capabilities
#   - Secret monitoring with comprehensive tracking and credential correlation
#
# ==============================================================================
