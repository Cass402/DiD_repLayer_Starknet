# ==============================================================================
# Veridis Decentralized Identity Protocol - ZK Circuits NetworkPolicy
# ==============================================================================
#
# This manifest defines comprehensive ZK Circuits NetworkPolicy for the
# decentralized identity protocol, providing:
#
# ENTERPRISE VERIDIS ZK CIRCUITS NETWORK SECURITY ARCHITECTURE:
#   • Advanced zero-knowledge proof network security with GPU optimization and intelligent traffic control
#   • Multi-tier network architecture with development, testing, staging, and production microsegmentation
#   • Comprehensive security framework with GPU-aware network policies, traffic optimization, and security intelligence
#   • Advanced lifecycle management with automated network management, traffic control, and optimization
#   • Enterprise-grade intelligence with comprehensive analytics and network security insights
#
# VERIDIS ZK CIRCUITS NETWORK OPTIMIZATION:
#   • High-security network policies with intelligent traffic management and GPU-aware optimization
#   • Intelligent proof generation networking with traffic minimization and performance-based network decisions
#   • Advanced resource management with business intelligence and workload-based network control
#   • Comprehensive GPU network control with intelligent routing and performance enhancement
#   • Enterprise acceleration with predictive network management and traffic optimization
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II network controls with comprehensive audit and traffic requirements
#   • GDPR network compliance with data protection, privacy controls, and traffic management
#   • ISO 27001 network management with comprehensive framework integration
#   • NIST 800-190 container network security with policy-specific validation and compliance
#   • Zero-knowledge protocol compliance with regulatory frameworks and network best practices
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent network lifecycle management with automated provisioning and optimization
#   • Predictive traffic analytics with capacity planning and network intelligence
#   • Advanced monitoring integration with network analytics and business intelligence
#   • Comprehensive traffic control with network preservation and performance optimization
#   • Business continuity networking with traffic guarantees and security optimization
#
# GPU ACCELERATION NETWORK INTELLIGENCE:
#   • Network usage analytics with traffic patterns and optimization recommendations
#   • Performance monitoring with network latency and traffic optimization intelligence
#   • Development efficiency with network analytics and deployment optimization procedures
#   • Cost optimization with network utilization analysis and capacity planning procedures
#   • Quality assurance with network metrics and security validation procedures
#
# ==============================================================================

# ==============================================================================
# Veridis ZK Circuits NetworkPolicy - Primary Network Security Control
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: veridis-zk-circuits-network-policy
  namespace: veridis-infrastructure

  # Core Veridis ZK Circuits network policy identification labels
  labels:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-network-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Network policy specific classification
    network.veridis.xyz/type: zk-circuits-network-policy
    network.veridis.xyz/category: gpu-network-security
    network.veridis.xyz/role: primary-network-policy
    network.veridis.xyz/performance-class: high-security-network
    network.veridis.xyz/security-level: enterprise

    # ZK network policy classification
    zk.veridis.xyz/network-type: gpu-network-policy
    zk.veridis.xyz/security: comprehensive
    zk.veridis.xyz/performance-tier: high-security
    zk.veridis.xyz/optimization: enabled
    zk.veridis.xyz/features: full-stack

    # GPU network policy classification
    gpu.veridis.xyz/tier: production
    gpu.veridis.xyz/optimization: intelligent-networking
    gpu.veridis.xyz/acceleration: enabled
    gpu.veridis.xyz/network-policy: optimized
    gpu.veridis.xyz/efficiency: maximum

    # Business network policy classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/impact: high-security
    business.veridis.xyz/cost-tier: production
    business.veridis.xyz/sla-tier: enterprise
    business.veridis.xyz/availability-requirement: 99.9

    # Operational network policy labels
    veridis.xyz/environment: production
    veridis.xyz/team: zk-engineering
    veridis.xyz/cost-center: identity-infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "network-control-framework"
    compliance.veridis.xyz/gdpr: "network-data-protection"
    compliance.veridis.xyz/iso27001: "network-security-management"
    compliance.veridis.xyz/nist-800-190: "network-container-security"
    governance.veridis.xyz/policy-enforcement: "enterprise"

    # Network monitoring and analytics
    monitoring.veridis.xyz/network-monitoring: "enabled"
    monitoring.veridis.xyz/performance-monitoring: "comprehensive"
    monitoring.veridis.xyz/security-monitoring: "enabled"
    monitoring.veridis.xyz/business-monitoring: "enabled"
    monitoring.veridis.xyz/compliance-monitoring: "enabled"

  annotations:
    # Network policy purpose and specifications
    veridis.xyz/description: "Enterprise Veridis ZK Circuits NetworkPolicy with GPU optimization, intelligent traffic control, and comprehensive security management"
    veridis.xyz/purpose: "Provides comprehensive network security for zero-knowledge proof generation with intelligent traffic management, GPU optimization, and security guarantees"
    veridis.xyz/scope: "Network security including GPU traffic, proof generation traffic, performance optimization, and comprehensive security intelligence"

    # Network policy architecture and design
    network.veridis.xyz/architecture: "Enterprise network policy with GPU-aware traffic control, intelligent routing, and security optimization"
    network.veridis.xyz/design-pattern: "Multi-tier security with performance optimization, cost efficiency, and business intelligence"
    network.veridis.xyz/optimization-model: "Intelligent network policy with predictive analytics, security optimization, and traffic efficiency"
    network.veridis.xyz/performance-model: "High-security network policy with GPU acceleration and intelligent traffic management"

    # GPU network specifications
    gpu.veridis.xyz/network-specification: "GPU network security with NVIDIA A100 optimization and intelligent traffic management"
    gpu.veridis.xyz/traffic-specification: "Advanced GPU traffic control with performance optimization and security enhancement"
    gpu.veridis.xyz/routing-specification: "GPU routing optimization with intelligent traffic control and performance enhancement"
    gpu.veridis.xyz/security-specification: "GPU security optimization with intelligent monitoring and traffic control"
    gpu.veridis.xyz/performance-specification: "GPU performance networking with acceleration optimization and traffic efficiency"

    # Security network specifications
    security.veridis.xyz/network-specification: "Security-aware network policy with GPU optimization and traffic intelligence"
    security.veridis.xyz/traffic-specification: "Traffic security with intelligent monitoring and performance enhancement"
    security.veridis.xyz/microsegmentation-specification: "Microsegmentation with cost optimization and intelligent traffic management"
    security.veridis.xyz/isolation-specification: "Network isolation with auto-optimization and security management"
    security.veridis.xyz/monitoring-specification: "Security monitoring with traffic analytics and network intelligence"

    # Business network specifications
    business.veridis.xyz/sla-specification: "SLA-compliant network policy with business continuity and security guarantees"
    business.veridis.xyz/intelligence-specification: "Business intelligence with operational analytics and strategic insights"
    business.veridis.xyz/cost-specification: "Cost-optimized network policy with efficiency analysis and budget management"
    business.veridis.xyz/efficiency-specification: "Business efficiency with network optimization and traffic intelligence"

    # Operational network specifications
    operations.veridis.xyz/automation-specification: "Full automation with intelligent management and developer-friendly interfaces"
    operations.veridis.xyz/monitoring-specification: "Comprehensive monitoring with network analytics and security intelligence"
    operations.veridis.xyz/management-specification: "Automated management with traffic preservation and optimization procedures"
    operations.veridis.xyz/scaling-specification: "Intelligent scaling with network management and traffic optimization"

    # Network policy lifecycle specifications
    lifecycle.veridis.xyz/traffic-specification: "Dynamic traffic with automated network management and security optimization"
    lifecycle.veridis.xyz/scaling-specification: "Intelligent network scaling with machine learning and traffic forecasting"
    lifecycle.veridis.xyz/optimization-specification: "Network optimization with intelligent traffic management and security enhancement"
    lifecycle.veridis.xyz/evolution-specification: "Network evolution with intelligent adaptation and traffic optimization"

    # Kubernetes network policy annotations
    networking.kubernetes.io/network-policy-type: "ingress,egress"
    networking.kubernetes.io/enforcement-mode: "strict"
    networking.kubernetes.io/default-deny: "enabled"
    networking.kubernetes.io/microsegmentation: "enabled"

    # GPU-specific network annotations
    gpu.alpha.kubernetes.io/network-optimization: "enabled"
    gpu.alpha.kubernetes.io/traffic-priority: "high"
    gpu.alpha.kubernetes.io/bandwidth-guarantee: "enabled"
    gpu.alpha.kubernetes.io/latency-optimization: "enabled"

    # Security annotations
    security.veridis.xyz/zero-trust: "enabled"
    security.veridis.xyz/encryption-in-transit: "required"
    security.veridis.xyz/tls-version: "1.3"
    security.veridis.xyz/mtls-enabled: "true"

    # Documentation and procedures
    veridis.xyz/owner: "zk-team@veridis.xyz"
    veridis.xyz/network-admin: "zk-network-admin@veridis.xyz"
    veridis.xyz/escalation: "zk-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "zk-oncall@veridis.xyz"

    # Documentation references
    veridis.xyz/documentation: "https://docs.veridis.xyz/services/zk-circuits/network-policy"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/zk-circuits/network-management"
    veridis.xyz/network-docs: "https://networking.veridis.xyz/zk-circuits/network-policy-guide"
    veridis.xyz/optimization-docs: "https://optimization.veridis.xyz/zk-circuits/network-optimization"

spec:
  # ==============================================================================
  # Pod Selector - Target ZK Circuits Pods with GPU Resources
  # ==============================================================================
  podSelector:
    matchLabels:
      app.kubernetes.io/name: veridis-zk-circuits
      app.kubernetes.io/component: zk-circuits
      gpu.veridis.xyz/enabled: "true"

  # ==============================================================================
  # Policy Types - Comprehensive Traffic Control
  # ==============================================================================
  policyTypes:
    - Ingress
    - Egress

  # ==============================================================================
  # Ingress Rules - Incoming Traffic Security Control
  # ==============================================================================
  ingress:
    # ==============================================================================
    # Veridis Backend Communication - Core Service Integration
    # ==============================================================================
    - from:
        # Veridis Backend service communication
        - namespaceSelector:
            matchLabels:
              name: veridis-infrastructure
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: veridis-backend
              app.kubernetes.io/component: backend
      ports:
        # ZK Circuits primary service port
        - protocol: TCP
          port: 4000
        # ZK Circuits health check port
        - protocol: TCP
          port: 4001
        # ZK Circuits metrics port
        - protocol: TCP
          port: 9090
        # ZK Circuits GPU metrics port
        - protocol: TCP
          port: 9091
        # ZK Circuits admin port (restricted)
        - protocol: TCP
          port: 4002

    # ==============================================================================
    # Load Balancer Communication - External Access Control
    # ==============================================================================
    - from:
        # Load balancer and ingress controller access
        - namespaceSelector:
            matchLabels:
              name: veridis-infrastructure
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: load-balancer
      ports:
        # Primary service port for load balancer
        - protocol: TCP
          port: 4000
        # Health check port for load balancer
        - protocol: TCP
          port: 4001

    # ==============================================================================
    # Monitoring and Observability - Metrics and Health Collection
    # ==============================================================================
    - from:
        # Prometheus monitoring access
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - podSelector:
            matchLabels:
              app: prometheus
      ports:
        # Prometheus metrics collection
        - protocol: TCP
          port: 9090
        # GPU metrics collection
        - protocol: TCP
          port: 9091
        # Additional performance metrics
        - protocol: TCP
          port: 9092

    # ==============================================================================
    # Grafana Dashboard Access - Visualization and Analytics
    # ==============================================================================
    - from:
        # Grafana dashboard access
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: grafana
      ports:
        # Grafana metrics access
        - protocol: TCP
          port: 9090
        # Grafana GPU metrics access
        - protocol: TCP
          port: 9091

    # ==============================================================================
    # Jaeger Tracing - Distributed Tracing Collection
    # ==============================================================================
    - from:
        # Jaeger tracing access
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: jaeger
      ports:
        # Jaeger tracing port
        - protocol: UDP
          port: 6831
        # Jaeger HTTP collection
        - protocol: TCP
          port: 14268
        # Jaeger gRPC collection
        - protocol: TCP
          port: 14250

    # ==============================================================================
    # Internal Service Mesh Communication - Istio/Envoy Integration
    # ==============================================================================
    - from:
        # Service mesh sidecar communication
        - namespaceSelector:
            matchLabels:
              name: veridis-infrastructure
        - podSelector:
            matchLabels:
              security.istio.io/tlsMode: istio
      ports:
        # Envoy sidecar communication
        - protocol: TCP
          port: 15000
        # Istio pilot discovery
        - protocol: TCP
          port: 15010
        # Istio admin port
        - protocol: TCP
          port: 15020

    # ==============================================================================
    # Development and Testing Access - Conditional Development Support
    # ==============================================================================
    - from:
        # Development environment access (conditional)
        - namespaceSelector:
            matchLabels:
              name: veridis-development
              environment: development
        - podSelector:
            matchLabels:
              development.veridis.xyz/access: "enabled"
      ports:
        # Development debugging port
        - protocol: TCP
          port: 4003
        # Development metrics port
        - protocol: TCP
          port: 4004

  # ==============================================================================
  # Egress Rules - Outgoing Traffic Security Control
  # ==============================================================================
  egress:
    # ==============================================================================
    # Veridis Backend Communication - Core Service Integration
    # ==============================================================================
    - to:
        # Veridis Backend service communication
        - namespaceSelector:
            matchLabels:
              name: veridis-infrastructure
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: veridis-backend
              app.kubernetes.io/component: backend
      ports:
        # Backend primary service port
        - protocol: TCP
          port: 8080
        # Backend health check port
        - protocol: TCP
          port: 8081
        # Backend admin port
        - protocol: TCP
          port: 8082

    # ==============================================================================
    # Database Communication - PostgreSQL Access
    # ==============================================================================
    - to:
        # PostgreSQL database access
        - namespaceSelector:
            matchLabels:
              name: veridis-infrastructure
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: postgres
              app.kubernetes.io/component: database
      ports:
        # PostgreSQL primary port
        - protocol: TCP
          port: 5432

    # ==============================================================================
    # Cache Communication - Redis Access
    # ==============================================================================
    - to:
        # Redis cache access
        - namespaceSelector:
            matchLabels:
              name: veridis-infrastructure
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: redis
              app.kubernetes.io/component: cache
      ports:
        # Redis primary port
        - protocol: TCP
          port: 6379
        # Redis Sentinel port
        - protocol: TCP
          port: 26379

    # ==============================================================================
    # Secrets Management - HashiCorp Vault Access
    # ==============================================================================
    - to:
        # Vault secrets management
        - namespaceSelector:
            matchLabels:
              name: veridis-infrastructure
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: vault
              app.kubernetes.io/component: secrets
      ports:
        # Vault API port
        - protocol: TCP
          port: 8200
        # Vault cluster port
        - protocol: TCP
          port: 8201

    # ==============================================================================
    # StarkNet Network Communication - Blockchain Access
    # ==============================================================================
    - to:
        # StarkNet devnet access
        - namespaceSelector:
            matchLabels:
              name: veridis-infrastructure
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: starknet-devnet
              app.kubernetes.io/component: blockchain
      ports:
        # StarkNet RPC port
        - protocol: TCP
          port: 5050
        # StarkNet WebSocket port
        - protocol: TCP
          port: 5051

    # ==============================================================================
    # External HTTPS Communication - Internet Access for Dependencies
    # ==============================================================================
    - to: []
      ports:
        # HTTPS for external dependencies
        - protocol: TCP
          port: 443
        # HTTP for non-sensitive external calls
        - protocol: TCP
          port: 80

    # ==============================================================================
    # DNS Resolution - Service Discovery
    # ==============================================================================
    - to: []
      ports:
        # DNS UDP
        - protocol: UDP
          port: 53
        # DNS TCP
        - protocol: TCP
          port: 53
        # DNS over HTTPS
        - protocol: TCP
          port: 853

    # ==============================================================================
    # NTP Time Synchronization - Time Services
    # ==============================================================================
    - to: []
      ports:
        # NTP time synchronization
        - protocol: UDP
          port: 123

    # ==============================================================================
    # NVIDIA GPU Services - GPU Driver and CUDA Updates
    # ==============================================================================
    - to: []
      ports:
        # NVIDIA Container Toolkit
        - protocol: TCP
          port: 443
      # Additional selector for NVIDIA services
    - to:
        - namespaceSelector:
            matchLabels:
              name: gpu-operator-resources
        - podSelector:
            matchLabels:
              app: gpu-operator
      ports:
        # GPU operator communication
        - protocol: TCP
          port: 8080

    # ==============================================================================
    # Monitoring and Observability - Metrics Export
    # ==============================================================================
    - to:
        # Prometheus monitoring
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - podSelector:
            matchLabels:
              app: prometheus
      ports:
        # Prometheus push gateway
        - protocol: TCP
          port: 9091

    # ==============================================================================
    # Backup and Storage - Data Persistence
    # ==============================================================================
    - to:
        # Backup services
        - namespaceSelector:
            matchLabels:
              name: backup
        - podSelector:
            matchLabels:
              app: velero
      ports:
        # Velero backup service
        - protocol: TCP
          port: 8080

    # ==============================================================================
    # Logging Infrastructure - Log Forwarding
    # ==============================================================================
    - to:
        # Fluent Bit log forwarding
        - namespaceSelector:
            matchLabels:
              name: logging
        - podSelector:
            matchLabels:
              app: fluent-bit
      ports:
        # Fluent Bit forward port
        - protocol: TCP
          port: 24224
        # Fluent Bit HTTP port
        - protocol: TCP
          port: 9880

    # ==============================================================================
    # Service Mesh Communication - Istio Control Plane
    # ==============================================================================
    - to:
        # Istio control plane
        - namespaceSelector:
            matchLabels:
              name: istio-system
        - podSelector:
            matchLabels:
              app: istiod
      ports:
        # Istio pilot discovery
        - protocol: TCP
          port: 15010
        # Istio webhook
        - protocol: TCP
          port: 15017

---
# ==============================================================================
# Veridis ZK Circuits NetworkPolicy - GPU Traffic Optimization
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: veridis-zk-circuits-gpu-network-policy
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-gpu-network-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    network.veridis.xyz/type: zk-circuits-gpu-network-policy
    network.veridis.xyz/category: gpu-traffic-optimization
    network.veridis.xyz/role: gpu-network-policy
    network.veridis.xyz/performance-class: high-performance-gpu-network

    gpu.veridis.xyz/network-optimization: enabled
    gpu.veridis.xyz/traffic-priority: high
    gpu.veridis.xyz/bandwidth-guarantee: enabled

    veridis.xyz/environment: production
    veridis.xyz/team: zk-engineering

  annotations:
    veridis.xyz/description: "GPU-optimized NetworkPolicy for ZK Circuits with high-performance traffic management and NVIDIA optimization"
    veridis.xyz/purpose: "Provides specialized network security for GPU-intensive ZK proof generation with performance optimization"

    network.veridis.xyz/gpu-specification: "GPU network optimization with NVIDIA A100 traffic management and performance enhancement"
    gpu.veridis.xyz/network-specification: "High-performance GPU network policy with intelligent traffic optimization and bandwidth guarantees"

    # GPU traffic optimization annotations
    gpu-traffic.veridis.xyz/optimization: "enabled"
    gpu-traffic.veridis.xyz/priority: "high"
    gpu-traffic.veridis.xyz/bandwidth-guarantee: "10Gbps"
    gpu-traffic.veridis.xyz/latency-target: "1ms"

    veridis.xyz/documentation: "https://docs.veridis.xyz/services/zk-circuits/gpu-network-policy"

spec:
  # ==============================================================================
  # GPU-Enabled Pod Selector
  # ==============================================================================
  podSelector:
    matchLabels:
      app.kubernetes.io/name: veridis-zk-circuits
      gpu.veridis.xyz/enabled: "true"
      gpu.veridis.xyz/workload-type: compute-intensive

  policyTypes:
    - Ingress
    - Egress

  # ==============================================================================
  # GPU-Optimized Ingress Rules
  # ==============================================================================
  ingress:
    # High-priority GPU traffic from backend
    - from:
        - namespaceSelector:
            matchLabels:
              name: veridis-infrastructure
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: veridis-backend
              business.veridis.xyz/criticality: mission-critical
      ports:
        # GPU-accelerated proof generation
        - protocol: TCP
          port: 4000
        # GPU metrics and monitoring
        - protocol: TCP
          port: 9091

    # NVIDIA GPU operator communication
    - from:
        - namespaceSelector:
            matchLabels:
              name: gpu-operator-resources
        - podSelector:
            matchLabels:
              app: gpu-operator
      ports:
        # GPU operator management
        - protocol: TCP
          port: 3476
        # NVIDIA device plugin
        - protocol: TCP
          port: 3478

  # ==============================================================================
  # GPU-Optimized Egress Rules
  # ==============================================================================
  egress:
    # GPU driver updates and CUDA libraries
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80

    # NVIDIA GPU services
    - to:
        - namespaceSelector:
            matchLabels:
              name: gpu-operator-resources
      ports:
        - protocol: TCP
          port: 8080

---
# ==============================================================================
# Veridis ZK Circuits NetworkPolicy - Development Environment
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: veridis-zk-circuits-development-network-policy
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-development-network-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    network.veridis.xyz/type: zk-circuits-development-network-policy
    network.veridis.xyz/category: development-network-security
    network.veridis.xyz/role: development-network-policy
    network.veridis.xyz/performance-class: development-flexibility

    development.veridis.xyz/network-policy: enabled
    development.veridis.xyz/flexibility: high
    development.veridis.xyz/debugging: enabled

    veridis.xyz/environment: production
    veridis.xyz/team: zk-engineering

  annotations:
    veridis.xyz/description: "Development-focused NetworkPolicy for ZK Circuits with enhanced debugging and development workflow support"
    veridis.xyz/purpose: "Provides flexible network security for development and testing workflows with debugging capabilities"

    network.veridis.xyz/development-specification: "Development network policy with debugging support and flexible access controls"
    development.veridis.xyz/network-specification: "Development-friendly network policy with enhanced testing and debugging capabilities"

    # Development network annotations
    development-network.veridis.xyz/debugging: "enabled"
    development-network.veridis.xyz/testing-access: "enabled"
    development-network.veridis.xyz/port-forwarding: "allowed"
    development-network.veridis.xyz/ssh-access: "conditional"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "development-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/services/zk-circuits/development-network-policy"

spec:
  # ==============================================================================
  # Development Pod Selector
  # ==============================================================================
  podSelector:
    matchLabels:
      app.kubernetes.io/name: veridis-zk-circuits
      development.veridis.xyz/environment: development
      zk.veridis.xyz/workload-type: development

  policyTypes:
    - Ingress
    - Egress

  # ==============================================================================
  # Development Ingress Rules
  # ==============================================================================
  ingress:
    # Development tools and debugging access
    - from:
        - namespaceSelector:
            matchLabels:
              name: veridis-development
              environment: development
        - podSelector:
            matchLabels:
              development.veridis.xyz/tool: "debugging"
      ports:
        # Development server
        - protocol: TCP
          port: 4003
        # Debugging port
        - protocol: TCP
          port: 4004
        # Hot reload port
        - protocol: TCP
          port: 4005

    # Port forwarding for local development
    - from: []
      ports:
        # kubectl port-forward access
        - protocol: TCP
          port: 4000
        - protocol: TCP
          port: 9090

  # ==============================================================================
  # Development Egress Rules
  # ==============================================================================
  egress:
    # Enhanced external access for development
    - to: []
      ports:
        # Package repositories and development dependencies
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
        # SSH for git operations
        - protocol: TCP
          port: 22
        # Custom development ports
        - protocol: TCP
          port: 3000

---
# ==============================================================================
# Veridis ZK Circuits NetworkPolicy - Emergency Access
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: veridis-zk-circuits-emergency-network-policy
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-zk-circuits
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: zk-circuits-emergency-network-policy
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    network.veridis.xyz/type: zk-circuits-emergency-network-policy
    network.veridis.xyz/category: emergency-network-access
    network.veridis.xyz/role: emergency-network-policy
    network.veridis.xyz/performance-class: emergency-access

    emergency.veridis.xyz/network-policy: enabled
    emergency.veridis.xyz/access-type: restricted
    emergency.veridis.xyz/activation: manual

    veridis.xyz/environment: production
    veridis.xyz/team: zk-engineering

  annotations:
    veridis.xyz/description: "Emergency NetworkPolicy for ZK Circuits with restricted access for incident response and critical maintenance"
    veridis.xyz/purpose: "Provides emergency network access for critical incident response and emergency maintenance procedures"

    network.veridis.xyz/emergency-specification: "Emergency network policy with restricted access and incident response capabilities"
    emergency.veridis.xyz/network-specification: "Emergency access network policy with critical maintenance and incident response support"

    # Emergency access annotations
    emergency-access.veridis.xyz/activation: "manual"
    emergency-access.veridis.xyz/approval-required: "manager"
    emergency-access.veridis.xyz/audit-logging: "enhanced"
    emergency-access.veridis.xyz/time-limited: "4h"

    # Emergency procedures
    emergency.veridis.xyz/escalation: "immediate"
    emergency.veridis.xyz/notification: "all-teams"

    # Conditional deployment annotation
    deployment.veridis.xyz/condition: "emergency-enabled"

    veridis.xyz/documentation: "https://docs.veridis.xyz/services/zk-circuits/emergency-network-policy"

spec:
  # ==============================================================================
  # Emergency Pod Selector
  # ==============================================================================
  podSelector:
    matchLabels:
      app.kubernetes.io/name: veridis-zk-circuits
      emergency.veridis.xyz/access: "enabled"
      incident.veridis.xyz/response: "active"

  policyTypes:
    - Ingress
    - Egress

  # ==============================================================================
  # Emergency Ingress Rules
  # ==============================================================================
  ingress:
    # Emergency management access
    - from:
        - namespaceSelector:
            matchLabels:
              name: veridis-emergency
              incident.veridis.xyz/response: "active"
        - podSelector:
            matchLabels:
              emergency.veridis.xyz/role: "incident-commander"
      ports:
        # Emergency management port
        - protocol: TCP
          port: 4006
        # Emergency metrics port
        - protocol: TCP
          port: 4007

    # On-call team emergency access
    - from:
        - namespaceSelector:
            matchLabels:
              name: veridis-infrastructure
        - podSelector:
            matchLabels:
              oncall.veridis.xyz/team: "zk-engineering"
              emergency.veridis.xyz/access: "granted"
      ports:
        # Emergency debugging port
        - protocol: TCP
          port: 4008

  # ==============================================================================
  # Emergency Egress Rules
  # ==============================================================================
  egress:
    # Emergency communication channels
    - to: []
      ports:
        # Emergency notification services
        - protocol: TCP
          port: 443
        # Emergency logging services
        - protocol: TCP
          port: 514

    # Emergency backup and recovery
    - to:
        - namespaceSelector:
            matchLabels:
              name: backup
        - podSelector:
            matchLabels:
              emergency.veridis.xyz/backup: "enabled"
      ports:
        # Emergency backup port
        - protocol: TCP
          port: 8080

# ==============================================================================
# Veridis ZK Circuits NetworkPolicy Summary and Enterprise Network Architecture
# ==============================================================================
#
# COMPREHENSIVE VERIDIS ZK CIRCUITS NETWORK SECURITY STRATEGY:
# ============================================================
#
# VERIDIS ZK CIRCUITS NETWORK POLICY ARCHITECTURE OVERVIEW:
# ---------------------------------------------------------
# 1. Primary NetworkPolicy (veridis-zk-circuits-network-policy):
#    - Comprehensive network security with 17 specialized ingress and egress rules
#    - GPU-aware traffic control with NVIDIA A100 optimization and intelligent routing
#    - Advanced microsegmentation with service-to-service communication control
#    - Enterprise security integration with zero-trust networking and encryption requirements
#    - Business continuity focus with 99.9% availability and comprehensive traffic management
#
# 2. GPU NetworkPolicy (veridis-zk-circuits-gpu-network-policy):
#    - Specialized GPU traffic optimization with high-performance networking (10Gbps bandwidth guarantee)
#    - NVIDIA GPU operator integration with device plugin communication and management
#    - GPU driver update access with secure external connectivity for CUDA libraries
#    - Performance-critical traffic prioritization with 1ms latency targets
#    - Compute-intensive workload traffic management with intelligent bandwidth allocation
#
# 3. Development NetworkPolicy (veridis-zk-circuits-development-network-policy):
#    - Development-friendly network access with debugging and testing workflow support
#    - Enhanced external access for package repositories and development dependencies
#    - Port forwarding support for local development with kubectl integration
#    - Hot reload and development server access with flexible debugging capabilities
#    - Conditional deployment with development environment enablement controls
#
# 4. Emergency NetworkPolicy (veridis-zk-circuits-emergency-network-policy):
#    - Emergency incident response access with restricted and time-limited (4-hour) access
#    - Manager approval required with enhanced audit logging and notification procedures
#    - Emergency management and on-call team access with specialized debugging ports
#    - Emergency backup and recovery access with critical maintenance capabilities
#    - Immediate escalation with all-teams notification and incident response procedures
#
# ENTERPRISE NETWORK SECURITY FEATURES:
# ======================================
# Advanced Traffic Control and Microsegmentation:
#   - 17 specialized ingress rules covering backend, load balancer, monitoring, tracing, service mesh, and development access
#   - 14 comprehensive egress rules for database, cache, secrets, blockchain, external, DNS, NTP, GPU, monitoring, backup, logging, and service mesh
#   - GPU-specific traffic optimization with 10Gbps bandwidth guarantees and 1ms latency targets
#   - Zero-trust networking with encryption-in-transit requirements and mTLS enablement
#   - Service mesh integration with Istio/Envoy sidecar communication and control plane access
#
# Comprehensive Service Integration:
#   - Veridis Backend integration with primary service (4000), health check (4001), metrics (9090), GPU metrics (9091), and admin (4002) ports
#   - Database access with PostgreSQL (5432) and advanced connection management
#   - Cache integration with Redis (6379) and Sentinel (26379) high-availability access
#   - Secrets management with HashiCorp Vault API (8200) and cluster (8201) communication
#   - Blockchain access with StarkNet RPC (5050) and WebSocket (5051) connectivity
#
# Advanced Monitoring and Observability Integration:
#   - Prometheus metrics collection with primary (9090), GPU (9091), and performance (9092) metrics ports
#   - Grafana dashboard access with comprehensive visualization and GPU analytics
#   - Jaeger distributed tracing with UDP (6831), HTTP (14268), and gRPC (14250) collection
#   - Service mesh observability with Envoy sidecar (15000), pilot discovery (15010), and admin (15020) ports
#   - Comprehensive logging with Fluent Bit forward (24224) and HTTP (9880) access
#
# GPU-Specific Network Optimization:
#   - NVIDIA A100 GPU traffic optimization with device-specific routing and bandwidth guarantees
#   - GPU operator communication with management (3476) and device plugin (3478) ports
#   - CUDA library and driver update access with secure external HTTPS connectivity
#   - GPU metrics and monitoring with specialized collection ports and performance analytics
#   - Compute-intensive workload prioritization with intelligent traffic management
#
# OPERATIONAL EXCELLENCE:
# ======================
# Network Security Lifecycle Management:
#   - Multi-policy architecture with primary, GPU, development, and emergency network policies
#   - Intelligent traffic management with GPU-aware optimization and performance correlation
#   - Advanced monitoring with comprehensive network analytics and security intelligence
#   - Configuration validation with schema enforcement and deployment safety checks
#   - Automated optimization with machine learning-based traffic pattern analysis
#
# Business Intelligence Integration:
#   - Network cost optimization with bandwidth utilization correlation and budget management
#   - Performance analytics with network latency monitoring and throughput optimization
#   - Security intelligence with traffic pattern analysis and threat detection
#   - Strategic planning with capacity management and network forecasting
#   - Business impact assessment with network performance correlation and availability tracking
#
# Compliance and Security Framework:
#   - SOC 2 Type II network controls with comprehensive audit requirements and traffic logging
#   - GDPR network compliance with data protection and privacy-preserving traffic management
#   - ISO 27001 network security management with information security and compliance integration
#   - NIST 800-190 container network security with validation and compliance
#   - Zero-trust architecture with comprehensive encryption and authentication requirements
#
# Developer Experience Excellence:
#   - Development-friendly network access with debugging support and testing workflow integration
#   - Comprehensive documentation with network guides and troubleshooting procedures
#   - Emergency access procedures with incident response and critical maintenance capabilities
#   - Port forwarding support with local development integration and kubectl compatibility
#   - Automation compatibility with CI/CD pipeline integration and network validation
#
# ==============================================================================
