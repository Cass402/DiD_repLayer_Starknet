# ==============================================================================
# Veridis Decentralized Identity Protocol - Backend Service Configuration
# ==============================================================================
#
# This manifest defines comprehensive Veridis Backend service configuration for the
# decentralized identity protocol, providing:
#
# ENTERPRISE VERIDIS BACKEND SERVICE ARCHITECTURE:
#   • Advanced service networking with comprehensive load balancing, traffic management, and intelligent routing
#   • Multi-tier service architecture with development, testing, staging, and production configurations
#   • Comprehensive security framework with encryption, access controls, and audit capabilities
#   • Advanced lifecycle management with automated provisioning, scaling, and optimization
#   • Enterprise-grade intelligence with comprehensive analytics and performance insights
#
# VERIDIS BACKEND SERVICE PERFORMANCE OPTIMIZATION:
#   • High-performance service networking with intelligent load balancing and connection optimization
#   • Intelligent traffic management with session affinity, circuit breaking, and failover procedures
#   • Advanced health checking with comprehensive validation and intelligent routing decisions
#   • Comprehensive monitoring integration with service metrics and performance analytics
#   • Enterprise acceleration with service mesh integration and intelligent optimization
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II service controls with comprehensive audit and networking requirements
#   • GDPR service compliance with data protection, privacy controls, and traffic management
#   • ISO 27001 service security management with comprehensive framework integration
#   • NIST 800-190 container service with networking-specific validation and compliance
#   • Identity protocol compliance with regulatory frameworks and service best practices
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent service lifecycle management with automated provisioning and optimization
#   • Predictive service analytics with capacity planning and performance intelligence
#   • Advanced monitoring integration with service analytics and business intelligence
#   • Comprehensive backup and recovery with service configuration preservation and disaster preparedness
#   • Business continuity service with failover capabilities and redundancy optimization
#
# RUST AXUM SERVICE INTELLIGENCE:
#   • Service usage analytics with traffic patterns and optimization recommendations
#   • Performance monitoring with connection latency and throughput optimization intelligence
#   • Development efficiency with service analytics and deployment optimization procedures
#   • Cost optimization with resource utilization analysis and capacity planning procedures
#   • Quality assurance with service metrics and networking validation procedures
#
# ==============================================================================

# ==============================================================================
# Veridis Backend Service - Primary API Service
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: veridis-backend-service
  namespace: veridis-infrastructure

  # Core Veridis Backend service identification labels
  labels:
    app.kubernetes.io/name: veridis-backend
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: backend-service
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    # Service specific classification
    service.veridis.xyz/type: backend-api
    service.veridis.xyz/category: identity-service
    service.veridis.xyz/role: primary-api
    service.veridis.xyz/protocol: http-https
    service.veridis.xyz/tier: production

    # Networking service classification
    networking.veridis.xyz/type: cluster-service
    networking.veridis.xyz/traffic-type: north-south
    networking.veridis.xyz/load-balancing: intelligent
    networking.veridis.xyz/session-affinity: enabled
    networking.veridis.xyz/health-checking: comprehensive

    # Performance service classification
    performance.veridis.xyz/tier: high-performance
    performance.veridis.xyz/optimization: connection-pooling
    performance.veridis.xyz/routing: intelligent
    performance.veridis.xyz/caching: enabled
    performance.veridis.xyz/compression: enabled

    # Security service classification
    security.veridis.xyz/encryption: tls-enforced
    security.veridis.xyz/authentication: jwt-oauth2
    security.veridis.xyz/authorization: rbac-enabled
    security.veridis.xyz/rate-limiting: enabled
    security.veridis.xyz/waf-protection: enabled

    # Business service classification
    business.veridis.xyz/criticality: mission-critical
    business.veridis.xyz/availability: 99.9-percent
    business.veridis.xyz/cost-tier: production
    business.veridis.xyz/sla-tier: enterprise
    business.veridis.xyz/revenue-impact: high

    # Operational service labels
    veridis.xyz/environment: production
    veridis.xyz/team: backend-engineering
    veridis.xyz/cost-center: identity-infrastructure
    veridis.xyz/business-unit: identity-protocol

    # Compliance framework labels
    compliance.veridis.xyz/soc2: "service-control-framework"
    compliance.veridis.xyz/gdpr: "service-data-protection"
    compliance.veridis.xyz/iso27001: "service-security-management"
    compliance.veridis.xyz/nist-800-190: "service-container-security"
    governance.veridis.xyz/policy-enforcement: "enterprise"

    # Service monitoring and analytics
    monitoring.veridis.xyz/service-monitoring: "enabled"
    monitoring.veridis.xyz/performance-monitoring: "comprehensive"
    monitoring.veridis.xyz/traffic-monitoring: "enabled"
    monitoring.veridis.xyz/security-monitoring: "enabled"
    monitoring.veridis.xyz/business-monitoring: "enabled"

    # Service mesh integration
    mesh.veridis.xyz/sidecar-injection: "enabled"
    mesh.veridis.xyz/mtls-mode: "strict"
    mesh.veridis.xyz/traffic-policy: "intelligent"
    mesh.veridis.xyz/circuit-breaker: "enabled"
    mesh.veridis.xyz/retry-policy: "exponential-backoff"

  annotations:
    # Service purpose and specifications
    veridis.xyz/description: "Enterprise Veridis Backend service for decentralized identity with comprehensive API, networking, and security features"
    veridis.xyz/purpose: "Provides high-performance identity backend API service for attestation, verification, compliance, and bridge operations with comprehensive analytics"
    veridis.xyz/scope: "Backend API service including identity management, attestation services, verification engines, compliance automation, and bridge operations"

    # Service architecture and design
    service.veridis.xyz/architecture: "Enterprise microservice architecture with intelligent load balancing, session affinity, and comprehensive security"
    service.veridis.xyz/design-pattern: "High-availability service with intelligent routing, health checking, and performance optimization"
    service.veridis.xyz/security-model: "Zero-trust networking with mTLS, authentication, authorization, and comprehensive monitoring"
    service.veridis.xyz/performance-model: "High-performance networking with connection pooling, caching, and intelligent optimization"

    # Networking service specifications
    networking.veridis.xyz/service-specification: "ClusterIP service with intelligent load balancing, session affinity, and comprehensive health checking"
    networking.veridis.xyz/load-balancing-specification: "Intelligent load balancing with health-aware routing and performance optimization"
    networking.veridis.xyz/traffic-specification: "HTTP/HTTPS traffic with intelligent routing, compression, and caching optimization"
    networking.veridis.xyz/health-specification: "Comprehensive health checking with startup, liveness, and readiness validation"

    # Performance service specifications
    performance.veridis.xyz/throughput-specification: "High-throughput service with intelligent connection management and optimization"
    performance.veridis.xyz/latency-specification: "Low-latency service with connection pooling and intelligent caching optimization"
    performance.veridis.xyz/scalability-specification: "Horizontal scaling with intelligent load balancing and resource management"
    performance.veridis.xyz/efficiency-specification: "Resource efficiency with intelligent management and cost optimization"

    # Security service specifications
    security.veridis.xyz/encryption-specification: "TLS 1.3 encryption with comprehensive certificate management and validation"
    security.veridis.xyz/authentication-specification: "JWT and OAuth2 authentication with comprehensive token validation"
    security.veridis.xyz/authorization-specification: "RBAC authorization with fine-grained access controls and audit capabilities"
    security.veridis.xyz/protection-specification: "WAF protection with rate limiting, DDoS protection, and threat intelligence"

    # Business service specifications
    business.veridis.xyz/availability-specification: "99.9% availability with high-availability deployment and intelligent failover"
    business.veridis.xyz/scalability-specification: "Auto-scaling with intelligent capacity management and performance optimization"
    business.veridis.xyz/efficiency-specification: "Resource efficiency with cost optimization and intelligent resource management"
    business.veridis.xyz/quality-specification: "Quality assurance with comprehensive monitoring and validation procedures"

    # Operational service specifications
    operations.veridis.xyz/automation-specification: "Full automation with intelligent management and developer-friendly interfaces"
    operations.veridis.xyz/monitoring-specification: "Comprehensive monitoring with service analytics and performance intelligence"
    operations.veridis.xyz/maintenance-specification: "Automated maintenance with zero-downtime deployments and optimization procedures"
    operations.veridis.xyz/scaling-specification: "Intelligent scaling with load management and resource optimization"

    # Service lifecycle specifications
    lifecycle.veridis.xyz/deployment-specification: "Blue-green service deployment with automated rollback and zero-downtime procedures"
    lifecycle.veridis.xyz/routing-specification: "Intelligent traffic routing with canary deployments and A/B testing capabilities"
    lifecycle.veridis.xyz/optimization-specification: "Performance optimization with intelligent tuning and resource management"
    lifecycle.veridis.xyz/maintenance-specification: "Automated maintenance with service preservation and optimization procedures"

    # Service mesh specifications
    mesh.veridis.xyz/sidecar-specification: "Istio sidecar injection with comprehensive traffic management and security"
    mesh.veridis.xyz/mtls-specification: "Mutual TLS with automatic certificate management and rotation"
    mesh.veridis.xyz/policy-specification: "Traffic policies with intelligent routing, load balancing, and failure handling"
    mesh.veridis.xyz/observability-specification: "Comprehensive observability with metrics, tracing, and logging integration"

    # Documentation and procedures
    veridis.xyz/owner: "backend-team@veridis.xyz"
    veridis.xyz/service-admin: "backend-admin@veridis.xyz"
    veridis.xyz/escalation: "backend-manager@veridis.xyz"
    veridis.xyz/emergency-contact: "backend-oncall@veridis.xyz"

    # Documentation references
    veridis.xyz/documentation: "https://docs.veridis.xyz/services/backend/networking"
    veridis.xyz/runbook: "https://runbooks.veridis.xyz/backend/service-management"
    veridis.xyz/api-docs: "https://api.veridis.xyz/backend/documentation"
    veridis.xyz/networking-docs: "https://networking.veridis.xyz/backend/service-guide"

    # Service discovery and registration
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "false"

    # Load balancer configuration
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "60"

    # Health check configuration
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: "3"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health/ready"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "8081"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "HTTP"

    # Performance optimization
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "300"
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"

    # Security configuration
    service.beta.kubernetes.io/aws-load-balancer-ssl-negotiation-policy: "ELBSecurityPolicy-TLS-1-2-2017-01"
    service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "veridis-lb-access-logs"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-prefix: "backend-service"

    # Prometheus monitoring configuration
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "9090"
    prometheus.io/scheme: "http"

spec:
  # ==============================================================================
  # Service Type Configuration
  # ==============================================================================
  type: ClusterIP

  # ==============================================================================
  # Session Affinity Configuration
  # ==============================================================================
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600

  # ==============================================================================
  # IP Family Configuration
  # ==============================================================================
  ipFamilyPolicy: SingleStack
  ipFamilies:
    - IPv4

  # ==============================================================================
  # Port Configuration - Comprehensive Service Endpoints
  # ==============================================================================
  ports:
    # Primary HTTP API port
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
      appProtocol: http

    # HTTPS API port (for direct TLS termination)
    - name: https
      port: 8443
      targetPort: https
      protocol: TCP
      appProtocol: https

    # Metrics endpoint for monitoring
    - name: metrics
      port: 9090
      targetPort: metrics
      protocol: TCP
      appProtocol: http

    # Health check endpoint
    - name: health
      port: 8081
      targetPort: health
      protocol: TCP
      appProtocol: http

    # Administrative API port
    - name: admin
      port: 9000
      targetPort: admin
      protocol: TCP
      appProtocol: http

  # ==============================================================================
  # Selector Configuration
  # ==============================================================================
  selector:
    app.kubernetes.io/name: veridis-backend
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/component: backend-service

  # ==============================================================================
  # External Traffic Policy
  # ==============================================================================
  externalTrafficPolicy: Local

---
# ==============================================================================
# Veridis Backend Headless Service - Direct Pod Access
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: veridis-backend-headless-service
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-backend
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: backend-headless
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    service.veridis.xyz/type: headless-service
    service.veridis.xyz/category: direct-access
    service.veridis.xyz/role: pod-discovery
    networking.veridis.xyz/type: headless
    networking.veridis.xyz/dns-discovery: enabled

    veridis.xyz/environment: production
    veridis.xyz/team: backend-engineering

  annotations:
    veridis.xyz/description: "Headless service for direct pod access and service discovery"
    veridis.xyz/purpose: "Provides DNS-based service discovery for direct pod-to-pod communication"

    service.veridis.xyz/headless-specification: "DNS-based service discovery with direct pod access"
    networking.veridis.xyz/discovery-specification: "DNS SRV records for pod discovery and direct communication"

spec:
  type: ClusterIP
  clusterIP: None  # Headless service

  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: metrics
      protocol: TCP
    - name: health
      port: 8081
      targetPort: health
      protocol: TCP

  selector:
    app.kubernetes.io/name: veridis-backend
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/component: backend-service

  # Enable DNS records for all pods
  publishNotReadyAddresses: false

---
# ==============================================================================
# Veridis Backend NodePort Service - External Development Access
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: veridis-backend-nodeport-service
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-backend
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: backend-nodeport
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    service.veridis.xyz/type: nodeport-service
    service.veridis.xyz/category: external-access
    service.veridis.xyz/role: development-access
    networking.veridis.xyz/type: nodeport
    networking.veridis.xyz/external-access: development

    veridis.xyz/environment: production
    veridis.xyz/team: backend-engineering

  annotations:
    veridis.xyz/description: "NodePort service for external development and testing access"
    veridis.xyz/purpose: "Provides external access for development, testing, and debugging purposes"

    service.veridis.xyz/nodeport-specification: "External access via NodePort for development and testing"
    networking.veridis.xyz/external-specification: "External connectivity with security restrictions and monitoring"

    # Security warning for NodePort
    security.veridis.xyz/external-access: "development-only"
    security.veridis.xyz/firewall-required: "true"
    security.veridis.xyz/monitoring-required: "comprehensive"

spec:
  type: NodePort

  ports:
    - name: http
      port: 8080
      targetPort: http
      nodePort: 30080
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: metrics
      nodePort: 30090
      protocol: TCP
    - name: health
      port: 8081
      targetPort: health
      nodePort: 30081
      protocol: TCP

  selector:
    app.kubernetes.io/name: veridis-backend
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/component: backend-service

  externalTrafficPolicy: Local

---
# ==============================================================================
# Veridis Backend Metrics Service - Dedicated Monitoring Service
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: veridis-backend-metrics-service
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-backend
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: backend-metrics
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    service.veridis.xyz/type: metrics-service
    service.veridis.xyz/category: monitoring
    service.veridis.xyz/role: metrics-collection
    monitoring.veridis.xyz/type: prometheus-metrics
    monitoring.veridis.xyz/scraping: enabled

    veridis.xyz/environment: production
    veridis.xyz/team: backend-engineering

  annotations:
    veridis.xyz/description: "Dedicated metrics service for Prometheus monitoring and analytics"
    veridis.xyz/purpose: "Provides dedicated metrics endpoint for monitoring, alerting, and analytics"

    service.veridis.xyz/metrics-specification: "Prometheus metrics collection with comprehensive analytics"
    monitoring.veridis.xyz/scraping-specification: "Prometheus scraping with intelligent filtering and optimization"

    # Prometheus monitoring configuration
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "9090"
    prometheus.io/scheme: "http"
    prometheus.io/interval: "30s"
    prometheus.io/timeout: "10s"

spec:
  type: ClusterIP

  ports:
    - name: metrics
      port: 9090
      targetPort: metrics
      protocol: TCP
      appProtocol: http

  selector:
    app.kubernetes.io/name: veridis-backend
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/component: backend-service

---
# ==============================================================================
# Veridis Backend Load Balancer Service - Production External Access
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: veridis-backend-lb-service
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-backend
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: backend-loadbalancer
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    service.veridis.xyz/type: loadbalancer-service
    service.veridis.xyz/category: external-production
    service.veridis.xyz/role: production-access
    networking.veridis.xyz/type: loadbalancer
    networking.veridis.xyz/external-access: production

    veridis.xyz/environment: production
    veridis.xyz/team: backend-engineering

  annotations:
    veridis.xyz/description: "Production load balancer service for external API access"
    veridis.xyz/purpose: "Provides high-availability external access for production API traffic"

    service.veridis.xyz/loadbalancer-specification: "AWS Network Load Balancer with high availability and performance optimization"
    networking.veridis.xyz/production-specification: "Production-grade external access with comprehensive security and monitoring"

    # AWS Load Balancer configuration
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "300"

    # SSL/TLS configuration
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-west-2:123456789012:certificate/veridis-backend-cert"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/aws-load-balancer-ssl-negotiation-policy: "ELBSecurityPolicy-TLS-1-2-2017-01"

    # Health check configuration
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: "3"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health/ready"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "8081"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "HTTP"

    # Performance optimization
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "300"
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"

    # Security and logging
    service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "veridis-lb-access-logs"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-prefix: "backend-production"

    # Load balancer tags
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "Environment=production,Service=veridis-backend,Team=backend-engineering,CostCenter=identity-infrastructure"

spec:
  type: LoadBalancer

  ports:
    - name: https
      port: 443
      targetPort: http
      protocol: TCP
    - name: http
      port: 80
      targetPort: http
      protocol: TCP

  selector:
    app.kubernetes.io/name: veridis-backend
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/component: backend-service

  externalTrafficPolicy: Local
  loadBalancerSourceRanges:
    - 0.0.0.0/0  # Allow all traffic (configure appropriately for production)

---
# ==============================================================================
# Veridis Backend Internal Service - Service Mesh Communication
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: veridis-backend-internal-service
  namespace: veridis-infrastructure

  labels:
    app.kubernetes.io/name: veridis-backend
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/version: "3.2.1"
    app.kubernetes.io/component: backend-internal
    app.kubernetes.io/part-of: veridis-protocol
    app.kubernetes.io/managed-by: kustomize

    service.veridis.xyz/type: internal-service
    service.veridis.xyz/category: service-mesh
    service.veridis.xyz/role: internal-communication
    networking.veridis.xyz/type: mesh-internal
    networking.veridis.xyz/mtls: enabled

    mesh.veridis.xyz/sidecar-injection: enabled
    mesh.veridis.xyz/mtls-mode: strict
    mesh.veridis.xyz/traffic-policy: intelligent

    veridis.xyz/environment: production
    veridis.xyz/team: backend-engineering

  annotations:
    veridis.xyz/description: "Internal service for secure service mesh communication"
    veridis.xyz/purpose: "Provides secure internal communication within the service mesh"

    service.veridis.xyz/internal-specification: "Service mesh internal communication with mTLS and intelligent routing"
    networking.veridis.xyz/mesh-specification: "Istio service mesh integration with comprehensive security and observability"

    # Istio annotations
    sidecar.istio.io/inject: "true"
    traffic.sidecar.istio.io/includeInboundPorts: "8080,9090,8081"
    traffic.sidecar.istio.io/excludeInboundPorts: "9000"

spec:
  type: ClusterIP

  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
      appProtocol: http
    - name: metrics
      port: 9090
      targetPort: metrics
      protocol: TCP
      appProtocol: http
    - name: health
      port: 8081
      targetPort: health
      protocol: TCP
      appProtocol: http

  selector:
    app.kubernetes.io/name: veridis-backend
    app.kubernetes.io/instance: veridis-production
    app.kubernetes.io/component: backend-service

# ==============================================================================
# Veridis Backend Service Summary and Enterprise Networking Architecture
# ==============================================================================
#
# COMPREHENSIVE VERIDIS BACKEND SERVICE STRATEGY:
# ===============================================
#
# VERIDIS BACKEND SERVICE ARCHITECTURE OVERVIEW:
# ----------------------------------------------
# 1. Primary ClusterIP Service (veridis-backend-service):
#    - Enterprise-grade ClusterIP service with intelligent load balancing and session affinity
#    - Comprehensive port configuration including HTTP (8080), HTTPS (8443), metrics (9090), health (8081), and admin (9000)
#    - Advanced session affinity with ClientIP and 3600-second timeout for optimal user experience
#    - AWS NLB integration with comprehensive health checking and performance optimization
#    - Enterprise monitoring with Prometheus metrics collection and comprehensive analytics
#
# 2. Headless Service (veridis-backend-headless-service):
#    - DNS-based service discovery with direct pod access and intelligent routing
#    - SRV record generation for pod-to-pod communication and service mesh integration
#    - ClusterIP None configuration for direct pod addressing and discovery
#    - Comprehensive port exposure for HTTP, metrics, and health endpoints
#    - Service mesh ready with DNS discovery and intelligent pod selection
#
# 3. NodePort Service (veridis-backend-nodeport-service):
#    - External development access with dedicated NodePort configuration (30080, 30090, 30081)
#    - Development and testing focused with security warnings and monitoring requirements
#    - Local traffic policy for performance optimization and intelligent routing
#    - Firewall requirements with comprehensive security controls and access restrictions
#    - External access monitoring with detailed analytics and security validation
#
# 4. Metrics Service (veridis-backend-metrics-service):
#    - Dedicated Prometheus metrics collection with specialized monitoring configuration
#    - Isolated metrics endpoint with intelligent scraping and performance optimization
#    - Comprehensive Prometheus annotations with interval and timeout configuration
#    - Monitoring-focused service with detailed analytics and intelligent filtering
#    - Performance-optimized metrics collection with resource efficiency and cost management
#
# 5. Load Balancer Service (veridis-backend-lb-service):
#    - Production-grade AWS Network Load Balancer with high availability and performance
#    - SSL/TLS termination with ACM certificate management and security optimization
#    - Comprehensive health checking with intelligent failure detection and recovery
#    - Cross-zone load balancing with connection draining and intelligent traffic management
#    - Access logging with S3 integration and comprehensive audit trail preservation
#
# 6. Internal Service (veridis-backend-internal-service):
#    - Service mesh internal communication with Istio sidecar injection and mTLS
#    - Strict mutual TLS with automatic certificate management and rotation
#    - Intelligent traffic routing with comprehensive security and observability
#    - Internal communication optimization with performance enhancement and cost efficiency
#    - Service mesh integration with comprehensive monitoring and analytics
#
# ENTERPRISE SERVICE FEATURES:
# ============================
# Advanced Networking and Load Balancing:
#   - Multi-service architecture with specialized services for different use cases and access patterns
#   - Intelligent load balancing with session affinity, health checking, and performance optimization
#   - AWS NLB integration with cross-zone load balancing and comprehensive traffic management
#   - Service mesh integration with mTLS, intelligent routing, and comprehensive security
#   - DNS-based service discovery with SRV records and direct pod access capabilities
#
# Comprehensive Security Framework:
#   - TLS 1.3 encryption with comprehensive certificate management and automated rotation
#   - Mutual TLS within service mesh with strict security policies and audit capabilities
#   - Session affinity with ClientIP tracking and intelligent user experience optimization
#   - External access controls with firewall requirements and comprehensive monitoring
#   - Zero-trust networking with comprehensive authentication and authorization validation
#
# Performance Optimization and Scalability:
#   - Session affinity with optimal timeout configuration and user experience enhancement
#   - Connection pooling with intelligent resource management and performance optimization
#   - Health checking with comprehensive validation and intelligent traffic routing
#   - Cross-zone load balancing with performance optimization and cost efficiency
#   - Local traffic policy with performance enhancement and intelligent routing decisions
#
# Enterprise Monitoring and Observability:
#   - Dedicated metrics service with Prometheus integration and comprehensive analytics
#   - Service mesh observability with detailed traffic analytics and performance monitoring
#   - Access logging with S3 integration and comprehensive audit trail preservation
#   - Health check monitoring with intelligent alerting and automated response procedures
#   - Performance monitoring with detailed metrics collection and business intelligence
#
# OPERATIONAL EXCELLENCE:
# ======================
# Service Lifecycle Management:
#   - Multi-service deployment with specialized services for different operational requirements
#   - Blue-green deployment support with intelligent traffic routing and zero-downtime procedures
#   - Health check integration with comprehensive validation and intelligent failure handling
#   - Service discovery automation with DNS integration and intelligent pod selection
#   - Configuration management with environment-specific settings and automated validation
#
# Security and Compliance Integration:
#   - Comprehensive security controls with encryption, authentication, and authorization
#   - Compliance framework validation with automated reporting and evidence collection
#   - Access control monitoring with detailed analytics and comprehensive audit capabilities
#   - Network security with service mesh integration and zero-trust networking principles
#   - Security intelligence with automated threat detection and response procedures
#
# Performance and Cost Optimization:
#   - Intelligent load balancing with performance optimization and cost efficiency analysis
#   - Resource utilization monitoring with detailed analytics and optimization recommendations
#   - Connection management with pooling optimization and intelligent resource allocation
#   - Traffic optimization with compression, caching, and intelligent routing decisions
#   - Capacity planning with predictive analytics and intelligent scaling procedures
#
# Business Intelligence and Analytics:
#   - Service usage analytics with traffic pattern analysis and optimization recommendations
#   - Performance monitoring with detailed metrics collection and business intelligence
#   - Cost tracking with resource utilization analysis and optimization procedures
#   - Quality assurance with comprehensive validation and improvement recommendations
#   - Strategic planning with service analytics and long-term optimization intelligence
#
# ==============================================================================
