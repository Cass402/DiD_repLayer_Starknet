# ==============================================================================
# Veridis Decentralized Identity Protocol - Development Monitoring Patch
# ==============================================================================
#
# This Development Monitoring Patch provides comprehensive development-optimized
# monitoring configuration for the Veridis Decentralized Identity Protocol, providing:
#
# ENTERPRISE VERIDIS DEVELOPMENT MONITORING ARCHITECTURE:
#   • Advanced Development Monitoring with intelligent monitoring management and comprehensive development-based optimization
#   • Multi-tier Development Monitoring architecture with developer productivity, monitoring efficiency, debugging support, and validation environments
#   • Comprehensive development monitoring framework with Monitoring policies, developer tooling integration, debugging automation
#   • Advanced lifecycle management with automated Monitoring optimization, developer control, and development enhancement
#   • Enterprise-grade development intelligence with comprehensive analytics and Development Monitoring performance insights
#
# VERIDIS DEVELOPMENT MONITORING OPTIMIZATION:
#   • High-performance Development with intelligent monitoring management and developer-optimized monitoring allocation
#   • Intelligent Development monitoring management with responsive policies and development-based monitoring decisions
#   • Advanced Development management with business intelligence and monitoring-based developer control
#   • Comprehensive development monitoring control with intelligent Developer Monitoring management and monitoring enhancement
#   • Enterprise acceleration with predictive Developer Monitoring management and development monitoring optimization
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II Development Monitoring controls with comprehensive audit and development requirements
#   • GDPR Development Monitoring compliance with data protection, privacy controls, and development management
#   • ISO 27001 Development Monitoring management with comprehensive framework integration
#   • NIST 800-190 container Development Monitoring security with development-specific validation and compliance
#   • Zero-knowledge protocol compliance with regulatory frameworks and Development Monitoring best practices
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent Development Monitoring lifecycle management with automated provisioning and development optimization
#   • Predictive development analytics with capacity planning and Development Monitoring intelligence
#   • Advanced Monitoring integration with Developer development analytics and performance business intelligence
#   • Comprehensive development monitoring control with Development Monitoring preservation and monitoring optimization
#   • Business continuity Development Monitoring with development guarantees and performance optimization
#
# DEVELOPMENT MONITORING ACCELERATION INTELLIGENCE:
#   • Development Monitoring usage analytics with development patterns and optimization recommendations
#   • Monitoring monitoring with Developer development latency and management optimization intelligence
#   • Development efficiency with Development Monitoring analytics and deployment optimization procedures
#   • Cost optimization with Development Monitoring utilization analysis and development capacity planning procedures
#   • Quality assurance with Development Monitoring metrics and development validation procedures
#
# ==============================================================================

# ==============================================================================
# Veridis Backend Development Monitoring Patch
# ==============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: veridis-backend
  namespace: veridis-dev

  # Development monitoring optimization labels
  labels:
    monitoring.veridis.xyz/level: development
    monitoring.veridis.xyz/tier: development
    monitoring.veridis.xyz/profile: developer-enhanced
    monitoring.veridis.xyz/debugging-support: comprehensive
    monitoring.veridis.xyz/metrics-detail: high

    # Development monitoring management labels
    development.veridis.xyz/monitoring-optimization: developer-focused
    development.veridis.xyz/metrics-enabled: comprehensive
    development.veridis.xyz/logging-enhanced: true
    development.veridis.xyz/tracing-detailed: true
    development.veridis.xyz/profiling-enabled: true

    # Observability development labels
    observability.veridis.xyz/monitoring-level: development
    observability.veridis.xyz/debugging-enabled: true
    observability.veridis.xyz/metrics-sampling: high
    observability.veridis.xyz/log-verbosity: debug
    observability.veridis.xyz/trace-sampling: full

  annotations:
    # Development monitoring optimization annotations
    monitoring.veridis.xyz/monitoring-strategy: "developer-productivity-first"
    monitoring.veridis.xyz/metrics-optimization: "development-comprehensive"
    monitoring.veridis.xyz/logging-strategy: "debug-verbose"
    monitoring.veridis.xyz/tracing-strategy: "full-sampling"
    monitoring.veridis.xyz/alerting-mode: "development"

    # Development observability management annotations
    observability.veridis.xyz/monitoring-level: "comprehensive"
    observability.veridis.xyz/debugging-capabilities: "full"
    observability.veridis.xyz/developer-tools: "enabled"
    observability.veridis.xyz/performance-monitoring: "detailed"
    observability.veridis.xyz/cost-monitoring: "enabled"

    # Developer productivity annotations
    productivity.veridis.xyz/monitoring-balance: "visibility-optimized"
    productivity.veridis.xyz/debugging-visibility: "comprehensive"
    productivity.veridis.xyz/performance-insights: "detailed"
    productivity.veridis.xyz/monitoring-overhead: "acceptable"
    productivity.veridis.xyz/developer-experience: "enhanced"

spec:
  template:
    spec:
      containers:
        - name: veridis-backend
          # ==============================================================================
          # Development Monitoring Environment Variables
          # ==============================================================================
          env:
            # Development monitoring configuration
            - name: MONITORING_PROFILE
              value: "development"
            - name: METRICS_ENABLED
              value: "true"
            - name: DETAILED_METRICS
              value: "true"
            - name: DEBUG_METRICS
              value: "true"
            - name: DEVELOPER_METRICS
              value: "true"

            # Development Prometheus metrics configuration
            - name: PROMETHEUS_METRICS_ENABLED
              value: "true"
            - name: PROMETHEUS_METRICS_PORT
              value: "9090"
            - name: PROMETHEUS_METRICS_PATH
              value: "/metrics"
            - name: PROMETHEUS_SCRAPE_INTERVAL
              value: "15s"
            - name: PROMETHEUS_DETAILED_METRICS
              value: "true"
            - name: PROMETHEUS_CUSTOM_METRICS
              value: "true"
            - name: PROMETHEUS_HISTOGRAM_BUCKETS
              value: "0.005,0.01,0.025,0.05,0.1,0.25,0.5,1,2.5,5,10"

            # Development logging configuration
            - name: LOG_LEVEL
              value: "debug"
            - name: LOG_FORMAT
              value: "pretty"
            - name: LOG_TIMESTAMP
              value: "true"
            - name: LOG_CALLER
              value: "true"
            - name: LOG_STACKTRACE
              value: "true"
            - name: STRUCTURED_LOGGING
              value: "true"
            - name: JSON_LOGGING
              value: "false"              # Pretty logging for development
            - name: LOG_SAMPLING_DISABLED
              value: "true"               # No log sampling in development

            # Development tracing configuration
            - name: TRACING_ENABLED
              value: "true"
            - name: JAEGER_ENABLED
              value: "true"
            - name: JAEGER_AGENT_HOST
              value: "veridis-development-jaeger-agent.veridis-dev.svc.cluster.local"
            - name: JAEGER_AGENT_PORT
              value: "6831"
            - name: JAEGER_SAMPLER_TYPE
              value: "const"
            - name: JAEGER_SAMPLER_PARAM
              value: "1"                  # 100% sampling for development
            - name: JAEGER_SERVICE_NAME
              value: "veridis-backend-dev"
            - name: JAEGER_TAGS
              value: "environment=development,version=3.2.1-dev"
            - name: TRACE_DEBUG_MODE
              value: "true"

            # Development profiling configuration
            - name: PROFILING_ENABLED
              value: "true"
            - name: PROFILING_PORT
              value: "6060"
            - name: PROFILING_PATH
              value: "/debug/pprof"
            - name: CPU_PROFILING_ENABLED
              value: "true"
            - name: MEMORY_PROFILING_ENABLED
              value: "true"
            - name: GOROUTINE_PROFILING_ENABLED
              value: "true"
            - name: HEAP_PROFILING_ENABLED
              value: "true"
            - name: BLOCK_PROFILING_ENABLED
              value: "true"
            - name: MUTEX_PROFILING_ENABLED
              value: "true"

            # Development health check configuration
            - name: HEALTH_CHECK_ENABLED
              value: "true"
            - name: HEALTH_CHECK_PORT
              value: "8081"
            - name: HEALTH_CHECK_PATH
              value: "/health"
            - name: HEALTH_CHECK_DETAILED
              value: "true"
            - name: READINESS_CHECK_PATH
              value: "/ready"
            - name: LIVENESS_CHECK_PATH
              value: "/live"
            - name: STARTUP_CHECK_PATH
              value: "/startup"

            # Development performance monitoring
            - name: PERFORMANCE_MONITORING_ENABLED
              value: "true"
            - name: REQUEST_METRICS_ENABLED
              value: "true"
            - name: DATABASE_METRICS_ENABLED
              value: "true"
            - name: CACHE_METRICS_ENABLED
              value: "true"
            - name: ZK_METRICS_ENABLED
              value: "true"
            - name: BRIDGE_METRICS_ENABLED
              value: "true"
            - name: COMPLIANCE_METRICS_ENABLED
              value: "true"

            # Development custom metrics
            - name: BUSINESS_METRICS_ENABLED
              value: "true"
            - name: IDENTITY_METRICS_ENABLED
              value: "true"
            - name: ATTESTATION_METRICS_ENABLED
              value: "true"
            - name: VERIFICATION_METRICS_ENABLED
              value: "true"
            - name: USER_JOURNEY_METRICS_ENABLED
              value: "true"
            - name: ERROR_TRACKING_ENABLED
              value: "true"

            # Development alerting configuration
            - name: ALERTING_ENABLED
              value: "true"
            - name: ALERTING_WEBHOOK_URL
              value: "http://veridis-development-alertmanager.veridis-dev.svc.cluster.local:9093/api/v1/alerts"
            - name: ALERT_SEVERITY_THRESHOLD
              value: "warning"            # Lower threshold for development
            - name: DEVELOPMENT_ALERTS_ENABLED
              value: "true"
            - name: DEBUG_ALERTS_ENABLED
              value: "true"

            # Development monitoring labels and tags
            - name: MONITORING_ENVIRONMENT
              value: "development"
            - name: MONITORING_SERVICE
              value: "veridis-backend"
            - name: MONITORING_VERSION
              value: "3.2.1-dev"
            - name: MONITORING_TEAM
              value: "development-team"
            - name: MONITORING_COMPONENT
              value: "backend"

          # ==============================================================================
          # Development Monitoring Ports
          # ==============================================================================
          ports:
            # Application port
            - name: http
              containerPort: 8080
              protocol: TCP

            # Metrics port for Prometheus
            - name: metrics
              containerPort: 9090
              protocol: TCP

            # Health check port
            - name: health
              containerPort: 8081
              protocol: TCP

            # Profiling port
            - name: profiling
              containerPort: 6060
              protocol: TCP

            # Development debug port
            - name: debug
              containerPort: 8091
              protocol: TCP

          # ==============================================================================
          # Development Health Checks with Enhanced Monitoring
          # ==============================================================================
          livenessProbe:
            httpGet:
              path: /health/live
              port: health
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /health/ready
              port: health
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3

          startupProbe:
            httpGet:
              path: /health/startup
              port: health
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 30

---
# ==============================================================================
# ZK Circuits Development Monitoring Patch
# ==============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zk-circuits
  namespace: veridis-dev

  # Development ZK monitoring optimization labels
  labels:
    monitoring.veridis.xyz/level: development
    monitoring.veridis.xyz/tier: development-zk
    monitoring.veridis.xyz/profile: zk-development
    monitoring.veridis.xyz/circuit-monitoring: comprehensive
    monitoring.veridis.xyz/proof-monitoring: detailed

    # Development ZK monitoring management labels
    development.veridis.xyz/zk-monitoring: developer-focused
    development.veridis.xyz/circuit-metrics: enabled
    development.veridis.xyz/proof-metrics: enabled
    development.veridis.xyz/compilation-metrics: enabled
    development.veridis.xyz/performance-tracking: comprehensive

    # ZK development monitoring labels
    zk.veridis.xyz/monitoring-level: development
    zk.veridis.xyz/circuit-debugging: enabled
    zk.veridis.xyz/proof-debugging: enabled
    zk.veridis.xyz/performance-profiling: enabled
    zk.veridis.xyz/resource-monitoring: comprehensive

  annotations:
    # Development ZK monitoring optimization annotations
    monitoring.veridis.xyz/zk-monitoring-strategy: "circuit-development-first"
    monitoring.veridis.xyz/proof-monitoring: "comprehensive-debugging"
    monitoring.veridis.xyz/circuit-monitoring: "compilation-focused"
    monitoring.veridis.xyz/performance-monitoring: "cpu-optimized"
    monitoring.veridis.xyz/resource-monitoring: "development-detailed"

spec:
  template:
    spec:
      containers:
        - name: zk-circuits
          # ==============================================================================
          # Development ZK Monitoring Environment Variables
          # ==============================================================================
          env:
            # Development ZK monitoring configuration
            - name: ZK_MONITORING_PROFILE
              value: "development"
            - name: ZK_METRICS_ENABLED
              value: "true"
            - name: ZK_DEBUG_METRICS
              value: "true"
            - name: CIRCUIT_MONITORING_ENABLED
              value: "true"
            - name: PROOF_MONITORING_ENABLED
              value: "true"

            # Development ZK Prometheus metrics
            - name: ZK_PROMETHEUS_ENABLED
              value: "true"
            - name: ZK_METRICS_PORT
              value: "9091"
            - name: ZK_METRICS_PATH
              value: "/zk-metrics"
            - name: CIRCUIT_METRICS_DETAILED
              value: "true"
            - name: PROOF_METRICS_DETAILED
              value: "true"

            # Development ZK logging configuration
            - name: ZK_LOG_LEVEL
              value: "debug"
            - name: ZK_LOG_FORMAT
              value: "pretty"
            - name: CIRCUIT_LOG_LEVEL
              value: "debug"
            - name: PROOF_LOG_LEVEL
              value: "debug"
            - name: COMPILATION_LOG_LEVEL
              value: "debug"
            - name: GARAGA_LOG_LEVEL
              value: "debug"

            # Development ZK tracing configuration
            - name: ZK_TRACING_ENABLED
              value: "true"
            - name: ZK_JAEGER_SERVICE_NAME
              value: "zk-circuits-dev"
            - name: CIRCUIT_TRACING_ENABLED
              value: "true"
            - name: PROOF_TRACING_ENABLED
              value: "true"
            - name: COMPILATION_TRACING_ENABLED
              value: "true"

            # Development ZK performance monitoring
            - name: ZK_PERFORMANCE_MONITORING
              value: "true"
            - name: CIRCUIT_COMPILATION_METRICS
              value: "true"
            - name: PROOF_GENERATION_METRICS
              value: "true"
            - name: VERIFICATION_METRICS
              value: "true"
            - name: CPU_USAGE_METRICS
              value: "true"
            - name: MEMORY_USAGE_METRICS
              value: "true"

            # Development ZK profiling
            - name: ZK_PROFILING_ENABLED
              value: "true"
            - name: ZK_PROFILING_PORT
              value: "6061"
            - name: CIRCUIT_PROFILING_ENABLED
              value: "true"
            - name: PROOF_PROFILING_ENABLED
              value: "true"
            - name: NODE_PROFILING_ENABLED
              value: "true"

            # Development ZK health checks
            - name: ZK_HEALTH_CHECK_ENABLED
              value: "true"
            - name: ZK_HEALTH_CHECK_PORT
              value: "4001"
            - name: CIRCUIT_HEALTH_CHECK
              value: "true"
            - name: PROOF_HEALTH_CHECK
              value: "true"

            # Development ZK custom metrics
            - name: CIRCUIT_COMPILATION_TIME_METRICS
              value: "true"
            - name: PROOF_GENERATION_TIME_METRICS
              value: "true"
            - name: VERIFICATION_TIME_METRICS
              value: "true"
            - name: CIRCUIT_SIZE_METRICS
              value: "true"
            - name: CONSTRAINT_COUNT_METRICS
              value: "true"
            - name: WITNESS_GENERATION_METRICS
              value: "true"

            # Development Garaga monitoring
            - name: GARAGA_MONITORING_ENABLED
              value: "true"
            - name: GARAGA_PERFORMANCE_METRICS
              value: "true"
            - name: GARAGA_CPU_METRICS
              value: "true"
            - name: GARAGA_MEMORY_METRICS
              value: "true"
            - name: GARAGA_ERROR_TRACKING
              value: "true"

          # ==============================================================================
          # Development ZK Monitoring Ports
          # ==============================================================================
          ports:
            # ZK circuits application port
            - name: zk-http
              containerPort: 4000
              protocol: TCP

            # ZK metrics port
            - name: zk-metrics
              containerPort: 9091
              protocol: TCP

            # ZK health check port
            - name: zk-health
              containerPort: 4001
              protocol: TCP

            # ZK profiling port
            - name: zk-profiling
              containerPort: 6061
              protocol: TCP

          # ==============================================================================
          # Development ZK Health Checks
          # ==============================================================================
          livenessProbe:
            httpGet:
              path: /health/live
              port: zk-health
              scheme: HTTP
            initialDelaySeconds: 60        # ZK circuits need more time to start
            periodSeconds: 15
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /health/ready
              port: zk-health
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3

          startupProbe:
            httpGet:
              path: /health/startup
              port: zk-health
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 20          # Allow more failures for ZK startup

---
# ==============================================================================
# PostgreSQL Development Monitoring Patch
# ==============================================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: veridis-dev

  # Development database monitoring optimization labels
  labels:
    monitoring.veridis.xyz/level: development
    monitoring.veridis.xyz/tier: development-database
    monitoring.veridis.xyz/profile: database-development
    monitoring.veridis.xyz/query-monitoring: comprehensive
    monitoring.veridis.xyz/performance-monitoring: detailed

  annotations:
    # Development database monitoring optimization annotations
    monitoring.veridis.xyz/database-monitoring-strategy: "development-performance-first"
    monitoring.veridis.xyz/query-monitoring: "comprehensive-logging"
    monitoring.veridis.xyz/performance-monitoring: "detailed-metrics"
    monitoring.veridis.xyz/connection-monitoring: "development-tracking"

spec:
  template:
    spec:
      containers:
        - name: postgres
          # ==============================================================================
          # Development Database Monitoring Environment Variables
          # ==============================================================================
          env:
            # Development database monitoring configuration
            - name: POSTGRES_MONITORING_ENABLED
              value: "true"
            - name: POSTGRES_METRICS_ENABLED
              value: "true"
            - name: POSTGRES_DEBUG_MONITORING
              value: "true"

            # Development PostgreSQL logging for monitoring
            - name: POSTGRES_LOG_STATEMENT
              value: "all"               # Log all statements for development
            - name: POSTGRES_LOG_MIN_DURATION_STATEMENT
              value: "0"                 # Log all statement durations
            - name: POSTGRES_LOG_CHECKPOINTS
              value: "on"
            - name: POSTGRES_LOG_CONNECTIONS
              value: "on"
            - name: POSTGRES_LOG_DISCONNECTIONS
              value: "on"
            - name: POSTGRES_LOG_LOCK_WAITS
              value: "on"
            - name: POSTGRES_LOG_TEMP_FILES
              value: "0"                 # Log all temporary files
            - name: POSTGRES_LOG_AUTOVACUUM_MIN_DURATION
              value: "0"                 # Log all autovacuum operations

            # Development PostgreSQL performance monitoring
            - name: POSTGRES_TRACK_ACTIVITIES
              value: "on"
            - name: POSTGRES_TRACK_COUNTS
              value: "on"
            - name: POSTGRES_TRACK_IO_TIMING
              value: "on"
            - name: POSTGRES_TRACK_FUNCTIONS
              value: "all"
            - name: POSTGRES_LOG_PARSER_STATS
              value: "on"
            - name: POSTGRES_LOG_PLANNER_STATS
              value: "on"
            - name: POSTGRES_LOG_EXECUTOR_STATS
              value: "on"
            - name: POSTGRES_LOG_STATEMENT_STATS
              value: "on"

            # Development PostgreSQL monitoring extensions
            - name: POSTGRES_SHARED_PRELOAD_LIBRARIES
              value: "pg_stat_statements"
            - name: POSTGRES_PG_STAT_STATEMENTS_TRACK
              value: "all"
            - name: POSTGRES_PG_STAT_STATEMENTS_MAX
              value: "10000"

            # Development database health monitoring
            - name: DB_HEALTH_CHECK_ENABLED
              value: "true"
            - name: DB_CONNECTION_MONITORING
              value: "true"
            - name: DB_QUERY_MONITORING
              value: "true"
            - name: DB_PERFORMANCE_MONITORING
              value: "true"

          # ==============================================================================
          # Development Database Monitoring Ports
          # ==============================================================================
          ports:
            # PostgreSQL port
            - name: postgres
              containerPort: 5432
              protocol: TCP

---
# ==============================================================================
# Redis Development Monitoring Patch
# ==============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: veridis-dev

  # Development cache monitoring optimization labels
  labels:
    monitoring.veridis.xyz/level: development
    monitoring.veridis.xyz/tier: development-cache
    monitoring.veridis.xyz/profile: cache-development
    monitoring.veridis.xyz/performance-monitoring: detailed

  annotations:
    # Development cache monitoring optimization annotations
    monitoring.veridis.xyz/cache-monitoring-strategy: "development-performance-first"
    monitoring.veridis.xyz/performance-monitoring: "detailed-metrics"
    monitoring.veridis.xyz/connection-monitoring: "development-tracking"

spec:
  template:
    spec:
      containers:
        - name: redis
          # ==============================================================================
          # Development Cache Monitoring Environment Variables
          # ==============================================================================
          env:
            # Development cache monitoring configuration
            - name: REDIS_MONITORING_ENABLED
              value: "true"
            - name: REDIS_METRICS_ENABLED
              value: "true"
            - name: REDIS_DEBUG_MONITORING
              value: "true"

            # Development Redis logging for monitoring
            - name: REDIS_LOGLEVEL
              value: "debug"             # Debug level for development
            - name: REDIS_SYSLOG_ENABLED
              value: "no"
            - name: REDIS_LOGFILE
              value: ""                 # Log to stdout

            # Development Redis performance monitoring
            - name: REDIS_LATENCY_MONITOR_THRESHOLD
              value: "100"              # 100ms threshold
            - name: REDIS_SLOWLOG_LOG_SLOWER_THAN
              value: "1000"             # 1ms for development
            - name: REDIS_SLOWLOG_MAX_LEN
              value: "1000"             # Keep more slow queries

            # Development cache health monitoring
            - name: CACHE_HEALTH_CHECK_ENABLED
              value: "true"
            - name: CACHE_CONNECTION_MONITORING
              value: "true"
            - name: CACHE_PERFORMANCE_MONITORING
              value: "true"

          # ==============================================================================
          # Development Cache Monitoring Ports
          # ==============================================================================
          ports:
            # Redis port
            - name: redis
              containerPort: 6379
              protocol: TCP

---
# ==============================================================================
# Development Prometheus ServiceMonitor
# ==============================================================================
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: veridis-dev-backend-monitor
  namespace: veridis-dev

  labels:
    monitoring.veridis.xyz/component: backend
    monitoring.veridis.xyz/environment: development
    monitoring.veridis.xyz/service: veridis-backend
    app.kubernetes.io/name: veridis
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: veridis-protocol

  annotations:
    monitoring.veridis.xyz/description: "Development ServiceMonitor for Veridis Backend metrics collection"
    monitoring.veridis.xyz/scrape-interval: "15s"
    monitoring.veridis.xyz/metrics-path: "/metrics"
    monitoring.veridis.xyz/development-mode: "true"

spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: veridis
      app.kubernetes.io/component: backend
      veridis.xyz/environment: development

  endpoints:
    - port: metrics
      interval: 15s
      path: /metrics
      scheme: http
      scrapeTimeout: 10s

      # Development metric relabeling
      metricRelabelings:
        # Add development environment label
        - sourceLabels: [__name__]
          targetLabel: environment
          replacement: development

        # Add service label
        - sourceLabels: [__name__]
          targetLabel: service
          replacement: veridis-backend

        # Add version label
        - sourceLabels: [__name__]
          targetLabel: version
          replacement: "3.2.1-dev"

      # Development target relabeling
      relabelings:
        # Add development environment
        - sourceLabels: [__meta_kubernetes_namespace]
          targetLabel: kubernetes_namespace

        - sourceLabels: [__meta_kubernetes_service_name]
          targetLabel: kubernetes_service_name

        - sourceLabels: [__meta_kubernetes_pod_name]
          targetLabel: kubernetes_pod_name

        - sourceLabels: [__meta_kubernetes_pod_ip]
          targetLabel: kubernetes_pod_ip

---
# ==============================================================================
# Development ZK Circuits ServiceMonitor
# ==============================================================================
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: veridis-dev-zk-circuits-monitor
  namespace: veridis-dev

  labels:
    monitoring.veridis.xyz/component: zk-circuits
    monitoring.veridis.xyz/environment: development
    monitoring.veridis.xyz/service: zk-circuits
    app.kubernetes.io/name: veridis
    app.kubernetes.io/component: zk-circuits
    app.kubernetes.io/part-of: veridis-protocol

spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: veridis
      app.kubernetes.io/component: zk-circuits
      veridis.xyz/environment: development

  endpoints:
    - port: zk-metrics
      interval: 15s
      path: /zk-metrics
      scheme: http
      scrapeTimeout: 10s

      metricRelabelings:
        - sourceLabels: [__name__]
          targetLabel: environment
          replacement: development

        - sourceLabels: [__name__]
          targetLabel: service
          replacement: zk-circuits

---
# ==============================================================================
# Development PostgreSQL Exporter
# ==============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-exporter
  namespace: veridis-dev

  labels:
    monitoring.veridis.xyz/component: postgres-exporter
    monitoring.veridis.xyz/environment: development
    monitoring.veridis.xyz/service: postgres-monitoring
    app.kubernetes.io/name: postgres-exporter
    app.kubernetes.io/component: exporter
    app.kubernetes.io/part-of: veridis-protocol

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres-exporter
      app.kubernetes.io/component: exporter

  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres-exporter
        app.kubernetes.io/component: exporter
        app.kubernetes.io/part-of: veridis-protocol
        monitoring.veridis.xyz/component: postgres-exporter

      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"

    spec:
      containers:
        - name: postgres-exporter
          image: prometheuscommunity/postgres-exporter:v0.15.0
          ports:
            - name: metrics
              containerPort: 9187
              protocol: TCP

          env:
            - name: DATA_SOURCE_NAME
              valueFrom:
                secretKeyRef:
                  name: veridis-development-database-credentials
                  key: DATABASE_URL

            # Development PostgreSQL exporter configuration
            - name: PG_EXPORTER_WEB_LISTEN_ADDRESS
              value: ":9187"
            - name: PG_EXPORTER_WEB_TELEMETRY_PATH
              value: "/metrics"
            - name: PG_EXPORTER_DISABLE_DEFAULT_METRICS
              value: "false"
            - name: PG_EXPORTER_DISABLE_SETTINGS_METRICS
              value: "false"
            - name: PG_EXPORTER_AUTO_DISCOVER_DATABASES
              value: "true"
            - name: PG_EXPORTER_EXCLUDE_DATABASES
              value: "template0,template1"

          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "100m"
              memory: "128Mi"

          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 30
            periodSeconds: 30

          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 10
            periodSeconds: 10

---
# ==============================================================================
# Development Redis Exporter
# ==============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-exporter
  namespace: veridis-dev

  labels:
    monitoring.veridis.xyz/component: redis-exporter
    monitoring.veridis.xyz/environment: development
    monitoring.veridis.xyz/service: redis-monitoring
    app.kubernetes.io/name: redis-exporter
    app.kubernetes.io/component: exporter
    app.kubernetes.io/part-of: veridis-protocol

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-exporter
      app.kubernetes.io/component: exporter

  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-exporter
        app.kubernetes.io/component: exporter
        app.kubernetes.io/part-of: veridis-protocol
        monitoring.veridis.xyz/component: redis-exporter

      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"

    spec:
      containers:
        - name: redis-exporter
          image: oliver006/redis_exporter:v1.55.0
          ports:
            - name: metrics
              containerPort: 9121
              protocol: TCP

          env:
            - name: REDIS_ADDR
              value: "redis://veridis-redis-service.veridis-dev.svc.cluster.local:6379"

            # Development Redis exporter configuration
            - name: REDIS_EXPORTER_WEB_LISTEN_ADDRESS
              value: ":9121"
            - name: REDIS_EXPORTER_WEB_TELEMETRY_PATH
              value: "/metrics"
            - name: REDIS_EXPORTER_LOG_FORMAT
              value: "txt"
            - name: REDIS_EXPORTER_DEBUG
              value: "true"              # Debug mode for development
            - name: REDIS_EXPORTER_CHECK_KEYS
              value: "*"                # Check all keys in development
            - name: REDIS_EXPORTER_CHECK_SINGLE_KEYS
              value: "*"

          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "100m"
              memory: "128Mi"

          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 30
            periodSeconds: 30

          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 10
            periodSeconds: 10

---
# ==============================================================================
# Development Monitoring Services
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: postgres-exporter-service
  namespace: veridis-dev

  labels:
    monitoring.veridis.xyz/component: postgres-exporter
    monitoring.veridis.xyz/environment: development
    app.kubernetes.io/name: postgres-exporter
    app.kubernetes.io/component: exporter

  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/path: "/metrics"

spec:
  selector:
    app.kubernetes.io/name: postgres-exporter
    app.kubernetes.io/component: exporter

  ports:
    - name: metrics
      port: 9187
      targetPort: metrics
      protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: redis-exporter-service
  namespace: veridis-dev

  labels:
    monitoring.veridis.xyz/component: redis-exporter
    monitoring.veridis.xyz/environment: development
    app.kubernetes.io/name: redis-exporter
    app.kubernetes.io/component: exporter

  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
    prometheus.io/path: "/metrics"

spec:
  selector:
    app.kubernetes.io/name: redis-exporter
    app.kubernetes.io/component: exporter

  ports:
    - name: metrics
      port: 9121
      targetPort: metrics
      protocol: TCP

---
# ==============================================================================
# Development PrometheusRule for Custom Alerts
# ==============================================================================
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: veridis-dev-alerts
  namespace: veridis-dev

  labels:
    monitoring.veridis.xyz/component: alerting
    monitoring.veridis.xyz/environment: development
    app.kubernetes.io/name: veridis
    app.kubernetes.io/part-of: veridis-protocol

  annotations:
    monitoring.veridis.xyz/description: "Development alerting rules for Veridis Protocol"
    monitoring.veridis.xyz/alert-severity: "development"

spec:
  groups:
    - name: veridis-development-alerts
      interval: 30s
      rules:
        # Development Backend Alerts
        - alert: VeridisBackendDown
          expr: up{job="veridis-backend", environment="development"} == 0
          for: 2m
          labels:
            severity: warning
            environment: development
            service: veridis-backend
          annotations:
            summary: "Veridis Backend is down in development"
            description: "Veridis Backend has been down for more than 2 minutes in development environment"

        - alert: VeridisBackendHighErrorRate
          expr: rate(http_requests_total{job="veridis-backend", environment="development", status=~"5.."}[5m]) > 0.1
          for: 5m
          labels:
            severity: warning
            environment: development
            service: veridis-backend
          annotations:
            summary: "High error rate in Veridis Backend development"
            description: "Error rate is {{ $value }} errors per second in development"

        # Development ZK Circuits Alerts
        - alert: ZKCircuitsDown
          expr: up{job="zk-circuits", environment="development"} == 0
          for: 5m
          labels:
            severity: warning
            environment: development
            service: zk-circuits
          annotations:
            summary: "ZK Circuits service is down in development"
            description: "ZK Circuits service has been down for more than 5 minutes in development"

        - alert: ZKCircuitCompilationFailure
          expr: increase(zk_circuit_compilation_failures_total{environment="development"}[10m]) > 5
          for: 0m
          labels:
            severity: warning
            environment: development
            service: zk-circuits
          annotations:
            summary: "High ZK circuit compilation failures in development"
            description: "{{ $value }} circuit compilation failures in the last 10 minutes"

        # Development Database Alerts
        - alert: PostgreSQLDown
          expr: up{job="postgres-exporter", environment="development"} == 0
          for: 2m
          labels:
            severity: critical
            environment: development
            service: postgresql
          annotations:
            summary: "PostgreSQL is down in development"
            description: "PostgreSQL database has been down for more than 2 minutes"

        - alert: PostgreSQLHighConnections
          expr: pg_stat_database_numbackends{environment="development"} > 15
          for: 5m
          labels:
            severity: warning
            environment: development
            service: postgresql
          annotations:
            summary: "High PostgreSQL connections in development"
            description: "PostgreSQL has {{ $value }} active connections (>75% of max 20)"

        # Development Redis Alerts
        - alert: RedisDown
          expr: up{job="redis-exporter", environment="development"} == 0
          for: 2m
          labels:
            severity: warning
            environment: development
            service: redis
          annotations:
            summary: "Redis is down in development"
            description: "Redis cache has been down for more than 2 minutes"

        - alert: RedisHighMemoryUsage
          expr: redis_memory_used_bytes{environment="development"} / redis_memory_max_bytes{environment="development"} > 0.8
          for: 5m
          labels:
            severity: warning
            environment: development
            service: redis
          annotations:
            summary: "High Redis memory usage in development"
            description: "Redis memory usage is {{ $value | humanizePercentage }}"

# ==============================================================================
# Veridis Development Monitoring Summary and Enterprise Architecture
# ==============================================================================
#
# COMPREHENSIVE VERIDIS DEVELOPMENT MONITORING STRATEGY:
# ======================================================
#
# VERIDIS DEVELOPMENT MONITORING ARCHITECTURE OVERVIEW:
# -----------------------------------------------------
# 1. Comprehensive Development Monitoring Configuration:
#    - Comprehensive enterprise-grade development monitoring with intelligent monitoring management and advanced developer-focused optimization
#    - Advanced monitoring configuration with comprehensive developer productivity, debugging support, observability efficiency, and comprehensive operational excellence
#    - Multi-tier monitoring architecture with detailed metrics, enhanced logging, comprehensive tracing, and comprehensive monitoring intelligence
#    - Enterprise monitoring policies with developer-friendly enforcement, productivity controls, debugging automation, and comprehensive monitoring procedures
#    - Performance optimization with intelligent monitoring allocation, developer efficiency, debugging acceleration, and productivity for maximum development performance
#
# 2. Advanced Service-Specific Monitoring:
#    - Service-optimized monitoring with backend metrics, ZK circuit monitoring, database observability, and comprehensive service coordination
#    - Advanced service configuration with monitoring tuning, debugging optimization, performance management, and comprehensive service intelligence
#    - Flexible service optimization with workload-specific monitoring, debugging efficiency, and comprehensive service intelligence
#    - Service intelligence with monitoring procedures, debugging support, service automation, and comprehensive service coordination
#    - Monitoring excellence with service optimization, monitoring workflows, service automation, and comprehensive service environment management
#
# 3. Developer Productivity Monitoring Enhancement:
#    - Developer-focused monitoring allocation with productivity optimization, enhanced debugging, development efficiency, and comprehensive productivity coordination
#    - Advanced productivity configuration with monitoring tools, debugging features, observability frameworks, and comprehensive productivity intelligence
#    - Flexible monitoring optimization with developer workflow, productivity enhancement, and comprehensive productivity intelligence
#    - Productivity intelligence with monitoring procedures, debugging support, productivity automation, and comprehensive productivity coordination
#    - Development excellence with monitoring optimization, productivity workflows, debugging automation, and comprehensive productivity environment management
#
# ENTERPRISE DEVELOPMENT MONITORING FEATURES:
# ===========================================
# Advanced Monitoring Management and Developer Productivity:
#   - Multi-tier monitoring architecture with developer optimization, debugging monitoring, observability tracking, and comprehensive monitoring configurations
#   - Intelligent monitoring management with developer optimization, debugging-focused allocation, productivity enhancement, and comprehensive monitoring decisions
#   - Monitoring discovery with developer optimization, debugging management, monitoring policies, and comprehensive monitoring analytics
#   - Performance management with developer productivity, debugging efficiency, monitoring optimization, and comprehensive performance intelligence
#   - Monitoring processing tuning with debugging management, productivity optimization, performance algorithms, and intelligent monitoring optimization
#
# This Development Monitoring configuration provides enterprise-grade developer productivity enhancement with comprehensive debugging support, intelligent monitoring optimization, advanced observability features, and operational excellence while maintaining appropriate performance, efficiency validation, and comprehensive monitoring for the Veridis decentralized identity protocol development ecosystem!
#
# ==============================================================================
