# ==============================================================================
# Veridis Decentralized Identity Protocol - Development Debugging Patch
# ==============================================================================
#
# This Development Debugging Patch provides comprehensive development-optimized
# debugging configuration for the Veridis Decentralized Identity Protocol, providing:
#
# ENTERPRISE VERIDIS DEVELOPMENT DEBUGGING ARCHITECTURE:
#   • Advanced Development Debugging with intelligent debugging management and comprehensive development-based optimization
#   • Multi-tier Development Debugging architecture with developer productivity, debugging efficiency, error tracking, and validation environments
#   • Comprehensive development debugging framework with Debugging policies, developer tooling integration, error analysis automation
#   • Advanced lifecycle management with automated Debugging optimization, developer control, and development enhancement
#   • Enterprise-grade development intelligence with comprehensive analytics and Development Debugging performance insights
#
# VERIDIS DEVELOPMENT DEBUGGING OPTIMIZATION:
#   • High-performance Development with intelligent debugging management and developer-optimized debugging allocation
#   • Intelligent Development debugging management with responsive policies and development-based debugging decisions
#   • Advanced Development management with business intelligence and debugging-based developer control
#   • Comprehensive development debugging control with intelligent Developer Debugging management and debugging enhancement
#   • Enterprise acceleration with predictive Developer Debugging management and development debugging optimization
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II Development Debugging controls with comprehensive audit and development requirements
#   • GDPR Development Debugging compliance with data protection, privacy controls, and development management
#   • ISO 27001 Development Debugging management with comprehensive framework integration
#   • NIST 800-190 container Development Debugging security with development-specific validation and compliance
#   • Zero-knowledge protocol compliance with regulatory frameworks and Development Debugging best practices
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent Development Debugging lifecycle management with automated provisioning and development optimization
#   • Predictive development analytics with capacity planning and Development Debugging intelligence
#   • Advanced Debugging integration with Developer development analytics and performance business intelligence
#   • Comprehensive development debugging control with Development Debugging preservation and debugging optimization
#   • Business continuity Development Debugging with development guarantees and performance optimization
#
# DEVELOPMENT DEBUGGING ACCELERATION INTELLIGENCE:
#   • Development Debugging usage analytics with development patterns and optimization recommendations
#   • Debugging monitoring with Developer development latency and management optimization intelligence
#   • Development efficiency with Development Debugging analytics and deployment optimization procedures
#   • Cost optimization with Development Debugging utilization analysis and development capacity planning procedures
#   • Quality assurance with Development Debugging metrics and development validation procedures
#
# ==============================================================================

# ==============================================================================
# Veridis Backend Development Debugging Patch
# ==============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: veridis-backend
  namespace: veridis-dev

  # Development debugging optimization labels
  labels:
    debugging.veridis.xyz/debugging-level: development
    debugging.veridis.xyz/debugging-tier: comprehensive
    debugging.veridis.xyz/error-tracking: advanced
    debugging.veridis.xyz/debugging-profile: developer-enhanced
    debugging.veridis.xyz/tracing-support: comprehensive

    # Development debugging management labels
    development.veridis.xyz/debugging-optimization: developer-focused
    development.veridis.xyz/error-tracking: comprehensive
    development.veridis.xyz/stack-tracing: enabled
    development.veridis.xyz/breakpoint-debugging: enabled
    development.veridis.xyz/live-debugging: comprehensive

    # Debugging development labels
    debug.veridis.xyz/debugging-level: development
    debug.veridis.xyz/verbose-logging: enabled
    debug.veridis.xyz/error-details: comprehensive
    debug.veridis.xyz/performance-debugging: enabled
    debug.veridis.xyz/memory-debugging: enabled

  annotations:
    # Development debugging optimization annotations
    debugging.veridis.xyz/debugging-strategy: "developer-productivity-first"
    debugging.veridis.xyz/error-tracking: "comprehensive-analysis"
    debugging.veridis.xyz/stack-tracing: "full-stack-traces"
    debugging.veridis.xyz/breakpoint-support: "live-debugging"
    debugging.veridis.xyz/performance-debugging: "detailed-profiling"

    # Development debugging management annotations
    debug.veridis.xyz/debugging-level: "comprehensive"
    debug.veridis.xyz/error-capabilities: "advanced"
    debug.veridis.xyz/tracing-tools: "enabled"
    debug.veridis.xyz/profiling-framework: "integrated"
    debug.veridis.xyz/memory-analysis: "comprehensive"

    # Developer productivity annotations
    productivity.veridis.xyz/debugging-balance: "visibility-optimized"
    productivity.veridis.xyz/error-visibility: "comprehensive"
    productivity.veridis.xyz/debugging-workflow: "streamlined"
    productivity.veridis.xyz/debugging-overhead: "acceptable"
    productivity.veridis.xyz/developer-experience: "exceptional"

spec:
  template:
    spec:
      containers:
        - name: veridis-backend
          # ==============================================================================
          # Development Debugging Environment Variables
          # ==============================================================================
          env:
            # Development debugging configuration
            - name: DEBUG_MODE
              value: "true"
            - name: DEBUGGING_ENABLED
              value: "true"
            - name: DEVELOPER_DEBUG_MODE
              value: "true"
            - name: COMPREHENSIVE_DEBUGGING
              value: "true"
            - name: DEBUG_PROFILE
              value: "comprehensive"

            # Development Rust debugging configuration
            - name: RUST_LOG
              value: "debug,sqlx=debug,tower_http=debug,axum=debug,hyper=debug,reqwest=debug"
            - name: RUST_BACKTRACE
              value: "full"
            - name: RUST_LIB_BACKTRACE
              value: "1"
            - name: COLORBT_SHOW_HIDDEN
              value: "1"
            - name: RUST_SPANTRACE
              value: "1"

            # Development error tracking configuration
            - name: ERROR_TRACKING_ENABLED
              value: "true"
            - name: ERROR_STACK_TRACES
              value: "full"
            - name: ERROR_CONTEXT_CAPTURE
              value: "comprehensive"
            - name: ERROR_AGGREGATION_ENABLED
              value: "true"
            - name: ERROR_REPORTING_LEVEL
              value: "all"
            - name: PANIC_HOOK_ENABLED
              value: "true"
            - name: CUSTOM_PANIC_HANDLER
              value: "true"

            # Development structured logging for debugging
            - name: LOG_LEVEL
              value: "debug"
            - name: LOG_FORMAT
              value: "pretty"
            - name: LOG_TIMESTAMP
              value: "true"
            - name: LOG_THREAD_ID
              value: "true"
            - name: LOG_THREAD_NAME
              value: "true"
            - name: LOG_MODULE_PATH
              value: "true"
            - name: LOG_FILE_LINE
              value: "true"
            - name: LOG_TARGET
              value: "true"
            - name: LOG_SPAN_EVENTS
              value: "true"
            - name: LOG_SPAN_CLOSE
              value: "true"

            # Development tracing for debugging
            - name: TRACING_ENABLED
              value: "true"
            - name: TRACING_LEVEL
              value: "trace"
            - name: TRACING_PRETTY_PRINT
              value: "true"
            - name: TRACING_JSON_ENABLED
              value: "false"
            - name: TRACING_ANSI_ENABLED
              value: "true"
            - name: TRACING_THREAD_IDS
              value: "true"
            - name: TRACING_THREAD_NAMES
              value: "true"
            - name: TRACING_FILE_LINE_NUMBERS
              value: "true"
            - name: TRACING_MODULE_PATHS
              value: "true"
            - name: TRACING_TARGETS
              value: "true"

            # Development debugging tools integration
            - name: DEBUGGER_ENABLED
              value: "true"
            - name: DEBUGGER_PORT
              value: "5005"
            - name: REMOTE_DEBUGGING_ENABLED
              value: "true"
            - name: BREAKPOINT_DEBUGGING
              value: "true"
            - name: STEP_DEBUGGING
              value: "true"
            - name: VARIABLE_INSPECTION
              value: "true"
            - name: CALL_STACK_INSPECTION
              value: "true"
            - name: HEAP_INSPECTION
              value: "true"

            # Development performance debugging
            - name: PERFORMANCE_DEBUGGING_ENABLED
              value: "true"
            - name: CPU_PROFILING_ENABLED
              value: "true"
            - name: MEMORY_PROFILING_ENABLED
              value: "true"
            - name: ALLOCATION_PROFILING
              value: "true"
            - name: LOCK_PROFILING
              value: "true"
            - name: IO_PROFILING
              value: "true"
            - name: ASYNC_PROFILING
              value: "true"
            - name: TOKIO_CONSOLE_ENABLED
              value: "true"
            - name: TOKIO_CONSOLE_PORT
              value: "6669"

            # Development database debugging
            - name: SQL_LOGGING_ENABLED
              value: "true"
            - name: SQL_QUERY_LOGGING
              value: "true"
            - name: SQL_SLOW_QUERY_LOGGING
              value: "true"
            - name: SQL_SLOW_QUERY_THRESHOLD
              value: "100ms"
            - name: SQL_PARAMETER_LOGGING
              value: "true"
            - name: SQL_RESULT_LOGGING
              value: "true"
            - name: DATABASE_CONNECTION_DEBUGGING
              value: "true"
            - name: DATABASE_POOL_DEBUGGING
              value: "true"
            - name: DATABASE_TRANSACTION_DEBUGGING
              value: "true"

            # Development HTTP debugging
            - name: HTTP_REQUEST_LOGGING
              value: "true"
            - name: HTTP_RESPONSE_LOGGING
              value: "true"
            - name: HTTP_HEADER_LOGGING
              value: "true"
            - name: HTTP_BODY_LOGGING
              value: "true"
            - name: HTTP_TIMING_LOGGING
              value: "true"
            - name: HTTP_ERROR_LOGGING
              value: "true"
            - name: MIDDLEWARE_DEBUGGING
              value: "true"
            - name: ROUTE_DEBUGGING
              value: "true"

            # Development API debugging
            - name: API_REQUEST_VALIDATION_DEBUG
              value: "true"
            - name: API_RESPONSE_VALIDATION_DEBUG
              value: "true"
            - name: API_SCHEMA_VALIDATION_DEBUG
              value: "true"
            - name: API_PARAMETER_DEBUG
              value: "true"
            - name: API_AUTHENTICATION_DEBUG
              value: "true"
            - name: API_AUTHORIZATION_DEBUG
              value: "true"
            - name: API_RATE_LIMITING_DEBUG
              value: "true"

            # Development ZK debugging integration
            - name: ZK_CIRCUIT_DEBUGGING
              value: "true"
            - name: ZK_PROOF_DEBUGGING
              value: "true"
            - name: ZK_VERIFICATION_DEBUGGING
              value: "true"
            - name: ZK_PERFORMANCE_DEBUGGING
              value: "true"
            - name: ZK_ERROR_DEBUGGING
              value: "true"
            - name: ZK_CONSTRAINT_DEBUGGING
              value: "true"
            - name: ZK_WITNESS_DEBUGGING
              value: "true"

            # Development blockchain debugging
            - name: BLOCKCHAIN_TRANSACTION_DEBUG
              value: "true"
            - name: BLOCKCHAIN_EVENT_DEBUG
              value: "true"
            - name: BLOCKCHAIN_STATE_DEBUG
              value: "true"
            - name: BLOCKCHAIN_RPC_DEBUG
              value: "true"
            - name: BLOCKCHAIN_WEBSOCKET_DEBUG
              value: "true"
            - name: BRIDGE_DEBUGGING
              value: "true"
            - name: BRIDGE_STATE_DEBUG
              value: "true"

            # Development memory debugging
            - name: MEMORY_DEBUGGING_ENABLED
              value: "true"
            - name: MEMORY_LEAK_DETECTION
              value: "true"
            - name: MEMORY_ALLOCATION_TRACKING
              value: "true"
            - name: MEMORY_USAGE_MONITORING
              value: "true"
            - name: HEAP_PROFILING_ENABLED
              value: "true"
            - name: STACK_PROFILING_ENABLED
              value: "true"
            - name: JEMALLOC_PROFILING
              value: "true"

            # Development async debugging
            - name: ASYNC_DEBUGGING_ENABLED
              value: "true"
            - name: TOKIO_DEBUGGING
              value: "true"
            - name: FUTURE_DEBUGGING
              value: "true"
            - name: TASK_DEBUGGING
              value: "true"
            - name: ASYNC_STACK_TRACES
              value: "true"
            - name: DEADLOCK_DETECTION
              value: "true"
            - name: ASYNC_PERFORMANCE_MONITORING
              value: "true"

            # Development error handling debugging
            - name: ERROR_HANDLER_DEBUG
              value: "true"
            - name: PANIC_HANDLER_DEBUG
              value: "true"
            - name: CUSTOM_ERROR_DEBUG
              value: "true"
            - name: ERROR_PROPAGATION_DEBUG
              value: "true"
            - name: ERROR_RECOVERY_DEBUG
              value: "true"
            - name: ERROR_CORRELATION_DEBUG
              value: "true"

            # Development debugging output configuration
            - name: DEBUG_OUTPUT_FILE
              value: "/app/debug/debug.log"
            - name: DEBUG_OUTPUT_CONSOLE
              value: "true"
            - name: DEBUG_OUTPUT_JSON
              value: "false"
            - name: DEBUG_OUTPUT_PRETTY
              value: "true"
            - name: DEBUG_OUTPUT_STRUCTURED
              value: "true"
            - name: DEBUG_CORRELATION_ID
              value: "true"

            # Development debugging tools configuration
            - name: DEBUG_TOOLS_ENABLED
              value: "true"
            - name: DEBUG_DASHBOARD_ENABLED
              value: "true"
            - name: DEBUG_DASHBOARD_PORT
              value: "8092"
            - name: DEBUG_API_ENABLED
              value: "true"
            - name: DEBUG_API_PORT
              value: "8093"
            - name: DEBUG_METRICS_ENABLED
              value: "true"
            - name: DEBUG_HEALTHCHECK_ENABLED
              value: "true"

            # Development security debugging (safe for development)
            - name: AUTH_DEBUGGING_ENABLED
              value: "true"
            - name: JWT_DEBUGGING_ENABLED
              value: "true"
            - name: CRYPTO_DEBUGGING_ENABLED
              value: "true"
            - name: TLS_DEBUGGING_ENABLED
              value: "true"
            - name: SECURITY_EVENT_LOGGING
              value: "true"
            - name: ACCESS_CONTROL_DEBUGGING
              value: "true"

            # Development compliance debugging
            - name: COMPLIANCE_DEBUGGING_ENABLED
              value: "true"
            - name: AUDIT_DEBUGGING_ENABLED
              value: "true"
            - name: GDPR_DEBUGGING_ENABLED
              value: "true"
            - name: DATA_PROTECTION_DEBUG
              value: "true"
            - name: PRIVACY_DEBUGGING_ENABLED
              value: "true"

            # Development testing debugging
            - name: TEST_DEBUGGING_ENABLED
              value: "true"
            - name: UNIT_TEST_DEBUG
              value: "true"
            - name: INTEGRATION_TEST_DEBUG
              value: "true"
            - name: E2E_TEST_DEBUG
              value: "true"
            - name: MOCK_DEBUGGING_ENABLED
              value: "true"
            - name: FIXTURE_DEBUGGING_ENABLED
              value: "true"

          # ==============================================================================
          # Development Debugging Volume Mounts
          # ==============================================================================
          volumeMounts:
            # Debug output volume
            - name: debug-output
              mountPath: /app/debug
              readOnly: false

            # Debug tools volume
            - name: debug-tools
              mountPath: /app/debug-tools
              readOnly: false

            # Debug configuration volume
            - name: debug-config
              mountPath: /app/debug-config
              readOnly: true

            # Debug logs volume
            - name: debug-logs
              mountPath: /app/logs/debug
              readOnly: false

            # Debug traces volume
            - name: debug-traces
              mountPath: /app/traces
              readOnly: false

            # Debug profiles volume
            - name: debug-profiles
              mountPath: /app/profiles
              readOnly: false

            # Debug dumps volume
            - name: debug-dumps
              mountPath: /app/dumps
              readOnly: false

            # Debug core dumps volume (if enabled)
            - name: debug-core-dumps
              mountPath: /app/core-dumps
              readOnly: false

          # ==============================================================================
          # Development Debugging Ports
          # ==============================================================================
          ports:
            # Main application port
            - name: http
              containerPort: 8080
              protocol: TCP

            # Debug server port
            - name: debug-server
              containerPort: 5005
              protocol: TCP

            # Tokio console port
            - name: tokio-console
              containerPort: 6669
              protocol: TCP

            # Debug dashboard port
            - name: debug-dash
              containerPort: 8092
              protocol: TCP

            # Debug API port
            - name: debug-api
              containerPort: 8093
              protocol: TCP

            # Profiling port
            - name: profiling
              containerPort: 6060
              protocol: TCP

          # ==============================================================================
          # Development Debugging Resources
          # ==============================================================================
          resources:
            requests:
              cpu: "200m"              # Increased for debugging overhead
              memory: "1Gi"            # Increased for debug data
            limits:
              cpu: "2000m"             # Increased for debugging workloads
              memory: "4Gi"            # Increased for debug memory usage

          # ==============================================================================
          # Development Debugging Health Checks
          # ==============================================================================
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
            initialDelaySeconds: 60    # Increased for debugging overhead
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 5        # More lenient for debugging

          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 5        # More lenient for debugging

          startupProbe:
            httpGet:
              path: /health/startup
              port: http
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 20       # Very lenient for debugging startup

        # ==============================================================================
        # Development Debugging Sidecar Container
        # ==============================================================================
        - name: debug-sidecar
          image: veridis/debug-tools:v3.2.1-dev

          # ==============================================================================
          # Debug Sidecar Environment Variables
          # ==============================================================================
          env:
            # Debug sidecar configuration
            - name: SIDECAR_MODE
              value: "debugging"
            - name: MAIN_SERVICE_HOST
              value: "localhost"
            - name: MAIN_SERVICE_PORT
              value: "8080"
            - name: DEBUG_SIDECAR_ENABLED
              value: "true"

            # Debug log collection
            - name: LOG_COLLECTION_ENABLED
              value: "true"
            - name: LOG_AGGREGATION_ENABLED
              value: "true"
            - name: LOG_ANALYSIS_ENABLED
              value: "true"
            - name: LOG_PARSING_ENABLED
              value: "true"
            - name: LOG_CORRELATION_ENABLED
              value: "true"

            # Debug trace collection
            - name: TRACE_COLLECTION_ENABLED
              value: "true"
            - name: TRACE_AGGREGATION_ENABLED
              value: "true"
            - name: TRACE_ANALYSIS_ENABLED
              value: "true"
            - name: TRACE_VISUALIZATION_ENABLED
              value: "true"
            - name: TRACE_CORRELATION_ENABLED
              value: "true"

            # Debug metrics collection
            - name: DEBUG_METRICS_COLLECTION
              value: "true"
            - name: PERFORMANCE_METRICS_ENABLED
              value: "true"
            - name: ERROR_METRICS_ENABLED
              value: "true"
            - name: CUSTOM_METRICS_ENABLED
              value: "true"
            - name: BUSINESS_METRICS_DEBUG
              value: "true"

            # Debug profile collection
            - name: PROFILE_COLLECTION_ENABLED
              value: "true"
            - name: CPU_PROFILE_COLLECTION
              value: "true"
            - name: MEMORY_PROFILE_COLLECTION
              value: "true"
            - name: HEAP_PROFILE_COLLECTION
              value: "true"
            - name: ASYNC_PROFILE_COLLECTION
              value: "true"

            # Debug dump management
            - name: DUMP_MANAGEMENT_ENABLED
              value: "true"
            - name: CORE_DUMP_COLLECTION
              value: "true"
            - name: HEAP_DUMP_COLLECTION
              value: "true"
            - name: THREAD_DUMP_COLLECTION
              value: "true"
            - name: STACK_DUMP_COLLECTION
              value: "true"

            # Debug analysis tools
            - name: ANALYSIS_TOOLS_ENABLED
              value: "true"
            - name: ERROR_ANALYSIS_ENABLED
              value: "true"
            - name: PERFORMANCE_ANALYSIS_ENABLED
              value: "true"
            - name: MEMORY_ANALYSIS_ENABLED
              value: "true"
            - name: DEADLOCK_ANALYSIS_ENABLED
              value: "true"

            # Debug notification system
            - name: DEBUG_NOTIFICATIONS_ENABLED
              value: "true"
            - name: ERROR_NOTIFICATIONS
              value: "true"
            - name: PERFORMANCE_NOTIFICATIONS
              value: "true"
            - name: ANOMALY_NOTIFICATIONS
              value: "true"
            - name: WEBHOOK_NOTIFICATIONS
              value: "true"

            # Debug visualization
            - name: DEBUG_VISUALIZATION_ENABLED
              value: "true"
            - name: FLAMEGRAPH_GENERATION
              value: "true"
            - name: CALL_GRAPH_GENERATION
              value: "true"
            - name: MEMORY_GRAPH_GENERATION
              value: "true"
            - name: TRACE_GRAPH_GENERATION
              value: "true"

          # ==============================================================================
          # Debug Sidecar Volume Mounts
          # ==============================================================================
          volumeMounts:
            # Shared debug output volume
            - name: debug-output
              mountPath: /shared/debug
              readOnly: false

            # Shared debug logs volume
            - name: debug-logs
              mountPath: /shared/logs
              readOnly: false

            # Shared debug traces volume
            - name: debug-traces
              mountPath: /shared/traces
              readOnly: false

            # Shared debug profiles volume
            - name: debug-profiles
              mountPath: /shared/profiles
              readOnly: false

            # Shared debug dumps volume
            - name: debug-dumps
              mountPath: /shared/dumps
              readOnly: false

            # Debug sidecar configuration
            - name: debug-sidecar-config
              mountPath: /config
              readOnly: true

            # Debug sidecar data
            - name: debug-sidecar-data
              mountPath: /data
              readOnly: false

          # ==============================================================================
          # Debug Sidecar Ports
          # ==============================================================================
          ports:
            # Debug sidecar API
            - name: debug-api
              containerPort: 9000
              protocol: TCP

            # Debug visualization
            - name: debug-viz
              containerPort: 9001
              protocol: TCP

            # Debug analysis
            - name: debug-analysis
              containerPort: 9002
              protocol: TCP

            # Debug notifications
            - name: debug-notify
              containerPort: 9003
              protocol: TCP

          # ==============================================================================
          # Debug Sidecar Resources
          # ==============================================================================
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"

          # ==============================================================================
          # Debug Sidecar Health Checks
          # ==============================================================================
          livenessProbe:
            httpGet:
              path: /health
              port: debug-api
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /ready
              port: debug-api
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3

      # ==============================================================================
      # Development Debugging Volumes
      # ==============================================================================
      volumes:
        # Debug output volume
        - name: debug-output
          emptyDir:
            sizeLimit: "2Gi"
            medium: ""

        # Debug tools volume
        - name: debug-tools
          emptyDir:
            sizeLimit: "1Gi"
            medium: ""

        # Debug configuration volume
        - name: debug-config
          configMap:
            name: veridis-development-debug-config
            defaultMode: 0644

        # Debug logs volume
        - name: debug-logs
          emptyDir:
            sizeLimit: "5Gi"
            medium: ""

        # Debug traces volume
        - name: debug-traces
          emptyDir:
            sizeLimit: "3Gi"
            medium: ""

        # Debug profiles volume
        - name: debug-profiles
          emptyDir:
            sizeLimit: "2Gi"
            medium: ""

        # Debug dumps volume
        - name: debug-dumps
          emptyDir:
            sizeLimit: "10Gi"
            medium: ""

        # Debug core dumps volume
        - name: debug-core-dumps
          emptyDir:
            sizeLimit: "20Gi"
            medium: ""

        # Debug sidecar configuration
        - name: debug-sidecar-config
          configMap:
            name: veridis-development-debug-sidecar-config
            defaultMode: 0644

        # Debug sidecar data
        - name: debug-sidecar-data
          emptyDir:
            sizeLimit: "1Gi"
            medium: ""

---
# ==============================================================================
# ZK Circuits Development Debugging Patch
# ==============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zk-circuits
  namespace: veridis-dev

  # Development ZK debugging optimization labels
  labels:
    debugging.veridis.xyz/debugging-level: development
    debugging.veridis.xyz/debugging-tier: development-zk
    debugging.veridis.xyz/zk-debugging: comprehensive
    debugging.veridis.xyz/circuit-debugging: detailed
    debugging.veridis.xyz/proof-debugging: comprehensive

    # Development ZK debugging management labels
    development.veridis.xyz/zk-debugging: developer-focused
    development.veridis.xyz/circuit-analysis: enabled
    development.veridis.xyz/proof-analysis: enabled
    development.veridis.xyz/constraint-debugging: enabled
    development.veridis.xyz/witness-debugging: comprehensive

    # ZK development debugging labels
    zk.veridis.xyz/debugging-level: development
    zk.veridis.xyz/circuit-tracing: enabled
    zk.veridis.xyz/proof-tracing: enabled
    zk.veridis.xyz/performance-debugging: enabled
    zk.veridis.xyz/error-analysis: comprehensive

spec:
  template:
    spec:
      containers:
        - name: zk-circuits
          # ==============================================================================
          # Development ZK Debugging Environment Variables
          # ==============================================================================
          env:
            # Development ZK debugging configuration
            - name: ZK_DEBUG_MODE
              value: "true"
            - name: ZK_DEBUGGING_ENABLED
              value: "true"
            - name: ZK_COMPREHENSIVE_DEBUG
              value: "true"
            - name: ZK_DEVELOPER_MODE
              value: "true"

            # Development Node.js debugging
            - name: NODE_ENV
              value: "development"
            - name: DEBUG
              value: "*"
            - name: NODE_OPTIONS
              value: "--inspect=0.0.0.0:9229 --max-old-space-size=4096 --trace-warnings --trace-deprecation --trace-sync-io"
            - name: UV_THREADPOOL_SIZE
              value: "16"

            # Development ZK circuit debugging
            - name: CIRCUIT_DEBUG_ENABLED
              value: "true"
            - name: CIRCUIT_TRACE_ENABLED
              value: "true"
            - name: CIRCUIT_ANALYSIS_ENABLED
              value: "true"
            - name: CIRCUIT_VALIDATION_DEBUG
              value: "true"
            - name: CIRCUIT_COMPILATION_DEBUG
              value: "true"
            - name: CIRCUIT_OPTIMIZATION_DEBUG
              value: "true"
            - name: CIRCUIT_CONSTRAINT_DEBUG
              value: "true"
            - name: CIRCUIT_WITNESS_DEBUG
              value: "true"

            # Development ZK proof debugging
            - name: PROOF_DEBUG_ENABLED
              value: "true"
            - name: PROOF_GENERATION_DEBUG
              value: "true"
            - name: PROOF_VERIFICATION_DEBUG
              value: "true"
            - name: PROOF_VALIDATION_DEBUG
              value: "true"
            - name: PROOF_SERIALIZATION_DEBUG
              value: "true"
            - name: PROOF_PERFORMANCE_DEBUG
              value: "true"
            - name: PROOF_ERROR_DEBUG
              value: "true"

            # Development Garaga debugging
            - name: GARAGA_DEBUG_ENABLED
              value: "true"
            - name: GARAGA_VERBOSE_LOGGING
              value: "true"
            - name: GARAGA_PERFORMANCE_DEBUG
              value: "true"
            - name: GARAGA_MEMORY_DEBUG
              value: "true"
            - name: GARAGA_ERROR_DEBUG
              value: "true"
            - name: GARAGA_TRACE_ENABLED
              value: "true"

            # Development constraint debugging
            - name: CONSTRAINT_DEBUG_ENABLED
              value: "true"
            - name: CONSTRAINT_ANALYSIS_ENABLED
              value: "true"
            - name: CONSTRAINT_VALIDATION_DEBUG
              value: "true"
            - name: CONSTRAINT_OPTIMIZATION_DEBUG
              value: "true"
            - name: CONSTRAINT_SYSTEM_DEBUG
              value: "true"
            - name: CONSTRAINT_SOLVING_DEBUG
              value: "true"

            # Development witness debugging
            - name: WITNESS_DEBUG_ENABLED
              value: "true"
            - name: WITNESS_GENERATION_DEBUG
              value: "true"
            - name: WITNESS_VALIDATION_DEBUG
              value: "true"
            - name: WITNESS_SERIALIZATION_DEBUG
              value: "true"
            - name: WITNESS_PERFORMANCE_DEBUG
              value: "true"
            - name: WITNESS_ERROR_DEBUG
              value: "true"

            # Development performance debugging
            - name: ZK_PERFORMANCE_DEBUG
              value: "true"
            - name: ZK_TIMING_DEBUG
              value: "true"
            - name: ZK_MEMORY_DEBUG
              value: "true"
            - name: ZK_CPU_DEBUG
              value: "true"
            - name: ZK_OPTIMIZATION_DEBUG
              value: "true"
            - name: ZK_BOTTLENECK_DEBUG
              value: "true"

            # Development error debugging
            - name: ZK_ERROR_DEBUG
              value: "true"
            - name: ZK_EXCEPTION_DEBUG
              value: "true"
            - name: ZK_STACK_TRACE_DEBUG
              value: "true"
            - name: ZK_ERROR_RECOVERY_DEBUG
              value: "true"
            - name: ZK_ERROR_REPORTING_DEBUG
              value: "true"

            # Development debugging output
            - name: ZK_DEBUG_OUTPUT_FILE
              value: "/app/debug/zk-debug.log"
            - name: ZK_DEBUG_OUTPUT_CONSOLE
              value: "true"
            - name: ZK_DEBUG_OUTPUT_STRUCTURED
              value: "true"
            - name: ZK_DEBUG_CORRELATION_ID
              value: "true"

            # Development debugging tools
            - name: ZK_DEBUG_TOOLS_ENABLED
              value: "true"
            - name: ZK_DEBUG_DASHBOARD_ENABLED
              value: "true"
            - name: ZK_DEBUG_DASHBOARD_PORT
              value: "4002"
            - name: ZK_DEBUG_API_ENABLED
              value: "true"
            - name: ZK_DEBUG_API_PORT
              value: "4003"

            # Development testing debugging
            - name: ZK_TEST_DEBUG_ENABLED
              value: "true"
            - name: ZK_UNIT_TEST_DEBUG
              value: "true"
            - name: ZK_INTEGRATION_TEST_DEBUG
              value: "true"
            - name: ZK_MOCK_DEBUG_ENABLED
              value: "true"
            - name: ZK_FIXTURE_DEBUG_ENABLED
              value: "true"

          # ==============================================================================
          # Development ZK Debugging Volume Mounts
          # ==============================================================================
          volumeMounts:
            # ZK debug output volume
            - name: zk-debug-output
              mountPath: /app/debug
              readOnly: false

            # ZK debug logs volume
            - name: zk-debug-logs
              mountPath: /app/logs/debug
              readOnly: false

            # ZK debug profiles volume
            - name: zk-debug-profiles
              mountPath: /app/profiles
              readOnly: false

            # ZK debug traces volume
            - name: zk-debug-traces
              mountPath: /app/traces
              readOnly: false

            # ZK debug dumps volume
            - name: zk-debug-dumps
              mountPath: /app/dumps
              readOnly: false

            # ZK debug configuration volume
            - name: zk-debug-config
              mountPath: /app/debug-config
              readOnly: true

          # ==============================================================================
          # Development ZK Debugging Ports
          # ==============================================================================
          ports:
            # ZK circuits application port
            - name: zk-http
              containerPort: 4000
              protocol: TCP

            # Node.js inspector port
            - name: node-inspector
              containerPort: 9229
              protocol: TCP

            # ZK debug dashboard port
            - name: zk-debug-dash
              containerPort: 4002
              protocol: TCP

            # ZK debug API port
            - name: zk-debug-api
              containerPort: 4003
              protocol: TCP

          # ==============================================================================
          # Development ZK Debugging Resources
          # ==============================================================================
          resources:
            requests:
              cpu: "300m"              # Increased for debugging overhead
              memory: "2Gi"            # Increased for debug data
            limits:
              cpu: "2000m"             # Increased for debugging workloads
              memory: "6Gi"            # Increased for debug memory usage

          # ==============================================================================
          # Development ZK Health Checks
          # ==============================================================================
          livenessProbe:
            httpGet:
              path: /health/live
              port: zk-http
            initialDelaySeconds: 90    # Increased for ZK debugging overhead
            periodSeconds: 30
            timeoutSeconds: 15
            failureThreshold: 5        # More lenient for debugging

          readinessProbe:
            httpGet:
              path: /health/ready
              port: zk-http
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 10
            failureThreshold: 5        # More lenient for debugging

          startupProbe:
            httpGet:
              path: /health/startup
              port: zk-http
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 15
            failureThreshold: 30       # Very lenient for ZK debugging startup

      # ==============================================================================
      # Development ZK Debugging Volumes
      # ==============================================================================
      volumes:
        # ZK debug output volume
        - name: zk-debug-output
          emptyDir:
            sizeLimit: "3Gi"
            medium: ""

        # ZK debug logs volume
        - name: zk-debug-logs
          emptyDir:
            sizeLimit: "5Gi"
            medium: ""

        # ZK debug profiles volume
        - name: zk-debug-profiles
          emptyDir:
            sizeLimit: "3Gi"
            medium: ""

        # ZK debug traces volume
        - name: zk-debug-traces
          emptyDir:
            sizeLimit: "4Gi"
            medium: ""

        # ZK debug dumps volume
        - name: zk-debug-dumps
          emptyDir:
            sizeLimit: "15Gi"
            medium: ""

        # ZK debug configuration volume
        - name: zk-debug-config
          configMap:
            name: veridis-development-zk-debug-config
            defaultMode: 0644

---
# ==============================================================================
# Development Debug Configuration ConfigMap
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-development-debug-config
  namespace: veridis-dev

  labels:
    debugging.veridis.xyz/component: debug-config
    debugging.veridis.xyz/environment: development
    app.kubernetes.io/name: debug-config
    app.kubernetes.io/component: config
    app.kubernetes.io/part-of: veridis-protocol

data:
  # Rust debugging configuration
  debug-rust.toml: |
    # Rust debugging configuration for development
    [debug]
    enabled = true
    level = "trace"
    pretty_print = true
    ansi_colors = true
    thread_ids = true
    thread_names = true
    file_line_numbers = true
    module_paths = true
    targets = true

    [logging]
    level = "debug"
    format = "pretty"
    timestamp = true
    thread_id = true
    thread_name = true
    module_path = true
    file_line = true
    target = true
    span_events = true
    span_close = true

    [tracing]
    enabled = true
    level = "trace"
    pretty_print = true
    json_enabled = false
    ansi_enabled = true
    thread_ids = true
    thread_names = true
    file_line_numbers = true
    module_paths = true
    targets = true

    [error_handling]
    stack_traces = "full"
    context_capture = "comprehensive"
    aggregation_enabled = true
    reporting_level = "all"
    panic_hook_enabled = true
    custom_panic_handler = true

    [performance]
    cpu_profiling = true
    memory_profiling = true
    allocation_profiling = true
    lock_profiling = true
    io_profiling = true
    async_profiling = true
    tokio_console = true

    [database]
    sql_logging = true
    query_logging = true
    slow_query_logging = true
    slow_query_threshold = "100ms"
    parameter_logging = true
    result_logging = true
    connection_debugging = true
    pool_debugging = true
    transaction_debugging = true

    [http]
    request_logging = true
    response_logging = true
    header_logging = true
    body_logging = true
    timing_logging = true
    error_logging = true
    middleware_debugging = true
    route_debugging = true

    [api]
    request_validation_debug = true
    response_validation_debug = true
    schema_validation_debug = true
    parameter_debug = true
    authentication_debug = true
    authorization_debug = true
    rate_limiting_debug = true

  # Tokio console configuration
  tokio-console.toml: |
    # Tokio console configuration for async debugging
    [console]
    enabled = true
    port = 6669
    bind = "0.0.0.0"

    [retention]
    max_frames = 10000
    max_spans = 10000
    max_events = 10000

    [filtering]
    default_level = "trace"
    targets = [
        "tokio",
        "runtime",
        "task",
        "scheduler",
        "io",
        "net",
        "fs",
        "time",
        "sync"
    ]

    [display]
    show_thread_ids = true
    show_thread_names = true
    show_span_ids = true
    show_event_timestamps = true
    show_file_locations = true

  # Error tracking configuration
  error-tracking.json: |
    {
      "error_tracking": {
        "enabled": true,
        "stack_traces": "full",
        "context_capture": "comprehensive",
        "aggregation_enabled": true,
        "reporting_level": "all"
      },
      "panic_handling": {
        "hook_enabled": true,
        "custom_handler": true,
        "stack_trace": true,
        "context_capture": true,
        "abort_on_panic": false
      },
      "error_reporting": {
        "console_output": true,
        "file_output": true,
        "structured_output": true,
        "json_output": false,
        "pretty_output": true
      },
      "error_correlation": {
        "enabled": true,
        "correlation_id": true,
        "request_id": true,
        "span_id": true,
        "trace_id": true
      },
      "error_recovery": {
        "enabled": true,
        "retry_logic": true,
        "fallback_logic": true,
        "circuit_breaker": true,
        "graceful_degradation": true
      }
    }

  # Performance debugging configuration
  performance-debug.json: |
    {
      "cpu_profiling": {
        "enabled": true,
        "interval_seconds": 60,
        "duration_seconds": 30,
        "format": "flamegraph",
        "output_file": "/app/profiles/cpu-profile.svg"
      },
      "memory_profiling": {
        "enabled": true,
        "interval_seconds": 30,
        "track_allocations": true,
        "track_deallocations": true,
        "heap_profiling": true,
        "stack_profiling": true
      },
      "async_profiling": {
        "enabled": true,
        "tokio_console": true,
        "task_profiling": true,
        "future_profiling": true,
        "async_stack_traces": true,
        "deadlock_detection": true
      },
      "io_profiling": {
        "enabled": true,
        "file_operations": true,
        "network_operations": true,
        "database_operations": true,
        "timing_analysis": true
      },
      "lock_profiling": {
        "enabled": true,
        "mutex_profiling": true,
        "rwlock_profiling": true,
        "semaphore_profiling": true,
        "contention_analysis": true
      }
    }

  # Database debugging configuration
  database-debug.toml: |
    # Database debugging configuration
    [sql_logging]
    enabled = true
    level = "debug"
    query_logging = true
    parameter_logging = true
    result_logging = true
    timing_logging = true

    [slow_query]
    enabled = true
    threshold = "100ms"
    stack_trace = true
    explain_plan = true

    [connection_pool]
    debugging = true
    connection_events = true
    pool_statistics = true
    connection_lifecycle = true

    [transaction]
    debugging = true
    transaction_events = true
    rollback_analysis = true
    deadlock_detection = true

    [migration]
    debugging = true
    migration_events = true
    schema_validation = true
    rollback_testing = true

  # API debugging configuration
  api-debug.json: |
    {
      "request_debugging": {
        "enabled": true,
        "log_headers": true,
        "log_body": true,
        "log_parameters": true,
        "log_timing": true,
        "correlation_id": true
      },
      "response_debugging": {
        "enabled": true,
        "log_headers": true,
        "log_body": true,
        "log_status": true,
        "log_timing": true,
        "correlation_id": true
      },
      "validation_debugging": {
        "enabled": true,
        "schema_validation": true,
        "parameter_validation": true,
        "response_validation": true,
        "validation_errors": true
      },
      "authentication_debugging": {
        "enabled": true,
        "auth_events": true,
        "token_validation": true,
        "permission_checks": true,
        "auth_failures": true
      },
      "rate_limiting_debugging": {
        "enabled": true,
        "rate_limit_events": true,
        "quota_tracking": true,
        "throttling_events": true,
        "bypass_events": true
      }
    }

---
# ==============================================================================
# Development ZK Debug Configuration ConfigMap
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-development-zk-debug-config
  namespace: veridis-dev

  labels:
    debugging.veridis.xyz/component: zk-debug-config
    debugging.veridis.xyz/environment: development
    app.kubernetes.io/name: zk-debug-config
    app.kubernetes.io/component: config
    app.kubernetes.io/part-of: veridis-protocol

data:
  # ZK circuit debugging configuration
  circuit-debug.json: |
    {
      "circuit_debugging": {
        "enabled": true,
        "trace_enabled": true,
        "analysis_enabled": true,
        "validation_debug": true,
        "compilation_debug": true,
        "optimization_debug": true
      },
      "constraint_debugging": {
        "enabled": true,
        "constraint_analysis": true,
        "constraint_validation": true,
        "constraint_optimization": true,
        "constraint_system_debug": true,
        "constraint_solving_debug": true
      },
      "witness_debugging": {
        "enabled": true,
        "generation_debug": true,
        "validation_debug": true,
        "serialization_debug": true,
        "performance_debug": true,
        "error_debug": true
      },
      "performance_debugging": {
        "enabled": true,
        "timing_debug": true,
        "memory_debug": true,
        "cpu_debug": true,
        "optimization_debug": true,
        "bottleneck_debug": true
      }
    }

  # ZK proof debugging configuration
  proof-debug.json: |
    {
      "proof_debugging": {
        "enabled": true,
        "generation_debug": true,
        "verification_debug": true,
        "validation_debug": true,
        "serialization_debug": true,
        "performance_debug": true
      },
      "proof_generation": {
        "debug_enabled": true,
        "step_by_step": true,
        "intermediate_results": true,
        "timing_analysis": true,
        "memory_analysis": true
      },
      "proof_verification": {
        "debug_enabled": true,
        "verification_steps": true,
        "validation_checks": true,
        "error_analysis": true,
        "performance_analysis": true
      },
      "proof_serialization": {
        "debug_enabled": true,
        "serialization_steps": true,
        "format_validation": true,
        "size_analysis": true,
        "compression_analysis": true
      }
    }

  # Garaga debugging configuration
  garaga-debug.json: |
    {
      "garaga_debugging": {
        "enabled": true,
        "verbose_logging": true,
        "performance_debug": true,
        "memory_debug": true,
        "error_debug": true,
        "trace_enabled": true
      },
      "garaga_performance": {
        "cpu_profiling": true,
        "memory_profiling": true,
        "execution_timing": true,
        "bottleneck_analysis": true,
        "optimization_hints": true
      },
      "garaga_memory": {
        "allocation_tracking": true,
        "deallocation_tracking": true,
        "memory_usage_analysis": true,
        "memory_leak_detection": true,
        "garbage_collection_analysis": true
      },
      "garaga_error": {
        "error_tracking": true,
        "exception_handling": true,
        "stack_trace_analysis": true,
        "error_recovery": true,
        "error_reporting": true
      }
    }

  # Node.js debugging configuration
  nodejs-debug.json: |
    {
      "nodejs_debugging": {
        "enabled": true,
        "debug_mode": true,
        "inspector_enabled": true,
        "trace_warnings": true,
        "trace_deprecation": true,
        "trace_sync_io": true
      },
      "memory_debugging": {
        "max_old_space_size": 4096,
        "heap_profiling": true,
        "memory_leak_detection": true,
        "garbage_collection_tracing": true
      },
      "performance_debugging": {
        "cpu_profiling": true,
        "execution_timing": true,
        "event_loop_monitoring": true,
        "async_hooks": true
      },
      "error_debugging": {
        "unhandled_rejection_tracking": true,
        "uncaught_exception_tracking": true,
        "stack_trace_limit": 100,
        "error_reporting": true
      }
    }

---
# ==============================================================================
# Development Debug Sidecar Configuration ConfigMap
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-development-debug-sidecar-config
  namespace: veridis-dev

  labels:
    debugging.veridis.xyz/component: debug-sidecar-config
    debugging.veridis.xyz/environment: development
    app.kubernetes.io/name: debug-sidecar-config
    app.kubernetes.io/component: config
    app.kubernetes.io/part-of: veridis-protocol

data:
  # Debug sidecar configuration
  sidecar-config.json: |
    {
      "sidecar": {
        "mode": "debugging",
        "main_service_host": "localhost",
        "main_service_port": 8080,
        "enabled": true
      },
      "log_collection": {
        "enabled": true,
        "aggregation_enabled": true,
        "analysis_enabled": true,
        "parsing_enabled": true,
        "correlation_enabled": true,
        "retention_hours": 72
      },
      "trace_collection": {
        "enabled": true,
        "aggregation_enabled": true,
        "analysis_enabled": true,
        "visualization_enabled": true,
        "correlation_enabled": true,
        "sampling_rate": 1.0
      },
      "metrics_collection": {
        "enabled": true,
        "performance_metrics": true,
        "error_metrics": true,
        "custom_metrics": true,
        "business_metrics": true,
        "collection_interval": 15
      },
      "profile_collection": {
        "enabled": true,
        "cpu_profiling": true,
        "memory_profiling": true,
        "heap_profiling": true,
        "async_profiling": true,
        "collection_interval": 300
      },
      "dump_management": {
        "enabled": true,
        "core_dumps": true,
        "heap_dumps": true,
        "thread_dumps": true,
        "stack_dumps": true,
        "retention_hours": 168
      },
      "analysis_tools": {
        "enabled": true,
        "error_analysis": true,
        "performance_analysis": true,
        "memory_analysis": true,
        "deadlock_analysis": true,
        "anomaly_detection": true
      },
      "notifications": {
        "enabled": true,
        "error_notifications": true,
        "performance_notifications": true,
        "anomaly_notifications": true,
        "webhook_notifications": true,
        "slack_notifications": false
      },
      "visualization": {
        "enabled": true,
        "flamegraph_generation": true,
        "call_graph_generation": true,
        "memory_graph_generation": true,
        "trace_graph_generation": true,
        "dashboard_enabled": true
      }
    }

---
# ==============================================================================
# Development Debug Services
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: veridis-debug-service
  namespace: veridis-dev

  labels:
    debugging.veridis.xyz/component: debug-service
    debugging.veridis.xyz/environment: development
    app.kubernetes.io/name: debug-service
    app.kubernetes.io/component: service
    app.kubernetes.io/part-of: veridis-protocol

spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/component: backend

  ports:
    # Debug server port
    - name: debug-server
      port: 5005
      targetPort: debug-server
      protocol: TCP

    # Tokio console port
    - name: tokio-console
      port: 6669
      targetPort: tokio-console
      protocol: TCP

    # Debug dashboard port
    - name: debug-dash
      port: 8092
      targetPort: debug-dash
      protocol: TCP

    # Debug API port
    - name: debug-api
      port: 8093
      targetPort: debug-api
      protocol: TCP

    # Debug sidecar API port
    - name: sidecar-api
      port: 9000
      targetPort: debug-api
      protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: veridis-zk-debug-service
  namespace: veridis-dev

  labels:
    debugging.veridis.xyz/component: zk-debug-service
    debugging.veridis.xyz/environment: development
    app.kubernetes.io/name: zk-debug-service
    app.kubernetes.io/component: service
    app.kubernetes.io/part-of: veridis-protocol

spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/component: zk-circuits

  ports:
    # Node.js inspector port
    - name: node-inspector
      port: 9229
      targetPort: node-inspector
      protocol: TCP

    # ZK debug dashboard port
    - name: zk-debug-dash
      port: 4002
      targetPort: zk-debug-dash
      protocol: TCP

    # ZK debug API port
    - name: zk-debug-api
      port: 4003
      targetPort: zk-debug-api
      protocol: TCP

---
# ==============================================================================
# Development Debug Ingress (Optional)
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: veridis-debug-ingress
  namespace: veridis-dev

  labels:
    debugging.veridis.xyz/component: debug-ingress
    debugging.veridis.xyz/environment: development
    app.kubernetes.io/name: debug-ingress
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: veridis-protocol

  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    debugging.veridis.xyz/description: "Development debugging ingress for external access"

spec:
  ingressClassName: nginx

  rules:
    - host: debug.veridis.local
      http:
        paths:
          # Debug dashboard
          - path: /dashboard
            pathType: Prefix
            backend:
              service:
                name: veridis-debug-service
                port:
                  name: debug-dash

          # Debug API
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: veridis-debug-service
                port:
                  name: debug-api

          # ZK debug dashboard
          - path: /zk/dashboard
            pathType: Prefix
            backend:
              service:
                name: veridis-zk-debug-service
                port:
                  name: zk-debug-dash

          # ZK debug API
          - path: /zk/api
            pathType: Prefix
            backend:
              service:
                name: veridis-zk-debug-service
                port:
                  name: zk-debug-api

# ==============================================================================
# Veridis Development Debugging Summary and Enterprise Architecture
# ==============================================================================
#
# COMPREHENSIVE VERIDIS DEVELOPMENT DEBUGGING STRATEGY:
# =====================================================
#
# VERIDIS DEVELOPMENT DEBUGGING ARCHITECTURE OVERVIEW:
# ----------------------------------------------------
# 1. Comprehensive Development Debugging Integration:
#    - Comprehensive enterprise-grade development debugging with intelligent debugging management and advanced developer-focused optimization
#    - Advanced debugging configuration with comprehensive developer productivity, error tracking, stack tracing, and comprehensive operational excellence
#    - Multi-tier debugging architecture with live debugging, performance profiling, memory analysis, and comprehensive debugging intelligence
#    - Enterprise debugging policies with developer-friendly enforcement, productivity controls, debugging automation, and comprehensive debugging procedures
#    - Performance optimization with intelligent debugging allocation, developer efficiency, debugging acceleration, and productivity for maximum development performance
#
# 2. Advanced Error Tracking and Analysis:
#    - Developer-focused error tracking with comprehensive error analysis, stack tracing, debugging efficiency, and comprehensive productivity coordination
#    - Advanced error configuration with debugging tools, error features, analysis frameworks, and comprehensive error intelligence
#    - Flexible debugging optimization with developer workflow, productivity enhancement, and comprehensive debugging intelligence
#    - Error intelligence with debugging procedures, error support, debugging automation, and comprehensive error coordination
#    - Development excellence with error optimization, productivity workflows, debugging automation, and comprehensive debugging environment management
#
# 3. Live Debugging and Performance Profiling:
#    - Performance-optimized debugging with CPU profiling, memory analysis, async debugging, and comprehensive performance coordination
#    - Advanced profiling configuration with debugging tuning, performance optimization, profiling management, and comprehensive profiling intelligence
#    - Flexible performance optimization with debugging-specific profiling, performance efficiency, and comprehensive profiling intelligence
#    - Profiling intelligence with debugging procedures, performance support, profiling automation, and comprehensive profiling coordination
#    - Performance excellence with debugging optimization, profiling workflows, performance automation, and comprehensive debugging environment management
#
# ENTERPRISE DEVELOPMENT DEBUGGING FEATURES:
# ==========================================
# Advanced Debugging Management and Developer Productivity:
#   - Multi-tier debugging architecture with developer optimization, error tracking, performance profiling, and comprehensive debugging configurations
#   - Intelligent debugging management with developer optimization, debugging-focused allocation, productivity enhancement, and comprehensive debugging decisions
#   - Debugging discovery with developer optimization, error management, debugging policies, and comprehensive debugging analytics
#   - Performance management with developer productivity, debugging efficiency, profiling optimization, and comprehensive performance intelligence
#   - Debugging processing tuning with error management, productivity optimization, performance algorithms, and intelligent debugging optimization
#
# This Development Debugging configuration provides enterprise-grade developer productivity enhancement with comprehensive debugging support, intelligent error tracking, advanced profiling capabilities, and operational excellence while maintaining appropriate performance, efficiency validation, and comprehensive debugging for the Veridis decentralized identity protocol development ecosystem!
#
# ==============================================================================
