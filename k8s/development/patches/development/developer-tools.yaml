# ==============================================================================
# Veridis Decentralized Identity Protocol - Development Developer Tools Patch
# ==============================================================================
#
# This Development Developer Tools Patch provides comprehensive development-optimized
# developer tooling configuration for the Veridis Decentralized Identity Protocol, providing:
#
# ENTERPRISE VERIDIS DEVELOPMENT DEVELOPER TOOLS ARCHITECTURE:
#   • Advanced Development Developer Tools with intelligent tooling management and comprehensive development-based optimization
#   • Multi-tier Development Tools architecture with developer productivity, tooling efficiency, debugging support, and validation environments
#   • Comprehensive development tools framework with Developer Tools policies, developer tooling integration, debugging automation
#   • Advanced lifecycle management with automated Tools optimization, developer control, and development enhancement
#   • Enterprise-grade development intelligence with comprehensive analytics and Development Tools performance insights
#
# VERIDIS DEVELOPMENT DEVELOPER TOOLS OPTIMIZATION:
#   • High-performance Development with intelligent tooling management and developer-optimized tools allocation
#   • Intelligent Development tools management with responsive policies and development-based tooling decisions
#   • Advanced Development management with business intelligence and tools-based developer control
#   • Comprehensive development tools control with intelligent Developer Tools management and tooling enhancement
#   • Enterprise acceleration with predictive Developer Tools management and development tooling optimization
#
# COMPLIANCE FRAMEWORK INTEGRATION:
#   • SOC 2 Type II Development Tools controls with comprehensive audit and development requirements
#   • GDPR Development Tools compliance with data protection, privacy controls, and development management
#   • ISO 27001 Development Tools management with comprehensive framework integration
#   • NIST 800-190 container Development Tools security with development-specific validation and compliance
#   • Zero-knowledge protocol compliance with regulatory frameworks and Development Tools best practices
#
# ENTERPRISE OPERATIONAL EXCELLENCE:
#   • Intelligent Development Tools lifecycle management with automated provisioning and development optimization
#   • Predictive development analytics with capacity planning and Development Tools intelligence
#   • Advanced Tools integration with Developer development analytics and performance business intelligence
#   • Comprehensive development tools control with Development Tools preservation and tooling optimization
#   • Business continuity Development Tools with development guarantees and performance optimization
#
# DEVELOPMENT TOOLS ACCELERATION INTELLIGENCE:
#   • Development Tools usage analytics with development patterns and optimization recommendations
#   • Tools monitoring with Developer development latency and management optimization intelligence
#   • Development efficiency with Development Tools analytics and deployment optimization procedures
#   • Cost optimization with Development Tools utilization analysis and development capacity planning procedures
#   • Quality assurance with Development Tools metrics and development validation procedures
#
# ==============================================================================

# ==============================================================================
# Development Tools Sidecar Container Patch
# ==============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: veridis-backend
  namespace: veridis-dev

  # Development tools optimization labels
  labels:
    tools.veridis.xyz/tooling-level: development
    tools.veridis.xyz/tooling-tier: comprehensive
    tools.veridis.xyz/developer-tier: advanced
    tools.veridis.xyz/tooling-profile: developer-enhanced
    tools.veridis.xyz/debugging-support: comprehensive

    # Development tooling management labels
    development.veridis.xyz/tooling-optimization: developer-focused
    development.veridis.xyz/debugging-tools: comprehensive
    development.veridis.xyz/profiling-tools: enabled
    development.veridis.xyz/testing-tools: comprehensive
    development.veridis.xyz/developer-productivity: maximized

    # Tools development labels
    devtools.veridis.xyz/tooling-level: development
    devtools.veridis.xyz/hot-reload: enabled
    devtools.veridis.xyz/live-debugging: enabled
    devtools.veridis.xyz/code-analysis: comprehensive
    devtools.veridis.xyz/performance-tools: enabled

  annotations:
    # Development tooling optimization annotations
    tools.veridis.xyz/tooling-strategy: "developer-productivity-first"
    tools.veridis.xyz/debugging-optimization: "comprehensive-tooling"
    tools.veridis.xyz/profiling-support: "advanced-analysis"
    tools.veridis.xyz/testing-integration: "seamless"
    tools.veridis.xyz/developer-experience: "enhanced"

    # Development tooling management annotations
    devtools.veridis.xyz/tooling-level: "comprehensive"
    devtools.veridis.xyz/debugging-capabilities: "advanced"
    devtools.veridis.xyz/profiling-tools: "enabled"
    devtools.veridis.xyz/testing-framework: "integrated"
    devtools.veridis.xyz/code-quality: "comprehensive"

    # Developer productivity annotations
    productivity.veridis.xyz/tooling-balance: "productivity-optimized"
    productivity.veridis.xyz/debugging-access: "unrestricted"
    productivity.veridis.xyz/development-workflow: "streamlined"
    productivity.veridis.xyz/tooling-overhead: "minimal"
    productivity.veridis.xyz/developer-experience: "exceptional"

spec:
  template:
    spec:
      containers:
        - name: veridis-backend
          # ==============================================================================
          # Development Tools Environment Variables
          # ==============================================================================
          env:
            # Development tools configuration
            - name: DEVELOPER_TOOLS_ENABLED
              value: "true"
            - name: DEV_TOOLS_PROFILE
              value: "comprehensive"
            - name: DEVELOPER_MODE
              value: "true"
            - name: DEVELOPMENT_TOOLING
              value: "advanced"

            # Hot reload configuration
            - name: HOT_RELOAD_ENABLED
              value: "true"
            - name: HOT_RELOAD_PORT
              value: "8082"
            - name: HOT_RELOAD_WATCH_PATTERNS
              value: "src/**/*.rs,Cargo.toml,config/**/*.toml"
            - name: HOT_RELOAD_DEBOUNCE_MS
              value: "500"
            - name: HOT_RELOAD_NOTIFY_ON_CHANGE
              value: "true"

            # Live debugging configuration
            - name: LIVE_DEBUGGING_ENABLED
              value: "true"
            - name: DEBUG_SERVER_PORT
              value: "8083"
            - name: DEBUG_BREAKPOINTS_ENABLED
              value: "true"
            - name: DEBUG_STEP_DEBUGGING
              value: "true"
            - name: DEBUG_VARIABLE_INSPECTION
              value: "true"
            - name: DEBUG_CALL_STACK_TRACKING
              value: "true"

            # Code analysis tools
            - name: CODE_ANALYSIS_ENABLED
              value: "true"
            - name: LINT_ON_SAVE
              value: "true"
            - name: FORMAT_ON_SAVE
              value: "true"
            - name: TYPE_CHECKING_ENABLED
              value: "true"
            - name: CODE_COVERAGE_ENABLED
              value: "true"
            - name: STATIC_ANALYSIS_ENABLED
              value: "true"

            # Performance profiling tools
            - name: PERFORMANCE_PROFILING_ENABLED
              value: "true"
            - name: CPU_PROFILING_ENABLED
              value: "true"
            - name: MEMORY_PROFILING_ENABLED
              value: "true"
            - name: IO_PROFILING_ENABLED
              value: "true"
            - name: NETWORK_PROFILING_ENABLED
              value: "true"
            - name: DATABASE_PROFILING_ENABLED
              value: "true"

            # Testing tools integration
            - name: TESTING_TOOLS_ENABLED
              value: "true"
            - name: UNIT_TEST_RUNNER
              value: "cargo-test"
            - name: INTEGRATION_TEST_RUNNER
              value: "cargo-test"
            - name: TEST_COVERAGE_TOOL
              value: "tarpaulin"
            - name: BENCHMARK_TOOL
              value: "criterion"
            - name: PROPERTY_TEST_TOOL
              value: "proptest"

            # Developer productivity tools
            - name: AUTO_COMPLETION_ENABLED
              value: "true"
            - name: SYNTAX_HIGHLIGHTING_ENABLED
              value: "true"
            - name: ERROR_HIGHLIGHTING_ENABLED
              value: "true"
            - name: REFACTORING_TOOLS_ENABLED
              value: "true"
            - name: CODE_NAVIGATION_ENABLED
              value: "true"
            - name: DOCUMENTATION_PREVIEW
              value: "true"

            # Development server configuration
            - name: DEV_SERVER_ENABLED
              value: "true"
            - name: DEV_SERVER_PORT
              value: "8084"
            - name: DEV_SERVER_AUTO_RESTART
              value: "true"
            - name: DEV_SERVER_GRACEFUL_SHUTDOWN
              value: "true"
            - name: DEV_SERVER_HEALTH_CHECK
              value: "true"

            # File watching and synchronization
            - name: FILE_WATCHER_ENABLED
              value: "true"
            - name: FILE_SYNC_ENABLED
              value: "true"
            - name: LIVE_SYNC_PATTERNS
              value: "src/**/*,config/**/*,Cargo.toml"
            - name: SYNC_EXCLUDE_PATTERNS
              value: "target/**/*,node_modules/**/*"
            - name: SYNC_DEBOUNCE_MS
              value: "300"

            # Development database tools
            - name: DB_MIGRATION_TOOLS
              value: "true"
            - name: DB_SEED_TOOLS
              value: "true"
            - name: DB_QUERY_BUILDER
              value: "true"
            - name: DB_SCHEMA_VALIDATOR
              value: "true"
            - name: DB_PERFORMANCE_ANALYZER
              value: "true"

            # API development tools
            - name: API_DOCUMENTATION_GENERATOR
              value: "true"
            - name: API_TESTING_TOOLS
              value: "true"
            - name: API_MOCK_SERVER
              value: "true"
            - name: SWAGGER_UI_ENABLED
              value: "true"
            - name: POSTMAN_COLLECTION_GENERATOR
              value: "true"

            # ZK development tools integration
            - name: ZK_CIRCUIT_ANALYZER
              value: "true"
            - name: ZK_PROOF_VISUALIZER
              value: "true"
            - name: ZK_CONSTRAINT_INSPECTOR
              value: "true"
            - name: ZK_WITNESS_DEBUGGER
              value: "true"
            - name: ZK_PERFORMANCE_PROFILER
              value: "true"

            # Security analysis tools
            - name: SECURITY_SCANNER_ENABLED
              value: "true"
            - name: VULNERABILITY_SCANNER
              value: "cargo-audit"
            - name: DEPENDENCY_CHECKER
              value: "cargo-outdated"
            - name: LICENSE_CHECKER
              value: "cargo-license"
            - name: SECRETS_SCANNER
              value: "true"

            # Documentation tools
            - name: DOC_GENERATOR_ENABLED
              value: "true"
            - name: API_DOC_GENERATOR
              value: "rustdoc"
            - name: README_GENERATOR
              value: "true"
            - name: CHANGELOG_GENERATOR
              value: "true"
            - name: DOC_PREVIEW_SERVER
              value: "true"

            # Logging and monitoring tools
            - name: LOG_ANALYZER_ENABLED
              value: "true"
            - name: LOG_VIEWER_PORT
              value: "8085"
            - name: METRICS_DASHBOARD_PORT
              value: "8086"
            - name: TRACE_VIEWER_PORT
              value: "8087"
            - name: PERFORMANCE_DASHBOARD_PORT
              value: "8088"

          # ==============================================================================
          # Development Tools Volume Mounts
          # ==============================================================================
          volumeMounts:
            # Application source code volume (for hot reload)
            - name: source-code
              mountPath: /app/src
              readOnly: false

            # Configuration files volume
            - name: config-files
              mountPath: /app/config
              readOnly: false

            # Development tools volume
            - name: dev-tools
              mountPath: /app/dev-tools
              readOnly: false

            # Build cache volume
            - name: build-cache
              mountPath: /app/target
              readOnly: false

            # Test results volume
            - name: test-results
              mountPath: /app/test-results
              readOnly: false

            # Coverage reports volume
            - name: coverage-reports
              mountPath: /app/coverage
              readOnly: false

            # Profiling data volume
            - name: profiling-data
              mountPath: /app/profiling
              readOnly: false

            # Documentation volume
            - name: documentation
              mountPath: /app/docs
              readOnly: false

            # Development scripts volume
            - name: dev-scripts
              mountPath: /app/scripts
              readOnly: false

          # ==============================================================================
          # Development Tools Ports
          # ==============================================================================
          ports:
            # Main application port
            - name: http
              containerPort: 8080
              protocol: TCP

            # Hot reload port
            - name: hot-reload
              containerPort: 8082
              protocol: TCP

            # Debug server port
            - name: debug-server
              containerPort: 8083
              protocol: TCP

            # Development server port
            - name: dev-server
              containerPort: 8084
              protocol: TCP

            # Log viewer port
            - name: log-viewer
              containerPort: 8085
              protocol: TCP

            # Metrics dashboard port
            - name: metrics-dash
              containerPort: 8086
              protocol: TCP

            # Trace viewer port
            - name: trace-viewer
              containerPort: 8087
              protocol: TCP

            # Performance dashboard port
            - name: perf-dash
              containerPort: 8088
              protocol: TCP

        # ==============================================================================
        # Development Tools Sidecar Container
        # ==============================================================================
        - name: dev-tools-sidecar
          image: veridis/dev-tools:v3.2.1-dev

          # ==============================================================================
          # Development Tools Sidecar Environment Variables
          # ==============================================================================
          env:
            # Sidecar configuration
            - name: SIDECAR_MODE
              value: "development"
            - name: MAIN_SERVICE_HOST
              value: "localhost"
            - name: MAIN_SERVICE_PORT
              value: "8080"

            # File watching configuration
            - name: WATCH_DIRECTORIES
              value: "/shared/src,/shared/config"
            - name: WATCH_PATTERNS
              value: "**/*.rs,**/*.toml,**/*.json,**/*.yaml"
            - name: IGNORE_PATTERNS
              value: "target/**,node_modules/**,.git/**"
            - name: WATCH_DEBOUNCE_MS
              value: "500"

            # Hot reload configuration
            - name: HOT_RELOAD_ENABLED
              value: "true"
            - name: HOT_RELOAD_TRIGGER_ENDPOINT
              value: "http://localhost:8082/reload"
            - name: HOT_RELOAD_NOTIFICATION_WEBHOOK
              value: "http://localhost:8080/dev/reload-notification"

            # Code analysis configuration
            - name: RUST_ANALYZER_ENABLED
              value: "true"
            - name: CLIPPY_ENABLED
              value: "true"
            - name: RUSTFMT_ENABLED
              value: "true"
            - name: CARGO_CHECK_ENABLED
              value: "true"
            - name: SECURITY_AUDIT_ENABLED
              value: "true"

            # Testing configuration
            - name: AUTO_TEST_ON_CHANGE
              value: "true"
            - name: TEST_COVERAGE_ON_CHANGE
              value: "true"
            - name: BENCHMARK_ON_CHANGE
              value: "false"
            - name: TEST_PARALLEL_EXECUTION
              value: "true"
            - name: TEST_TIMEOUT_SECONDS
              value: "300"

            # Performance monitoring configuration
            - name: PERFORMANCE_MONITORING_ENABLED
              value: "true"
            - name: CPU_PROFILING_INTERVAL_SECONDS
              value: "60"
            - name: MEMORY_PROFILING_INTERVAL_SECONDS
              value: "30"
            - name: IO_MONITORING_ENABLED
              value: "true"
            - name: NETWORK_MONITORING_ENABLED
              value: "true"

            # Development server configuration
            - name: DEV_SERVER_AUTO_RESTART
              value: "true"
            - name: DEV_SERVER_GRACEFUL_SHUTDOWN_TIMEOUT
              value: "30s"
            - name: DEV_SERVER_HEALTH_CHECK_INTERVAL
              value: "10s"
            - name: DEV_SERVER_LOG_LEVEL
              value: "debug"

            # Documentation generation
            - name: AUTO_DOC_GENERATION
              value: "true"
            - name: DOC_FORMAT
              value: "html"
            - name: DOC_INCLUDE_PRIVATE
              value: "true"
            - name: DOC_INCLUDE_EXAMPLES
              value: "true"

            # Logging configuration
            - name: LOG_AGGREGATION_ENABLED
              value: "true"
            - name: LOG_ANALYSIS_ENABLED
              value: "true"
            - name: LOG_RETENTION_HOURS
              value: "24"
            - name: LOG_COMPRESSION_ENABLED
              value: "true"

          # ==============================================================================
          # Development Tools Sidecar Volume Mounts
          # ==============================================================================
          volumeMounts:
            # Shared source code volume
            - name: source-code
              mountPath: /shared/src
              readOnly: false

            # Shared configuration volume
            - name: config-files
              mountPath: /shared/config
              readOnly: false

            # Shared development tools volume
            - name: dev-tools
              mountPath: /shared/dev-tools
              readOnly: false

            # Shared build cache volume
            - name: build-cache
              mountPath: /shared/target
              readOnly: false

            # Tools configuration volume
            - name: tools-config
              mountPath: /tools/config
              readOnly: true

            # Tools data volume
            - name: tools-data
              mountPath: /tools/data
              readOnly: false

            # Tools logs volume
            - name: tools-logs
              mountPath: /tools/logs
              readOnly: false

          # ==============================================================================
          # Development Tools Sidecar Ports
          # ==============================================================================
          ports:
            # Tools API port
            - name: tools-api
              containerPort: 9000
              protocol: TCP

            # File watcher port
            - name: file-watcher
              containerPort: 9001
              protocol: TCP

            # Code analysis port
            - name: code-analysis
              containerPort: 9002
              protocol: TCP

            # Test runner port
            - name: test-runner
              containerPort: 9003
              protocol: TCP

            # Documentation server port
            - name: doc-server
              containerPort: 9004
              protocol: TCP

          # ==============================================================================
          # Development Tools Sidecar Resources
          # ==============================================================================
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"

          # ==============================================================================
          # Development Tools Sidecar Health Checks
          # ==============================================================================
          livenessProbe:
            httpGet:
              path: /health
              port: tools-api
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /ready
              port: tools-api
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3

      # ==============================================================================
      # Development Tools Volumes
      # ==============================================================================
      volumes:
        # Source code volume (for hot reload and live editing)
        - name: source-code
          emptyDir:
            sizeLimit: "2Gi"
            medium: ""

        # Configuration files volume
        - name: config-files
          emptyDir:
            sizeLimit: "100Mi"
            medium: ""

        # Development tools volume
        - name: dev-tools
          emptyDir:
            sizeLimit: "1Gi"
            medium: ""

        # Build cache volume
        - name: build-cache
          emptyDir:
            sizeLimit: "5Gi"
            medium: ""

        # Test results volume
        - name: test-results
          emptyDir:
            sizeLimit: "500Mi"
            medium: ""

        # Coverage reports volume
        - name: coverage-reports
          emptyDir:
            sizeLimit: "200Mi"
            medium: ""

        # Profiling data volume
        - name: profiling-data
          emptyDir:
            sizeLimit: "1Gi"
            medium: ""

        # Documentation volume
        - name: documentation
          emptyDir:
            sizeLimit: "500Mi"
            medium: ""

        # Development scripts volume
        - name: dev-scripts
          configMap:
            name: veridis-development-scripts
            defaultMode: 0755

        # Tools configuration volume
        - name: tools-config
          configMap:
            name: veridis-development-tools-config
            defaultMode: 0644

        # Tools data volume
        - name: tools-data
          emptyDir:
            sizeLimit: "1Gi"
            medium: ""

        # Tools logs volume
        - name: tools-logs
          emptyDir:
            sizeLimit: "500Mi"
            medium: ""

---
# ==============================================================================
# Development Tools Configuration ConfigMap
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-development-tools-config
  namespace: veridis-dev

  labels:
    tools.veridis.xyz/component: tools-config
    tools.veridis.xyz/environment: development
    app.kubernetes.io/name: dev-tools
    app.kubernetes.io/component: config
    app.kubernetes.io/part-of: veridis-protocol

  annotations:
    tools.veridis.xyz/description: "Development tools configuration for Veridis Protocol"
    tools.veridis.xyz/config-version: "development-v1"
    tools.veridis.xyz/optimization-level: "development"

data:
  # Rust development tools configuration
  rust-analyzer.json: |
    {
      "rust-analyzer.checkOnSave.command": "clippy",
      "rust-analyzer.checkOnSave.allFeatures": true,
      "rust-analyzer.cargo.buildScripts.enable": true,
      "rust-analyzer.procMacro.enable": true,
      "rust-analyzer.diagnostics.enable": true,
      "rust-analyzer.completion.addCallArgumentSnippets": true,
      "rust-analyzer.completion.addCallParenthesis": true,
      "rust-analyzer.inlayHints.enable": true,
      "rust-analyzer.inlayHints.parameterHints": true,
      "rust-analyzer.inlayHints.typeHints": true,
      "rust-analyzer.lens.enable": true,
      "rust-analyzer.lens.references": true,
      "rust-analyzer.lens.implementations": true
    }

  # Clippy configuration
  clippy.toml: |
    # Clippy configuration for development
    disallowed-methods = []
    disallowed-types = []
    disallowed-macros = []

    # Enable all clippy lints for development
    warn = [
        "clippy::all",
        "clippy::pedantic",
        "clippy::nursery",
        "clippy::cargo"
    ]

    # Allow some lints for development convenience
    allow = [
        "clippy::module_name_repetitions",
        "clippy::similar_names",
        "clippy::too_many_lines",
        "clippy::too_many_arguments"
    ]

  # Rustfmt configuration
  rustfmt.toml: |
    # Rustfmt configuration for development
    edition = "2021"
    max_width = 100
    hard_tabs = false
    tab_spaces = 4
    newline_style = "Unix"
    use_small_heuristics = "Default"
    indent_style = "Block"
    wrap_comments = true
    format_code_in_doc_comments = true
    normalize_comments = true
    normalize_doc_attributes = true
    license_template_path = ""
    format_strings = true
    format_macro_matchers = true
    format_macro_bodies = true
    hex_literal_case = "Preserve"
    empty_item_single_line = true
    struct_lit_single_line = true
    fn_single_line = false
    where_single_line = false
    imports_indent = "Block"
    imports_layout = "Mixed"
    group_imports = "StdExternalCrate"
    reorder_imports = true
    reorder_modules = true
    reorder_impl_items = false

  # Test configuration
  test-config.toml: |
    # Test configuration for development
    [test]
    timeout = 300
    parallel = true
    nocapture = false

    [coverage]
    enabled = true
    format = ["html", "lcov"]
    output_dir = "coverage"
    ignore_patterns = ["tests/*", "examples/*"]

    [benchmark]
    enabled = true
    output_format = "pretty"
    measurement_time = 10
    warm_up_time = 3

  # Hot reload configuration
  hot-reload.json: |
    {
      "enabled": true,
      "port": 8082,
      "watch_patterns": [
        "src/**/*.rs",
        "Cargo.toml",
        "config/**/*.toml",
        "config/**/*.json"
      ],
      "ignore_patterns": [
        "target/**/*",
        ".git/**/*",
        "*.tmp",
        "*.swp"
      ],
      "debounce_ms": 500,
      "auto_restart": true,
      "graceful_shutdown_timeout": "30s",
      "notification_webhook": "http://localhost:8080/dev/reload-notification"
    }

  # Code analysis configuration
  analysis.json: |
    {
      "rust_analyzer": {
        "enabled": true,
        "check_on_save": true,
        "all_features": true
      },
      "clippy": {
        "enabled": true,
        "on_save": true,
        "all_targets": true
      },
      "rustfmt": {
        "enabled": true,
        "on_save": true,
        "edition": "2021"
      },
      "security_audit": {
        "enabled": true,
        "tool": "cargo-audit",
        "auto_fix": false
      },
      "dependency_check": {
        "enabled": true,
        "tool": "cargo-outdated",
        "schedule": "daily"
      }
    }

  # Performance profiling configuration
  profiling.json: |
    {
      "cpu_profiling": {
        "enabled": true,
        "interval_seconds": 60,
        "duration_seconds": 30,
        "format": "flamegraph"
      },
      "memory_profiling": {
        "enabled": true,
        "interval_seconds": 30,
        "track_allocations": true,
        "track_deallocations": true
      },
      "io_profiling": {
        "enabled": true,
        "track_file_operations": true,
        "track_network_operations": true
      },
      "database_profiling": {
        "enabled": true,
        "track_queries": true,
        "track_transactions": true,
        "slow_query_threshold_ms": 100
      }
    }

---
# ==============================================================================
# Development Scripts ConfigMap
# ==============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: veridis-development-scripts
  namespace: veridis-dev

  labels:
    tools.veridis.xyz/component: dev-scripts
    tools.veridis.xyz/environment: development
    app.kubernetes.io/name: dev-scripts
    app.kubernetes.io/component: scripts
    app.kubernetes.io/part-of: veridis-protocol

data:
  # Hot reload script
  hot-reload.sh: |
    #!/bin/bash
    set -euo pipefail

    echo "Starting hot reload watcher..."

    # Install cargo-watch if not present
    if ! command -v cargo-watch &> /dev/null; then
        echo "Installing cargo-watch..."
        cargo install cargo-watch
    fi

    # Start hot reload with cargo-watch
    cargo watch \
        --watch src \
        --watch Cargo.toml \
        --watch config \
        --ignore target/ \
        --ignore .git/ \
        --delay 1 \
        --exec 'run --bin veridis_backend' \
        --shell 'echo "Reloading due to file changes..."'

  # Test runner script
  test-runner.sh: |
    #!/bin/bash
    set -euo pipefail

    echo "Running comprehensive test suite..."

    # Run unit tests
    echo "Running unit tests..."
    cargo test --lib --bins

    # Run integration tests
    echo "Running integration tests..."
    cargo test --test '*'

    # Run doctests
    echo "Running doctests..."
    cargo test --doc

    # Generate test coverage
    if command -v cargo-tarpaulin &> /dev/null; then
        echo "Generating test coverage..."
        cargo tarpaulin --out Html --output-dir coverage
    fi

    # Run benchmarks (if enabled)
    if [ "${RUN_BENCHMARKS:-false}" = "true" ]; then
        echo "Running benchmarks..."
        cargo bench
    fi

    echo "Test suite completed successfully!"

  # Code analysis script
  code-analysis.sh: |
    #!/bin/bash
    set -euo pipefail

    echo "Running code analysis..."

    # Run clippy
    echo "Running clippy..."
    cargo clippy --all-targets --all-features -- -D warnings

    # Run rustfmt check
    echo "Running rustfmt check..."
    cargo fmt --all -- --check

    # Run security audit
    if command -v cargo-audit &> /dev/null; then
        echo "Running security audit..."
        cargo audit
    fi

    # Check for outdated dependencies
    if command -v cargo-outdated &> /dev/null; then
        echo "Checking for outdated dependencies..."
        cargo outdated
    fi

    # Run unused dependencies check
    if command -v cargo-udeps &> /dev/null; then
        echo "Checking for unused dependencies..."
        cargo +nightly udeps
    fi

    echo "Code analysis completed!"

  # Performance profiling script
  performance-profile.sh: |
    #!/bin/bash
    set -euo pipefail

    echo "Starting performance profiling..."

    # Install profiling tools if not present
    if ! command -v cargo-flamegraph &> /dev/null; then
        echo "Installing cargo-flamegraph..."
        cargo install flamegraph
    fi

    # Generate CPU flamegraph
    echo "Generating CPU flamegraph..."
    cargo flamegraph --bin veridis_backend -- --dev-mode

    # Generate memory profile (if heaptrack is available)
    if command -v heaptrack &> /dev/null; then
        echo "Generating memory profile..."
        heaptrack cargo run --bin veridis_backend -- --dev-mode
    fi

    echo "Performance profiling completed!"

  # Documentation generator script
  doc-generator.sh: |
    #!/bin/bash
    set -euo pipefail

    echo "Generating documentation..."

    # Generate Rust documentation
    echo "Generating Rust docs..."
    cargo doc --no-deps --document-private-items

    # Generate OpenAPI documentation (if available)
    if [ -f "openapi.yaml" ]; then
        echo "Generating OpenAPI docs..."
        # Add OpenAPI doc generation logic here
    fi

    # Generate README from template
    if [ -f "README.template.md" ]; then
        echo "Generating README..."
        # Add README generation logic here
    fi

    echo "Documentation generation completed!"

  # Database tools script
  db-tools.sh: |
    #!/bin/bash
    set -euo pipefail

    command=${1:-help}

    case $command in
        migrate)
            echo "Running database migrations..."
            # Add migration logic here
            ;;
        seed)
            echo "Seeding database with test data..."
            # Add seeding logic here
            ;;
        reset)
            echo "Resetting database..."
            # Add reset logic here
            ;;
        backup)
            echo "Creating database backup..."
            # Add backup logic here
            ;;
        *)
            echo "Usage: $0 {migrate|seed|reset|backup}"
            exit 1
            ;;
    esac

  # Development environment setup script
  dev-setup.sh: |
    #!/bin/bash
    set -euo pipefail

    echo "Setting up development environment..."

    # Install required Rust components
    echo "Installing Rust components..."
    rustup component add rustfmt clippy rust-analyzer

    # Install development tools
    echo "Installing development tools..."
    cargo install cargo-watch cargo-tarpaulin cargo-audit cargo-outdated

    # Install optional tools
    if [ "${INSTALL_OPTIONAL_TOOLS:-true}" = "true" ]; then
        cargo install cargo-udeps flamegraph
    fi

    # Setup pre-commit hooks
    if [ -d ".git" ]; then
        echo "Setting up pre-commit hooks..."
        # Add pre-commit hook setup here
    fi

    echo "Development environment setup completed!"

  # Health check script
  health-check.sh: |
    #!/bin/bash
    set -euo pipefail

    echo "Running development environment health check..."

    # Check main service health
    if curl -f http://localhost:8080/health &> /dev/null; then
        echo "✓ Main service is healthy"
    else
        echo "✗ Main service is not responding"
        exit 1
    fi

    # Check hot reload service
    if curl -f http://localhost:8082/health &> /dev/null; then
        echo "✓ Hot reload service is healthy"
    else
        echo "✗ Hot reload service is not responding"
    fi

    # Check debug server
    if curl -f http://localhost:8083/health &> /dev/null; then
        echo "✓ Debug server is healthy"
    else
        echo "✗ Debug server is not responding"
    fi

    # Check tools API
    if curl -f http://localhost:9000/health &> /dev/null; then
        echo "✓ Tools API is healthy"
    else
        echo "✗ Tools API is not responding"
    fi

    echo "Health check completed!"

---
# ==============================================================================
# Development Tools Service
# ==============================================================================
apiVersion: v1
kind: Service
metadata:
  name: veridis-dev-tools-service
  namespace: veridis-dev

  labels:
    tools.veridis.xyz/component: dev-tools
    tools.veridis.xyz/environment: development
    app.kubernetes.io/name: dev-tools
    app.kubernetes.io/component: service
    app.kubernetes.io/part-of: veridis-protocol

  annotations:
    tools.veridis.xyz/description: "Development tools service for Veridis Protocol"
    tools.veridis.xyz/service-type: "developer-tools"
    tools.veridis.xyz/ports: "9000,9001,9002,9003,9004"

spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: veridis
    app.kubernetes.io/component: backend

  ports:
    # Tools API port
    - name: tools-api
      port: 9000
      targetPort: tools-api
      protocol: TCP

    # File watcher port
    - name: file-watcher
      port: 9001
      targetPort: file-watcher
      protocol: TCP

    # Code analysis port
    - name: code-analysis
      port: 9002
      targetPort: code-analysis
      protocol: TCP

    # Test runner port
    - name: test-runner
      port: 9003
      targetPort: test-runner
      protocol: TCP

    # Documentation server port
    - name: doc-server
      port: 9004
      targetPort: doc-server
      protocol: TCP

---
# ==============================================================================
# Development Tools Ingress (Optional)
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: veridis-dev-tools-ingress
  namespace: veridis-dev

  labels:
    tools.veridis.xyz/component: dev-tools-ingress
    tools.veridis.xyz/environment: development
    app.kubernetes.io/name: dev-tools
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: veridis-protocol

  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    tools.veridis.xyz/description: "Development tools ingress for external access"

spec:
  ingressClassName: nginx

  rules:
    - host: dev-tools.veridis.local
      http:
        paths:
          # Tools API
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: veridis-dev-tools-service
                port:
                  name: tools-api

          # Documentation server
          - path: /docs
            pathType: Prefix
            backend:
              service:
                name: veridis-dev-tools-service
                port:
                  name: doc-server

          # File watcher
          - path: /watcher
            pathType: Prefix
            backend:
              service:
                name: veridis-dev-tools-service
                port:
                  name: file-watcher

          # Code analysis
          - path: /analysis
            pathType: Prefix
            backend:
              service:
                name: veridis-dev-tools-service
                port:
                  name: code-analysis

          # Test runner
          - path: /tests
            pathType: Prefix
            backend:
              service:
                name: veridis-dev-tools-service
                port:
                  name: test-runner

---
# ==============================================================================
# Development Tools RBAC
# ==============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: veridis-dev-tools-sa
  namespace: veridis-dev

  labels:
    tools.veridis.xyz/component: dev-tools-rbac
    tools.veridis.xyz/environment: development

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: veridis-dev-tools-role
  namespace: veridis-dev

  labels:
    tools.veridis.xyz/component: dev-tools-rbac
    tools.veridis.xyz/environment: development

rules:
  # Allow reading pods for development debugging
  - apiGroups: [""]
    resources: ["pods", "pods/log"]
    verbs: ["get", "list", "watch"]

  # Allow reading services for development
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list"]

  # Allow reading configmaps for configuration
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list"]

  # Allow port forwarding for development
  - apiGroups: [""]
    resources: ["pods/portforward"]
    verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: veridis-dev-tools-rolebinding
  namespace: veridis-dev

  labels:
    tools.veridis.xyz/component: dev-tools-rbac
    tools.veridis.xyz/environment: development

subjects:
  - kind: ServiceAccount
    name: veridis-dev-tools-sa
    namespace: veridis-dev

roleRef:
  kind: Role
  name: veridis-dev-tools-role
  apiGroup: rbac.authorization.k8s.io

# ==============================================================================
# Veridis Development Tools Summary and Enterprise Architecture
# ==============================================================================
#
# COMPREHENSIVE VERIDIS DEVELOPMENT TOOLS STRATEGY:
# =================================================
#
# VERIDIS DEVELOPMENT TOOLS ARCHITECTURE OVERVIEW:
# ------------------------------------------------
# 1. Comprehensive Developer Tools Integration:
#    - Comprehensive enterprise-grade development tools with intelligent tooling management and advanced developer-focused optimization
#    - Advanced tools configuration with comprehensive developer productivity, debugging support, testing efficiency, and comprehensive operational excellence
#    - Multi-tier tools architecture with hot reload, live debugging, code analysis, and comprehensive tooling intelligence
#    - Enterprise tools policies with developer-friendly enforcement, productivity controls, debugging automation, and comprehensive tooling procedures
#    - Performance optimization with intelligent tooling allocation, developer efficiency, debugging acceleration, and productivity for maximum development performance
#
# 2. Advanced Development Workflow Enhancement:
#    - Developer-focused workflow optimization with productivity enhancement, debugging efficiency, testing automation, and comprehensive productivity coordination
#    - Advanced workflow configuration with tooling integration, debugging features, testing frameworks, and comprehensive workflow intelligence
#    - Flexible tooling optimization with developer workflow, productivity enhancement, and comprehensive tooling intelligence
#    - Workflow intelligence with tooling procedures, debugging support, productivity automation, and comprehensive workflow coordination
#    - Development excellence with tooling optimization, productivity workflows, debugging automation, and comprehensive tooling environment management
#
# 3. Hot Reload and Live Development:
#    - Hot-reload optimized development with file watching, automatic reloading, live debugging, and comprehensive development coordination
#    - Advanced hot-reload configuration with file monitoring, change detection, reload automation, and comprehensive hot-reload intelligence
#    - Flexible development optimization with live editing, instant feedback, and comprehensive development intelligence
#    - Development intelligence with hot-reload procedures, file watching, development automation, and comprehensive development coordination
#    - Live development excellence with hot-reload optimization, development workflows, live automation, and comprehensive development environment management
#
# ENTERPRISE DEVELOPMENT TOOLS FEATURES:
# ======================================
# Advanced Tools Management and Developer Productivity:
#   - Multi-tier tools architecture with developer optimization, debugging tooling, testing integration, and comprehensive tooling configurations
#   - Intelligent tools management with developer optimization, debugging-focused allocation, productivity enhancement, and comprehensive tooling decisions
#   - Tools discovery with developer optimization, debugging management, tooling policies, and comprehensive tooling analytics
#   - Performance management with developer productivity, debugging efficiency, tooling optimization, and comprehensive performance intelligence
#   - Tools processing tuning with debugging management, productivity optimization, performance algorithms, and intelligent tooling optimization
#
# This Development Tools configuration provides enterprise-grade developer productivity enhancement with comprehensive tooling support, intelligent debugging optimization, advanced development features, and operational excellence while maintaining appropriate performance, efficiency validation, and comprehensive tooling for the Veridis decentralized identity protocol development ecosystem!
#
# ==============================================================================
