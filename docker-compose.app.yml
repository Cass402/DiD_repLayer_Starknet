# Veridis Platform Docker Compose Configuration
#
# This docker-compose file defines the core application services for the Veridis platform:
#
# SERVICES:
# =========
# 1. veridis-backend:
#    - Rust-based core backend API for the Veridis platform
#    - Handles business logic and blockchain interactions
#    - Connects to Starknet, Ethereum, and Cosmos networks
#    - Features comprehensive security, GDPR compliance and health monitoring
#    - Configurable build parameters, environment settings, and security profiles
#
# 2. zk-circuits:
#    - Provides zero-knowledge proof generation and verification capabilities
#    - Supports GPU acceleration via CUDA when available
#    - Configurable security levels and optimization parameters
#    - Implements the Garaga ZK framework with customizable settings
#
# NETWORKS:
# =========
# - veridis-zk-network: Dedicated network for ZK-related services
#   - Configurable driver, encryption, and IP addressing
#
# VOLUMES:
# ========
# - Backend volumes: logs, cache, and temporary storage
# - ZK volumes: keys, cache, circuits, trusted setup, logs, and temporary storage
# - All use consistent naming convention with configurable drivers
#
# SECRETS:
# ========
# - External secrets for secure credential and key management
# - Includes database credentials, service tokens, and cryptographic keys
#
# ENVIRONMENT VARIABLES:
# ======================
# - Extensive configuration via environment variables with sensible defaults
# - Support for development, staging, and production environments
# - Security parameters, resource limits, and feature toggles
#
# SECURITY:
# =========
# - Non-root users, read-only filesystems, and minimal capabilities
# - Seccomp and AppArmor profile support
# - Comprehensive health checking and monitoring
# - Secret management via Docker secrets

version: "3.8"

services:
  # ==============================================================================
  # Backend Service - Rust-based Core
  # ==============================================================================
  # Veridis Backend Service
  #
  # This service defines the core backend API for the Veridis platform, handling all business logic
  # and blockchain interactions.
  #
  # Features:
  # - Built from a Rust codebase with configurable optimization levels
  # - Connects to Starknet, Ethereum, and Cosmos networks
  # - Secured with multiple protection layers (CSRF, rate limiting, MFA)
  # - GDPR compliant with automated data retention policies
  # - Comprehensive health checking and monitoring
  #
  # Environment Variables:
  # - RUST_VERSION: Rust compiler version (default: 1.87)
  # - BUILD_MODE: Build mode for Rust (default: release)
  # - VERSION: Service version tag (default: latest)
  # - BACKEND_PORT: External port mapping (default: 8080)
  # - ENVIRONMENT: Deployment environment (default: production)
  #
  # Security:
  # - Runs as non-root user (1001:1001)
  # - Read-only filesystem with controlled write paths
  # - Restricted capabilities (only NET_BIND_SERVICE)
  # - Configurable seccomp and apparmor profiles
  # - Secret management via Docker secrets
  #
  # Networks:
  # - Connects to core, data, cache, and blockchain networks
  #
  # Volumes:
  # - backend-logs: Persistent storage for application logs
  # - backend-cache: Persistent cache storage
  # - backend-tmp: Temporary files (mounted as tmpfs)
  #
  # Dependencies:
  # - postgres: Database for persistent storage
  # - redis: Cache and session management
  # - starknet-devnet: Starknet development network
  # - vault: Secret management service
  veridis-backend:
    build:
      context: ./services
      dockerfile: Dockerfile
      target: production
      args:
        RUST_VERSION: ${RUST_VERSION:-1.87}
        BUILD_MODE: ${BUILD_MODE:-release}
        STATIC_BUILD: ${STATIC_BUILD:-false}
        OPTIMIZATION_LEVEL: ${OPTIMIZATION_LEVEL:-3}
        SECURITY_SCAN_REQUIRED: ${SECURITY_SCAN_REQUIRED:-true}
        BINARY_NAME: ${BINARY_NAME:-veridis_backend}
    image: ${DOCKER_REGISTRY:-veridis}/backend:${VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME:-veridis}-backend
    hostname: backend.veridis.internal
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    networks:
      - veridis-core-network
      - veridis-data-network
      - veridis-cache-network
      - veridis-blockchain-network
    environment:
      SERVICE_NAME: veridis-backend
      SERVICE_VERSION: ${VERSION:-latest}
      SERVICE_PORT: 8080
      ENVIRONMENT: ${ENVIRONMENT:-production}
      # Database configuration via secrets
      DATABASE_URL_FILE: /run/secrets/database_url
      REDIS_URL_FILE: /run/secrets/redis_url
      # Service URLs
      STARKNET_RPC_URL: http://starknet.veridis.internal:5050/rpc/v0_8_1
      ZK_PROOF_SERVICE_URL: http://zk-circuits.veridis.internal:4000
      VAULT_ADDR: ${VAULT_ADDR:-http://vault.veridis.internal:8200}
      # Security configuration
      VAULT_TOKEN_FILE: /run/secrets/vault_token
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      ENCRYPTION_KEY_FILE: /run/secrets/encryption_key
      # Application settings
      STARKNET_TX_VERSION: ${STARKNET_TX_VERSION:-3}
      RESOURCE_BOUNDS_ENABLED: ${RESOURCE_BOUNDS_ENABLED:-true}
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-1000}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900}
      SESSION_TIMEOUT: ${SESSION_TIMEOUT:-3600}
      PASSWORD_MIN_LENGTH: ${PASSWORD_MIN_LENGTH:-12}
      MFA_REQUIRED: ${MFA_REQUIRED:-true}
      CORS_ORIGINS: ${CORS_ORIGINS:-https://*.veridis.com}
      CSRF_PROTECTION: ${CSRF_PROTECTION:-true}
      # GDPR compliance
      GDPR_AUTOMATION_ENABLED: ${GDPR_AUTOMATION:-true}
      GDPR_CRYPTO_ERASURE_ENABLED: ${GDPR_CRYPTO_ERASURE:-true}
      GDPR_RETENTION_PERIOD: ${GDPR_RETENTION_PERIOD:-2555}
      # Bridge configuration
      ETHEREUM_RPC_URL: ${ETHEREUM_RPC_URL}
      COSMOS_RPC_URL: ${COSMOS_RPC_URL}
      BRIDGE_SECURITY_THRESHOLD: ${BRIDGE_SECURITY_THRESHOLD:-5}
      # Monitoring
      METRICS_ENABLED: ${METRICS_ENABLED:-true}
      HEALTH_CHECK_TIMEOUT: ${HEALTH_CHECK_TIMEOUT:-5000}
    volumes:
      - backend-logs:/app/logs
      - backend-cache:/app/cache
      - backend-tmp:/app/tmp
    depends_on:
      - postgres
      - redis
      - starknet-devnet
      - vault
    security_opt:
      - no-new-privileges:true
      - seccomp:${BACKEND_SECCOMP_PROFILE:-./config/seccomp/backend.json}
      - apparmor:${BACKEND_APPARMOR_PROFILE:-docker-default}
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: false
    tmpfs:
      - /app/tmp:rw,noexec,nosuid,size=200m
    user: "1001:1001"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "-H",
          "User-Agent: Docker-Health",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: ${LOGGING_DRIVER:-json-file}
      options:
        max-size: "100m"
        max-file: "10"
        compress: "true"
    secrets:
      - database_url
      - redis_url
      - vault_token
      - jwt_secret
      - encryption_key
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.backend.tls=true"
      - "service.name=veridis-backend"
      - "service.tier=core"

  # ==============================================================================
  # ZK Circuits Service
  #
  # This service provides zero-knowledge proof generation and verification capabilities.
  #
  # Build Arguments:
  #   - CUDA_VERSION: CUDA version for GPU acceleration (default: 12.0.0)
  #   - GARAGA_VERSION: Version of the Garaga ZK framework (default: 0.18.1)
  #   - NODE_VERSION: Node.js version (default: 22.14.0)
  #   - RUST_VERSION: Rust version (default: 1.87.0)
  #   - OPTIMIZATION_LEVEL: Compiler optimization level (default: 3)
  #   - SECURITY_LEVEL: ZK proof security parameter in bits (default: 128)
  #   - MAX_MEMORY: Maximum memory allocation for Node.js (default: 4096MB)
  #
  # Ports:
  #   - 4000: ZK proof service API endpoint
  #
  # Networks:
  #   - veridis-zk-network: Primary network for ZK services
  #   - veridis-cache-network: Network for caching services
  #
  # Environment Variables:
  #   - SERVICE_NAME: Service identifier
  #   - SERVICE_VERSION: Service version
  #   - PORT: Service port
  #   - NODE_ENV: Runtime environment
  #   - REDIS_URL_FILE: Path to Redis connection details
  #   - VAULT_ADDR: HashiCorp Vault address
  #   - VAULT_TOKEN_FILE: Path to Vault authentication token
  #   - GARAGA_* variables: Configuration for the Garaga ZK framework
  #   - ZK_PROOF_* variables: ZK proof generation parameters
  #   - CUDA_* variables: GPU configuration
  #   - NODE_OPTIONS: Node.js runtime parameters
  #   - SECURITY_LEVEL: Overall security level
  #   - FIPS_MODE: Federal Information Processing Standards compliance
  #
  # Volumes:
  #   - zk-keys: Cryptographic keys storage
  #   - zk-cache: Proof cache storage
  #   - zk-circuits: Circuit definitions
  #   - zk-trusted-setup: Trusted setup parameters (read-only)
  #   - zk-logs: Service logs
  #   - zk-tmp: Temporary storage
  #
  # Dependencies:
  #   - redis: For caching and pub/sub functionality
  #   - vault: For secret management
  #
  # Security:
  #   - Container runs with minimal privileges
  #   - Uses seccomp and AppArmor profiles for confinement
  #   - Drops all capabilities except NET_BIND_SERVICE
  #   - Read-only filesystem with controlled writable areas
  #   - Non-root user (1000:1000)
  #   - GPU access for acceleration when available
  #
  # Monitoring:
  #   - Health checks via HTTP endpoint
  #   - Structured logging
  #
  # Secrets:
  #   - redis_url: Redis connection string
  #   - vault_token: Vault authentication token
  #   - zk_proving_key: ZK circuit proving key
  #   - zk_verification_key: ZK circuit verification key
  # ==============================================================================
  zk-circuits:
    build:
      context: ./circuits
      dockerfile: Dockerfile
      target: production
      args:
        CUDA_VERSION: ${CUDA_VERSION:-12.0.0}
        GARAGA_VERSION: ${GARAGA_VERSION:-0.18.1}
        NODE_VERSION: ${NODE_VERSION:-22.14.0}
        RUST_VERSION: ${RUST_VERSION:-1.87.0}
        OPTIMIZATION_LEVEL: ${OPTIMIZATION_LEVEL:-3}
        SECURITY_LEVEL: ${ZK_SECURITY_LEVEL:-128}
        MAX_MEMORY: ${ZK_MAX_MEMORY:-4096}
    image: ${DOCKER_REGISTRY:-veridis}/zk-circuits:${VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME:-veridis}-zk-circuits
    hostname: zk-circuits.veridis.internal
    ports:
      - "${ZK_PROOF_PORT:-4000}:4000"
    networks:
      - veridis-zk-network
      - veridis-cache-network
    environment:
      SERVICE_NAME: zk-circuits
      SERVICE_VERSION: ${VERSION:-latest}
      PORT: 4000
      NODE_ENV: ${ENVIRONMENT:-production}
      REDIS_URL_FILE: /run/secrets/redis_url
      VAULT_ADDR: ${VAULT_ADDR:-http://vault.veridis.internal:8200}
      VAULT_TOKEN_FILE: /run/secrets/vault_token
      # Garaga configuration
      GARAGA_OPTIMIZATION: ${GARAGA_OPTIMIZATION:-true}
      GARAGA_OPTIMIZATION_LEVEL: ${GARAGA_OPTIMIZATION_LEVEL:-3}
      GARAGA_CUDA_ENABLED: ${CUDA_ENABLED:-false}
      GARAGA_MEMORY_POOL_SIZE: ${GARAGA_MEMORY_POOL:-4GB}
      # ZK proof configuration
      ZK_PROOF_SECURITY_LEVEL: ${ZK_SECURITY_LEVEL:-128}
      PROOF_GENERATION_TIMEOUT: ${PROOF_TIMEOUT:-300000}
      CIRCUIT_COMPILATION_CACHE: ${CIRCUIT_CACHE:-true}
      WITNESS_GENERATION_PARALLEL: ${WITNESS_PARALLEL:-true}
      PROOF_VERIFICATION_CACHE_TTL: ${PROOF_CACHE_TTL:-3600}
      MAX_CONCURRENT_PROOFS: ${MAX_CONCURRENT_PROOFS:-4}
      TRUSTED_SETUP_VALIDATION: ${TRUSTED_SETUP_VALIDATION:-true}
      CIRCUIT_INTEGRITY_CHECK: ${CIRCUIT_INTEGRITY_CHECK:-true}
      # GPU configuration
      CUDA_VISIBLE_DEVICES: ${CUDA_VISIBLE_DEVICES:-all}
      GPU_MEMORY_FRACTION: ${GPU_MEMORY_FRACTION:-0.8}
      # Node.js configuration
      NODE_OPTIONS: "--max-old-space-size=${ZK_MAX_MEMORY:-4096}"
      # Security
      SECURITY_LEVEL: 5
      FIPS_MODE: ${FIPS_MODE:-false}
    volumes:
      - zk-keys:/app/keys
      - zk-cache:/app/cache
      - zk-circuits:/app/circuits
      - zk-trusted-setup:/app/trusted-setup:ro
      - zk-logs:/app/logs
      - zk-tmp:/app/tmp
    depends_on:
      - redis
      - vault
    security_opt:
      - no-new-privileges:true
      - seccomp:${ZK_SECCOMP_PROFILE:-./config/seccomp/zk-circuits.json}
      - apparmor:${ZK_APPARMOR_PROFILE:-docker-default}
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: false
    tmpfs:
      - /app/tmp:rw,noexec,nosuid,size=2g
    user: "1000:1000"
    runtime: ${ZK_RUNTIME:-runc}
    device_requests:
      - driver: nvidia
        count: ${GPU_COUNT:-0}
        capabilities: [gpu]
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "-H",
          "User-Agent: Docker-Health",
          "http://localhost:4000/health",
        ]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 120s
    logging:
      driver: ${LOGGING_DRIVER:-json-file}
      options:
        max-size: "100m"
        max-file: "10"
        compress: "true"
    secrets:
      - redis_url
      - vault_token
      - zk_proving_key
      - zk_verification_key
    labels:
      - "service.name=zk-circuits"
      - "service.tier=computation"
      - "computation.type=zk-proof"

# Docker Compose Network Configuration
#
# This defines a Docker network named "veridis-zk-network" with the following properties:
#
# - Network name: Derived from COMPOSE_PROJECT_NAME environment variable (defaults to "veridis")
# - Driver: Uses the network driver specified by NETWORK_DRIVER env var (defaults to bridge)
# - Encryption: Controlled by NETWORK_ENCRYPTION env var (defaults to false)
# - IP addressing:
#   - Uses default IPAM (IP Address Management) driver
#   - Subnet: 172.24.0.0/16
#   - Gateway: 172.24.0.1
#
# This network configuration allows containers defined in the compose file to communicate
# with each other using a dedicated network segment.
networks:
  veridis-zk-network:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-zk-network
    driver: ${NETWORK_DRIVER:-bridge}
    encrypted: ${NETWORK_ENCRYPTION:-false}
    ipam:
      driver: default
      config:
        - subnet: 172.24.0.0/16
          gateway: 172.24.0.1

# Docker Compose Volumes Configuration
#
# This configuration defines persistent storage volumes for the application:
#
# Backend Volumes:
# - backend-logs: Stores backend service logs
# - backend-cache: Contains cached data for the backend service
# - backend-tmp: Temporary storage space for backend operations
#
# ZK Volumes (Zero-Knowledge Proof related):
# - zk-keys: Stores cryptographic keys for zero-knowledge proofs
# - zk-cache: Contains cached data for ZK proof generations
# - zk-circuits: Stores ZK circuit definitions and implementations
# - zk-trusted-setup: Contains trusted setup parameters for ZK proofs
# - zk-logs: Stores logs specific to the ZK proof systems
# - zk-tmp: Temporary storage for ZK proof generation processes
#
# All volumes use the naming convention: ${COMPOSE_PROJECT_NAME:-veridis}-volume-name
# where "veridis" is the default project name if COMPOSE_PROJECT_NAME is not set.
# The storage driver defaults to "local" but can be overridden with VOLUME_DRIVER.
volumes:
  backend-logs:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-backend-logs
    driver: ${VOLUME_DRIVER:-local}
  backend-cache:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-backend-cache
    driver: ${VOLUME_DRIVER:-local}
  backend-tmp:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-backend-tmp
    driver: ${VOLUME_DRIVER:-local}
  zk-keys:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-zk-keys
    driver: ${VOLUME_DRIVER:-local}
  zk-cache:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-zk-cache
    driver: ${VOLUME_DRIVER:-local}
  zk-circuits:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-zk-circuits
    driver: ${VOLUME_DRIVER:-local}
  zk-trusted-setup:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-zk-trusted-setup
    driver: ${VOLUME_DRIVER:-local}
  zk-logs:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-zk-logs
    driver: ${VOLUME_DRIVER:-local}
  zk-tmp:
    name: ${COMPOSE_PROJECT_NAME:-veridis}-zk-tmp
    driver: ${VOLUME_DRIVER:-local}

# External Secrets Configuration
#
# This section defines external secrets used by the application:
# - database_url: Connection string for the database
# - redis_url: Connection string for Redis
# - vault_token: Authentication token for Vault
# - jwt_secret: Secret key used for JWT authentication
# - encryption_key: Key used for data encryption
# - zk_proving_key: Proving key for zero-knowledge proofs
# - zk_verification_key: Verification key for zero-knowledge proofs
#
# All secrets are configured as external, meaning they are created outside
# of this docker-compose file and referenced here.
#
# The naming convention uses the COMPOSE_PROJECT_NAME environment variable
# (defaults to "veridis") as a prefix for all secret names.
secrets:
  database_url:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-database-url
  redis_url:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-redis-url
  vault_token:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-vault-token
  jwt_secret:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-jwt-secret
  encryption_key:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-encryption-key
  zk_proving_key:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-zk-proving-key
  zk_verification_key:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-veridis}-zk-verification-key
